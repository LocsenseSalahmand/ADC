
H7_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b684  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800b954  0800b954  0001b954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b9e4  0800b9e4  0001b9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b9ec  0800b9ec  0001b9ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b9f0  0800b9f0  0001b9f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800b9f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000534c  24000074  0800ba68  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240053c0  0800ba68  000253c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000202de  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fa4  00000000  00000000  00040380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f60  00000000  00000000  00043328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e88  00000000  00000000  00044288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033d34  00000000  00000000  00045110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015215  00000000  00000000  00078e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00156c6f  00000000  00000000  0008e059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001e4cc8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000451c  00000000  00000000  001e4d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000074 	.word	0x24000074
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b93c 	.word	0x0800b93c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000078 	.word	0x24000078
 800030c:	0800b93c 	.word	0x0800b93c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <debug>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void debug(const void *format, ...)
{
 80006a8:	b40f      	push	{r0, r1, r2, r3}
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
	static char buffer[400];

	// Write the string to the buffer
	int len;
	va_list args;
	va_start(args, format);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	603b      	str	r3, [r7, #0]
	len=vsprintf(buffer, format, args);
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	6939      	ldr	r1, [r7, #16]
 80006ba:	4809      	ldr	r0, [pc, #36]	; (80006e0 <debug+0x38>)
 80006bc:	f00a fd26 	bl	800b10c <vsiprintf>
 80006c0:	6078      	str	r0, [r7, #4]
	va_end(args);

	// Send the buffer to Serial
	HAL_UART_Transmit(&huart3, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	4905      	ldr	r1, [pc, #20]	; (80006e0 <debug+0x38>)
 80006cc:	4805      	ldr	r0, [pc, #20]	; (80006e4 <debug+0x3c>)
 80006ce:	f008 fea5 	bl	800941c <HAL_UART_Transmit>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006dc:	b004      	add	sp, #16
 80006de:	4770      	bx	lr
 80006e0:	24005094 	.word	0x24005094
 80006e4:	24005234 	.word	0x24005234

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ee:	f000 fcb1 	bl	8001054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f2:	f000 f855 	bl	80007a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 80006f6:	f000 f98f 	bl	8000a18 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 f9ad 	bl	8000a58 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006fe:	f000 f8c7 	bl	8000890 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000702:	f000 f93d 	bl	8000980 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, BUF_SIZE) != HAL_OK)
 8000706:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800070a:	491f      	ldr	r1, [pc, #124]	; (8000788 <main+0xa0>)
 800070c:	481f      	ldr	r0, [pc, #124]	; (800078c <main+0xa4>)
 800070e:	f001 fa7b 	bl	8001c08 <HAL_ADC_Start_DMA>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <main+0x34>
  {
	  Error_Handler();
 8000718:	f000 fa40 	bl	8000b9c <Error_Handler>
  }

//  debug("ADC H7 - System clock freq = %u MHz\r\n", HAL_RCC_GetSysClockFreq() / (1000 * 1000));

  debug("Index, value\r\n");
 800071c:	481c      	ldr	r0, [pc, #112]	; (8000790 <main+0xa8>)
 800071e:	f7ff ffc3 	bl	80006a8 <debug>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8000722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000726:	f000 fd27 	bl	8001178 <HAL_Delay>
	  if(counter >= 10000)
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <main+0xac>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000732:	4293      	cmp	r3, r2
 8000734:	d9f5      	bls.n	8000722 <main+0x3a>
	  {
		HAL_ADC_Stop_DMA(&hadc1);
 8000736:	4815      	ldr	r0, [pc, #84]	; (800078c <main+0xa4>)
 8000738:	f001 fb42 	bl	8001dc0 <HAL_ADC_Stop_DMA>

		static uint32_t index = 0;

		for (int i = 0; i < BUF_SIZE; i++)
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	e00f      	b.n	8000762 <main+0x7a>
		{
//			debug("[Sample %d]: %u\r\n", i, adc_buffer[i]);
			debug("%u, %u\r\n", index++, adc_buffer[i]);
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <main+0xb0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	1c5a      	adds	r2, r3, #1
 8000748:	4913      	ldr	r1, [pc, #76]	; (8000798 <main+0xb0>)
 800074a:	600a      	str	r2, [r1, #0]
 800074c:	490e      	ldr	r1, [pc, #56]	; (8000788 <main+0xa0>)
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000754:	4619      	mov	r1, r3
 8000756:	4811      	ldr	r0, [pc, #68]	; (800079c <main+0xb4>)
 8000758:	f7ff ffa6 	bl	80006a8 <debug>
		for (int i = 0; i < BUF_SIZE; i++)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3301      	adds	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8000768:	dbeb      	blt.n	8000742 <main+0x5a>
		}

		counter = 0;
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <main+0xac>)
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]


//		break;

	    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, BUF_SIZE) != HAL_OK)
 8000770:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8000774:	4904      	ldr	r1, [pc, #16]	; (8000788 <main+0xa0>)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <main+0xa4>)
 8000778:	f001 fa46 	bl	8001c08 <HAL_ADC_Start_DMA>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0cf      	beq.n	8000722 <main+0x3a>
	    {
		    Error_Handler();
 8000782:	f000 fa0b 	bl	8000b9c <Error_Handler>
	  HAL_Delay(1000);
 8000786:	e7cc      	b.n	8000722 <main+0x3a>
 8000788:	24000090 	.word	0x24000090
 800078c:	240052c4 	.word	0x240052c4
 8000790:	0800b954 	.word	0x0800b954
 8000794:	24005090 	.word	0x24005090
 8000798:	24005224 	.word	0x24005224
 800079c:	0800b964 	.word	0x0800b964

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b09c      	sub	sp, #112	; 0x70
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	224c      	movs	r2, #76	; 0x4c
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f00a fc8e 	bl	800b0d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2220      	movs	r2, #32
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f00a fc88 	bl	800b0d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007c0:	2002      	movs	r0, #2
 80007c2:	f005 fdd7 	bl	8006374 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b2f      	ldr	r3, [pc, #188]	; (8000888 <SystemClock_Config+0xe8>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	4a2e      	ldr	r2, [pc, #184]	; (8000888 <SystemClock_Config+0xe8>)
 80007d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d4:	6193      	str	r3, [r2, #24]
 80007d6:	4b2c      	ldr	r3, [pc, #176]	; (8000888 <SystemClock_Config+0xe8>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007e2:	bf00      	nop
 80007e4:	4b28      	ldr	r3, [pc, #160]	; (8000888 <SystemClock_Config+0xe8>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007f0:	d1f8      	bne.n	80007e4 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <SystemClock_Config+0xec>)
 80007f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f6:	4a25      	ldr	r2, [pc, #148]	; (800088c <SystemClock_Config+0xec>)
 80007f8:	f023 0303 	bic.w	r3, r3, #3
 80007fc:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fe:	2302      	movs	r3, #2
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000802:	2301      	movs	r3, #1
 8000804:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000806:	2340      	movs	r3, #64	; 0x40
 8000808:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080a:	2302      	movs	r3, #2
 800080c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080e:	2300      	movs	r3, #0
 8000810:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000812:	2304      	movs	r3, #4
 8000814:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 8000816:	2322      	movs	r3, #34	; 0x22
 8000818:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800081a:	2301      	movs	r3, #1
 800081c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800081e:	2304      	movs	r3, #4
 8000820:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000822:	2302      	movs	r3, #2
 8000824:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000826:	230c      	movs	r3, #12
 8000828:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800082a:	2300      	movs	r3, #0
 800082c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 800082e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000832:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000838:	4618      	mov	r0, r3
 800083a:	f005 fdd5 	bl	80063e8 <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000844:	f000 f9aa 	bl	8000b9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	233f      	movs	r3, #63	; 0x3f
 800084a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2303      	movs	r3, #3
 800084e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000854:	2308      	movs	r3, #8
 8000856:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000858:	2340      	movs	r3, #64	; 0x40
 800085a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800085c:	2340      	movs	r3, #64	; 0x40
 800085e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000864:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000866:	2340      	movs	r3, #64	; 0x40
 8000868:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2103      	movs	r1, #3
 800086e:	4618      	mov	r0, r3
 8000870:	f006 f966 	bl	8006b40 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800087a:	f000 f98f 	bl	8000b9c <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3770      	adds	r7, #112	; 0x70
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	58024800 	.word	0x58024800
 800088c:	58024400 	.word	0x58024400

08000890 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008a2:	463b      	mov	r3, r7
 80008a4:	2224      	movs	r2, #36	; 0x24
 80008a6:	2100      	movs	r1, #0
 80008a8:	4618      	mov	r0, r3
 80008aa:	f00a fc11 	bl	800b0d0 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80008ae:	4b31      	ldr	r3, [pc, #196]	; (8000974 <MX_ADC1_Init+0xe4>)
 80008b0:	4a31      	ldr	r2, [pc, #196]	; (8000978 <MX_ADC1_Init+0xe8>)
 80008b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008b4:	4b2f      	ldr	r3, [pc, #188]	; (8000974 <MX_ADC1_Init+0xe4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80008ba:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <MX_ADC1_Init+0xe4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008c0:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <MX_ADC1_Init+0xe4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c6:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <MX_ADC1_Init+0xe4>)
 80008c8:	2204      	movs	r2, #4
 80008ca:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008cc:	4b29      	ldr	r3, [pc, #164]	; (8000974 <MX_ADC1_Init+0xe4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008d2:	4b28      	ldr	r3, [pc, #160]	; (8000974 <MX_ADC1_Init+0xe4>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <MX_ADC1_Init+0xe4>)
 80008da:	2201      	movs	r2, #1
 80008dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MX_ADC1_Init+0xe4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e6:	4b23      	ldr	r3, [pc, #140]	; (8000974 <MX_ADC1_Init+0xe4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ec:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_ADC1_Init+0xe4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80008f2:	4b20      	ldr	r3, [pc, #128]	; (8000974 <MX_ADC1_Init+0xe4>)
 80008f4:	2203      	movs	r2, #3
 80008f6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008f8:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <MX_ADC1_Init+0xe4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_ADC1_Init+0xe4>)
 8000900:	2200      	movs	r2, #0
 8000902:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <MX_ADC1_Init+0xe4>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800090c:	4819      	ldr	r0, [pc, #100]	; (8000974 <MX_ADC1_Init+0xe4>)
 800090e:	f000 ff73 	bl	80017f8 <HAL_ADC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000918:	f000 f940 	bl	8000b9c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	4619      	mov	r1, r3
 8000926:	4813      	ldr	r0, [pc, #76]	; (8000974 <MX_ADC1_Init+0xe4>)
 8000928:	f002 fb38 	bl	8002f9c <HAL_ADCEx_MultiModeConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000932:	f000 f933 	bl	8000b9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_ADC1_Init+0xec>)
 8000938:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800093a:	2306      	movs	r3, #6
 800093c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000942:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000946:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000948:	2304      	movs	r3, #4
 800094a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000956:	463b      	mov	r3, r7
 8000958:	4619      	mov	r1, r3
 800095a:	4806      	ldr	r0, [pc, #24]	; (8000974 <MX_ADC1_Init+0xe4>)
 800095c:	f001 faa6 	bl	8001eac <HAL_ADC_ConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000966:	f000 f919 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	3730      	adds	r7, #48	; 0x30
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	240052c4 	.word	0x240052c4
 8000978:	40022000 	.word	0x40022000
 800097c:	4b840000 	.word	0x4b840000

08000980 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000984:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 8000986:	4a23      	ldr	r2, [pc, #140]	; (8000a14 <MX_USART3_UART_Init+0x94>)
 8000988:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c8:	4811      	ldr	r0, [pc, #68]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009ca:	f008 fcd7 	bl	800937c <HAL_UART_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009d4:	f000 f8e2 	bl	8000b9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d8:	2100      	movs	r1, #0
 80009da:	480d      	ldr	r0, [pc, #52]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009dc:	f00a fa84 	bl	800aee8 <HAL_UARTEx_SetTxFifoThreshold>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009e6:	f000 f8d9 	bl	8000b9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ea:	2100      	movs	r1, #0
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009ee:	f00a fab9 	bl	800af64 <HAL_UARTEx_SetRxFifoThreshold>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009f8:	f000 f8d0 	bl	8000b9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009fe:	f00a fa3a 	bl	800ae76 <HAL_UARTEx_DisableFifoMode>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a08:	f000 f8c8 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	24005234 	.word	0x24005234
 8000a14:	40004800 	.word	0x40004800

08000a18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <MX_DMA_Init+0x3c>)
 8000a20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a24:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <MX_DMA_Init+0x3c>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_DMA_Init+0x3c>)
 8000a30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	200b      	movs	r0, #11
 8000a42:	f002 fc68 	bl	8003316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a46:	200b      	movs	r0, #11
 8000a48:	f002 fc7f 	bl	800334a <HAL_NVIC_EnableIRQ>

}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	58024400 	.word	0x58024400

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6e:	4b3b      	ldr	r3, [pc, #236]	; (8000b5c <MX_GPIO_Init+0x104>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a74:	4a39      	ldr	r2, [pc, #228]	; (8000b5c <MX_GPIO_Init+0x104>)
 8000a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7e:	4b37      	ldr	r3, [pc, #220]	; (8000b5c <MX_GPIO_Init+0x104>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	4b33      	ldr	r3, [pc, #204]	; (8000b5c <MX_GPIO_Init+0x104>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a92:	4a32      	ldr	r2, [pc, #200]	; (8000b5c <MX_GPIO_Init+0x104>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <MX_GPIO_Init+0x104>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b2c      	ldr	r3, [pc, #176]	; (8000b5c <MX_GPIO_Init+0x104>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab0:	4a2a      	ldr	r2, [pc, #168]	; (8000b5c <MX_GPIO_Init+0x104>)
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <MX_GPIO_Init+0x104>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	f003 0302 	and.w	r3, r3, #2
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac8:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <MX_GPIO_Init+0x104>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ace:	4a23      	ldr	r2, [pc, #140]	; (8000b5c <MX_GPIO_Init+0x104>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad8:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <MX_GPIO_Init+0x104>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <MX_GPIO_Init+0x104>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <MX_GPIO_Init+0x104>)
 8000aee:	f043 0310 	orr.w	r3, r3, #16
 8000af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <MX_GPIO_Init+0x104>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	f003 0310 	and.w	r3, r3, #16
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b0a:	4815      	ldr	r0, [pc, #84]	; (8000b60 <MX_GPIO_Init+0x108>)
 8000b0c:	f005 fc18 	bl	8006340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2102      	movs	r1, #2
 8000b14:	4813      	ldr	r0, [pc, #76]	; (8000b64 <MX_GPIO_Init+0x10c>)
 8000b16:	f005 fc13 	bl	8006340 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 8000b1a:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	480b      	ldr	r0, [pc, #44]	; (8000b60 <MX_GPIO_Init+0x108>)
 8000b34:	f005 fa5c 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_GPIO_Init+0x10c>)
 8000b50:	f005 fa4e 	bl	8005ff0 <HAL_GPIO_Init>

}
 8000b54:	bf00      	nop
 8000b56:	3728      	adds	r7, #40	; 0x28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020400 	.word	0x58020400
 8000b64:	58021000 	.word	0x58021000

08000b68 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	GPIOB->ODR ^= (1 << 0);
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000b76:	f083 0301 	eor.w	r3, r3, #1
 8000b7a:	6153      	str	r3, [r2, #20]
	counter++;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_ADC_ConvCpltCallback+0x30>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <HAL_ADC_ConvCpltCallback+0x30>)
 8000b84:	6013      	str	r3, [r2, #0]
//	HAL_ADC_GetValue(&hadc1);
//	HAL_ADC_Start_IT(&hadc1);
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	58020400 	.word	0x58020400
 8000b98:	24005090 	.word	0x24005090

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba6:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <Error_Handler+0x18>)
 8000ba8:	f005 fbca 	bl	8006340 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
  __disable_irq();
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <Error_Handler+0x14>
 8000bb2:	bf00      	nop
 8000bb4:	58020400 	.word	0x58020400

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <HAL_MspInit+0x30>)
 8000bc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bc4:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <HAL_MspInit+0x30>)
 8000bc6:	f043 0302 	orr.w	r3, r3, #2
 8000bca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_MspInit+0x30>)
 8000bd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	58024400 	.word	0x58024400

08000bec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b0b6      	sub	sp, #216	; 0xd8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	22b4      	movs	r2, #180	; 0xb4
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f00a fa5f 	bl	800b0d0 <memset>
  if(hadc->Instance==ADC1)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a48      	ldr	r2, [pc, #288]	; (8000d38 <HAL_ADC_MspInit+0x14c>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	f040 8088 	bne.w	8000d2e <HAL_ADC_MspInit+0x142>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c1e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c22:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8000c24:	2320      	movs	r3, #32
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 160;
 8000c28:	23a0      	movs	r3, #160	; 0xa0
 8000c2a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000c30:	2302      	movs	r3, #2
 8000c32:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8000c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c3c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000c46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c4e:	f107 0310 	add.w	r3, r7, #16
 8000c52:	4618      	mov	r0, r3
 8000c54:	f006 fb00 	bl	8007258 <HAL_RCCEx_PeriphCLKConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000c5e:	f7ff ff9d 	bl	8000b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c62:	4b36      	ldr	r3, [pc, #216]	; (8000d3c <HAL_ADC_MspInit+0x150>)
 8000c64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c68:	4a34      	ldr	r2, [pc, #208]	; (8000d3c <HAL_ADC_MspInit+0x150>)
 8000c6a:	f043 0320 	orr.w	r3, r3, #32
 8000c6e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c72:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <HAL_ADC_MspInit+0x150>)
 8000c74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c78:	f003 0320 	and.w	r3, r3, #32
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	4b2e      	ldr	r3, [pc, #184]	; (8000d3c <HAL_ADC_MspInit+0x150>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	4a2d      	ldr	r2, [pc, #180]	; (8000d3c <HAL_ADC_MspInit+0x150>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c90:	4b2a      	ldr	r3, [pc, #168]	; (8000d3c <HAL_ADC_MspInit+0x150>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c9e:	2310      	movs	r3, #16
 8000ca0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4822      	ldr	r0, [pc, #136]	; (8000d40 <HAL_ADC_MspInit+0x154>)
 8000cb8:	f005 f99a 	bl	8005ff0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000cbc:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <HAL_ADC_MspInit+0x158>)
 8000cbe:	4a22      	ldr	r2, [pc, #136]	; (8000d48 <HAL_ADC_MspInit+0x15c>)
 8000cc0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000cc2:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <HAL_ADC_MspInit+0x158>)
 8000cc4:	2209      	movs	r2, #9
 8000cc6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <HAL_ADC_MspInit+0x158>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <HAL_ADC_MspInit+0x158>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <HAL_ADC_MspInit+0x158>)
 8000cd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cda:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <HAL_ADC_MspInit+0x158>)
 8000cde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ce2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_ADC_MspInit+0x158>)
 8000ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_ADC_MspInit+0x158>)
 8000cee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cf2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <HAL_ADC_MspInit+0x158>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <HAL_ADC_MspInit+0x158>)
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d00:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <HAL_ADC_MspInit+0x158>)
 8000d02:	2203      	movs	r2, #3
 8000d04:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <HAL_ADC_MspInit+0x158>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <HAL_ADC_MspInit+0x158>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d12:	480c      	ldr	r0, [pc, #48]	; (8000d44 <HAL_ADC_MspInit+0x158>)
 8000d14:	f002 fb34 	bl	8003380 <HAL_DMA_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_ADC_MspInit+0x136>
    {
      Error_Handler();
 8000d1e:	f7ff ff3d 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_ADC_MspInit+0x158>)
 8000d26:	659a      	str	r2, [r3, #88]	; 0x58
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <HAL_ADC_MspInit+0x158>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	37d8      	adds	r7, #216	; 0xd8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40022000 	.word	0x40022000
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58020000 	.word	0x58020000
 8000d44:	24005334 	.word	0x24005334
 8000d48:	40020010 	.word	0x40020010

08000d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b0b6      	sub	sp, #216	; 0xd8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	22b4      	movs	r2, #180	; 0xb4
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f00a f9af 	bl	800b0d0 <memset>
  if(huart->Instance==USART3)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a29      	ldr	r2, [pc, #164]	; (8000e1c <HAL_UART_MspInit+0xd0>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d14a      	bne.n	8000e12 <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d86:	f107 0310 	add.w	r3, r7, #16
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f006 fa64 	bl	8007258 <HAL_RCCEx_PeriphCLKConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d96:	f7ff ff01 	bl	8000b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d9a:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <HAL_UART_MspInit+0xd4>)
 8000d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000da0:	4a1f      	ldr	r2, [pc, #124]	; (8000e20 <HAL_UART_MspInit+0xd4>)
 8000da2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_UART_MspInit+0xd4>)
 8000dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000db0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <HAL_UART_MspInit+0xd4>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbe:	4a18      	ldr	r2, [pc, #96]	; (8000e20 <HAL_UART_MspInit+0xd4>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc8:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <HAL_UART_MspInit+0xd4>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000df0:	2307      	movs	r3, #7
 8000df2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4809      	ldr	r0, [pc, #36]	; (8000e24 <HAL_UART_MspInit+0xd8>)
 8000dfe:	f005 f8f7 	bl	8005ff0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	2027      	movs	r0, #39	; 0x27
 8000e08:	f002 fa85 	bl	8003316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e0c:	2027      	movs	r0, #39	; 0x27
 8000e0e:	f002 fa9c 	bl	800334a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	37d8      	adds	r7, #216	; 0xd8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40004800 	.word	0x40004800
 8000e20:	58024400 	.word	0x58024400
 8000e24:	58020c00 	.word	0x58020c00

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <NMI_Handler+0x4>

08000e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e74:	f000 f960 	bl	8001138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <DMA1_Stream0_IRQHandler+0x10>)
 8000e82:	f003 fda3 	bl	80049cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	24005334 	.word	0x24005334

08000e90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <USART3_IRQHandler+0x10>)
 8000e96:	f008 fb57 	bl	8009548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	24005234 	.word	0x24005234

08000ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eac:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <_sbrk+0x5c>)
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <_sbrk+0x60>)
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <_sbrk+0x64>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <_sbrk+0x68>)
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d207      	bcs.n	8000ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed4:	f00a f8d2 	bl	800b07c <__errno>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	220c      	movs	r2, #12
 8000edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e009      	b.n	8000ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <_sbrk+0x64>)
 8000ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	24050000 	.word	0x24050000
 8000f04:	00000400 	.word	0x00000400
 8000f08:	24005228 	.word	0x24005228
 8000f0c:	240053c0 	.word	0x240053c0

08000f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f14:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <SystemInit+0xd0>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1a:	4a31      	ldr	r2, [pc, #196]	; (8000fe0 <SystemInit+0xd0>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f24:	4b2f      	ldr	r3, [pc, #188]	; (8000fe4 <SystemInit+0xd4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 030f 	and.w	r3, r3, #15
 8000f2c:	2b06      	cmp	r3, #6
 8000f2e:	d807      	bhi.n	8000f40 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f30:	4b2c      	ldr	r3, [pc, #176]	; (8000fe4 <SystemInit+0xd4>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f023 030f 	bic.w	r3, r3, #15
 8000f38:	4a2a      	ldr	r2, [pc, #168]	; (8000fe4 <SystemInit+0xd4>)
 8000f3a:	f043 0307 	orr.w	r3, r3, #7
 8000f3e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f40:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <SystemInit+0xd8>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a28      	ldr	r2, [pc, #160]	; (8000fe8 <SystemInit+0xd8>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f4c:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <SystemInit+0xd8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f52:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <SystemInit+0xd8>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4924      	ldr	r1, [pc, #144]	; (8000fe8 <SystemInit+0xd8>)
 8000f58:	4b24      	ldr	r3, [pc, #144]	; (8000fec <SystemInit+0xdc>)
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <SystemInit+0xd4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d007      	beq.n	8000f7a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <SystemInit+0xd4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f023 030f 	bic.w	r3, r3, #15
 8000f72:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <SystemInit+0xd4>)
 8000f74:	f043 0307 	orr.w	r3, r3, #7
 8000f78:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <SystemInit+0xd8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <SystemInit+0xd8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <SystemInit+0xd8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <SystemInit+0xd8>)
 8000f8e:	4a18      	ldr	r2, [pc, #96]	; (8000ff0 <SystemInit+0xe0>)
 8000f90:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <SystemInit+0xd8>)
 8000f94:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <SystemInit+0xe4>)
 8000f96:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <SystemInit+0xd8>)
 8000f9a:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <SystemInit+0xe8>)
 8000f9c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <SystemInit+0xd8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fa4:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <SystemInit+0xd8>)
 8000fa6:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <SystemInit+0xe8>)
 8000fa8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <SystemInit+0xd8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <SystemInit+0xd8>)
 8000fb2:	4a11      	ldr	r2, [pc, #68]	; (8000ff8 <SystemInit+0xe8>)
 8000fb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <SystemInit+0xd8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <SystemInit+0xd8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <SystemInit+0xd8>)
 8000fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <SystemInit+0xd8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <SystemInit+0xec>)
 8000fd0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000fd4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00
 8000fe4:	52002000 	.word	0x52002000
 8000fe8:	58024400 	.word	0x58024400
 8000fec:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ff0:	02020200 	.word	0x02020200
 8000ff4:	01ff0000 	.word	0x01ff0000
 8000ff8:	01010280 	.word	0x01010280
 8000ffc:	52004000 	.word	0x52004000

08001000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001038 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001004:	f7ff ff84 	bl	8000f10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800100a:	490d      	ldr	r1, [pc, #52]	; (8001040 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001020:	4c0a      	ldr	r4, [pc, #40]	; (800104c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102e:	f00a f82b 	bl	800b088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001032:	f7ff fb59 	bl	80006e8 <main>
  bx  lr
 8001036:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001038:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800103c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001040:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001044:	0800b9f4 	.word	0x0800b9f4
  ldr r2, =_sbss
 8001048:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 800104c:	240053c0 	.word	0x240053c0

08001050 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC3_IRQHandler>
	...

08001054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105a:	2003      	movs	r0, #3
 800105c:	f002 f950 	bl	8003300 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001060:	f005 ff24 	bl	8006eac <HAL_RCC_GetSysClockFreq>
 8001064:	4602      	mov	r2, r0
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_Init+0x68>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	0a1b      	lsrs	r3, r3, #8
 800106c:	f003 030f 	and.w	r3, r3, #15
 8001070:	4913      	ldr	r1, [pc, #76]	; (80010c0 <HAL_Init+0x6c>)
 8001072:	5ccb      	ldrb	r3, [r1, r3]
 8001074:	f003 031f 	and.w	r3, r3, #31
 8001078:	fa22 f303 	lsr.w	r3, r2, r3
 800107c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_Init+0x68>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <HAL_Init+0x6c>)
 8001088:	5cd3      	ldrb	r3, [r2, r3]
 800108a:	f003 031f 	and.w	r3, r3, #31
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	fa22 f303 	lsr.w	r3, r2, r3
 8001094:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <HAL_Init+0x70>)
 8001096:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001098:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <HAL_Init+0x74>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800109e:	2000      	movs	r0, #0
 80010a0:	f000 f814 	bl	80010cc <HAL_InitTick>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e002      	b.n	80010b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010ae:	f7ff fd83 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	58024400 	.word	0x58024400
 80010c0:	0800b970 	.word	0x0800b970
 80010c4:	24000004 	.word	0x24000004
 80010c8:	24000000 	.word	0x24000000

080010cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_InitTick+0x60>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e021      	b.n	8001124 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_InitTick+0x64>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_InitTick+0x60>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f002 f935 	bl	8003366 <HAL_SYSTICK_Config>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e00e      	b.n	8001124 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d80a      	bhi.n	8001122 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110c:	2200      	movs	r2, #0
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f002 f8ff 	bl	8003316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <HAL_InitTick+0x68>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	e000      	b.n	8001124 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2400000c 	.word	0x2400000c
 8001130:	24000000 	.word	0x24000000
 8001134:	24000008 	.word	0x24000008

08001138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x20>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x24>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_IncTick+0x24>)
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	2400000c 	.word	0x2400000c
 800115c:	240053ac 	.word	0x240053ac

08001160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <HAL_GetTick+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	240053ac 	.word	0x240053ac

08001178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001180:	f7ff ffee 	bl	8001160 <HAL_GetTick>
 8001184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001190:	d005      	beq.n	800119e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_Delay+0x44>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800119e:	bf00      	nop
 80011a0:	f7ff ffde 	bl	8001160 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d8f7      	bhi.n	80011a0 <HAL_Delay+0x28>
  {
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2400000c 	.word	0x2400000c

080011c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	431a      	orrs	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	609a      	str	r2, [r3, #8]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	431a      	orrs	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	609a      	str	r2, [r3, #8]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001228:	b480      	push	{r7}
 800122a:	b087      	sub	sp, #28
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	3360      	adds	r3, #96	; 0x60
 800123a:	461a      	mov	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4a10      	ldr	r2, [pc, #64]	; (8001288 <LL_ADC_SetOffset+0x60>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d10b      	bne.n	8001264 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	4313      	orrs	r3, r2
 800125a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001262:	e00b      	b.n	800127c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	430b      	orrs	r3, r1
 8001276:	431a      	orrs	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	601a      	str	r2, [r3, #0]
}
 800127c:	bf00      	nop
 800127e:	371c      	adds	r7, #28
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	58026000 	.word	0x58026000

0800128c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3360      	adds	r3, #96	; 0x60
 800129a:	461a      	mov	r2, r3
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	f003 031f 	and.w	r3, r3, #31
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	fa01 f303 	lsl.w	r3, r1, r3
 80012d8:	431a      	orrs	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	611a      	str	r2, [r3, #16]
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4a0c      	ldr	r2, [pc, #48]	; (800132c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d00e      	beq.n	800131e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3360      	adds	r3, #96	; 0x60
 8001304:	461a      	mov	r2, r3
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	431a      	orrs	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	601a      	str	r2, [r3, #0]
  }
}
 800131e:	bf00      	nop
 8001320:	371c      	adds	r7, #28
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	58026000 	.word	0x58026000

08001330 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4a0c      	ldr	r2, [pc, #48]	; (8001370 <LL_ADC_SetOffsetSaturation+0x40>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d10e      	bne.n	8001362 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3360      	adds	r3, #96	; 0x60
 8001348:	461a      	mov	r2, r3
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	431a      	orrs	r2, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001362:	bf00      	nop
 8001364:	371c      	adds	r7, #28
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	58026000 	.word	0x58026000

08001374 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <LL_ADC_SetOffsetSign+0x40>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d10e      	bne.n	80013a6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	3360      	adds	r3, #96	; 0x60
 800138c:	461a      	mov	r2, r3
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	431a      	orrs	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80013a6:	bf00      	nop
 80013a8:	371c      	adds	r7, #28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	58026000 	.word	0x58026000

080013b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b087      	sub	sp, #28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	3360      	adds	r3, #96	; 0x60
 80013c8:	461a      	mov	r2, r3
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4a0c      	ldr	r2, [pc, #48]	; (8001408 <LL_ADC_SetOffsetState+0x50>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d108      	bne.n	80013ec <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	431a      	orrs	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80013ea:	e007      	b.n	80013fc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	431a      	orrs	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	601a      	str	r2, [r3, #0]
}
 80013fc:	bf00      	nop
 80013fe:	371c      	adds	r7, #28
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	58026000 	.word	0x58026000

0800140c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001420:	2301      	movs	r3, #1
 8001422:	e000      	b.n	8001426 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001432:	b480      	push	{r7}
 8001434:	b087      	sub	sp, #28
 8001436:	af00      	add	r7, sp, #0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3330      	adds	r3, #48	; 0x30
 8001442:	461a      	mov	r2, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	0a1b      	lsrs	r3, r3, #8
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	4413      	add	r3, r2
 8001450:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	f003 031f 	and.w	r3, r3, #31
 800145c:	211f      	movs	r1, #31
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	401a      	ands	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	0e9b      	lsrs	r3, r3, #26
 800146a:	f003 011f 	and.w	r1, r3, #31
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	f003 031f 	and.w	r3, r3, #31
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	431a      	orrs	r2, r3
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800147e:	bf00      	nop
 8001480:	371c      	adds	r7, #28
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f023 0203 	bic.w	r2, r3, #3
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	60da      	str	r2, [r3, #12]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f043 0201 	orr.w	r2, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	60da      	str	r2, [r3, #12]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a08      	ldr	r2, [pc, #32]	; (8001500 <LL_ADC_REG_SetDMATransferMode+0x30>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d107      	bne.n	80014f2 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	f023 0203 	bic.w	r2, r3, #3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	431a      	orrs	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60da      	str	r2, [r3, #12]
  }
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	58026000 	.word	0x58026000

08001504 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001504:	b480      	push	{r7}
 8001506:	b087      	sub	sp, #28
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3314      	adds	r3, #20
 8001514:	461a      	mov	r2, r3
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	0e5b      	lsrs	r3, r3, #25
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	4413      	add	r3, r2
 8001522:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	0d1b      	lsrs	r3, r3, #20
 800152c:	f003 031f 	and.w	r3, r3, #31
 8001530:	2107      	movs	r1, #7
 8001532:	fa01 f303 	lsl.w	r3, r1, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	401a      	ands	r2, r3
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	0d1b      	lsrs	r3, r3, #20
 800153e:	f003 031f 	and.w	r3, r3, #31
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	fa01 f303 	lsl.w	r3, r1, r3
 8001548:	431a      	orrs	r2, r3
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800154e:	bf00      	nop
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4a1a      	ldr	r2, [pc, #104]	; (80015d4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d115      	bne.n	800159c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800157c:	43db      	mvns	r3, r3
 800157e:	401a      	ands	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f003 0318 	and.w	r3, r3, #24
 8001586:	4914      	ldr	r1, [pc, #80]	; (80015d8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001588:	40d9      	lsrs	r1, r3
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	400b      	ands	r3, r1
 800158e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001592:	431a      	orrs	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800159a:	e014      	b.n	80015c6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015a8:	43db      	mvns	r3, r3
 80015aa:	401a      	ands	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f003 0318 	and.w	r3, r3, #24
 80015b2:	4909      	ldr	r1, [pc, #36]	; (80015d8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80015b4:	40d9      	lsrs	r1, r3
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	400b      	ands	r3, r1
 80015ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015be:	431a      	orrs	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	58026000 	.word	0x58026000
 80015d8:	000fffff 	.word	0x000fffff

080015dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 031f 	and.w	r3, r3, #31
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001606:	4013      	ands	r3, r2
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6093      	str	r3, [r2, #8]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	5fffffc0 	.word	0x5fffffc0

0800161c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800162c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001630:	d101      	bne.n	8001636 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <LL_ADC_EnableInternalRegulator+0x24>)
 8001652:	4013      	ands	r3, r2
 8001654:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	6fffffc0 	.word	0x6fffffc0

0800166c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001680:	d101      	bne.n	8001686 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <LL_ADC_Enable+0x24>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	f043 0201 	orr.w	r2, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	7fffffc0 	.word	0x7fffffc0

080016bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <LL_ADC_Disable+0x24>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	f043 0202 	orr.w	r2, r3, #2
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	7fffffc0 	.word	0x7fffffc0

080016e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <LL_ADC_IsEnabled+0x18>
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <LL_ADC_IsEnabled+0x1a>
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b02      	cmp	r3, #2
 800171c:	d101      	bne.n	8001722 <LL_ADC_IsDisableOngoing+0x18>
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <LL_ADC_IsDisableOngoing+0x1a>
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <LL_ADC_REG_StartConversion+0x24>)
 800173e:	4013      	ands	r3, r2
 8001740:	f043 0204 	orr.w	r2, r3, #4
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	7fffffc0 	.word	0x7fffffc0

08001758 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <LL_ADC_REG_StopConversion+0x24>)
 8001766:	4013      	ands	r3, r2
 8001768:	f043 0210 	orr.w	r2, r3, #16
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	7fffffc0 	.word	0x7fffffc0

08001780 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b04      	cmp	r3, #4
 8001792:	d101      	bne.n	8001798 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <LL_ADC_INJ_StopConversion+0x24>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	f043 0220 	orr.w	r2, r3, #32
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	7fffffc0 	.word	0x7fffffc0

080017d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d101      	bne.n	80017e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b089      	sub	sp, #36	; 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e1ee      	b.n	8001bf0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181c:	2b00      	cmp	r3, #0
 800181e:	d109      	bne.n	8001834 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff f9e3 	bl	8000bec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff feef 	bl	800161c <LL_ADC_IsDeepPowerDownEnabled>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d004      	beq.n	800184e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fed5 	bl	80015f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ff0a 	bl	800166c <LL_ADC_IsInternalRegulatorEnabled>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d114      	bne.n	8001888 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff feee 	bl	8001644 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001868:	4b8e      	ldr	r3, [pc, #568]	; (8001aa4 <HAL_ADC_Init+0x2ac>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	099b      	lsrs	r3, r3, #6
 800186e:	4a8e      	ldr	r2, [pc, #568]	; (8001aa8 <HAL_ADC_Init+0x2b0>)
 8001870:	fba2 2303 	umull	r2, r3, r2, r3
 8001874:	099b      	lsrs	r3, r3, #6
 8001876:	3301      	adds	r3, #1
 8001878:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800187a:	e002      	b.n	8001882 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	3b01      	subs	r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f9      	bne.n	800187c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff feed 	bl	800166c <LL_ADC_IsInternalRegulatorEnabled>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10d      	bne.n	80018b4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189c:	f043 0210 	orr.w	r2, r3, #16
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018a8:	f043 0201 	orr.w	r2, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff61 	bl	8001780 <LL_ADC_REG_IsConversionOngoing>
 80018be:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c4:	f003 0310 	and.w	r3, r3, #16
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f040 8188 	bne.w	8001bde <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f040 8184 	bne.w	8001bde <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018da:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80018de:	f043 0202 	orr.w	r2, r3, #2
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fefa 	bl	80016e4 <LL_ADC_IsEnabled>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d136      	bne.n	8001964 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a6c      	ldr	r2, [pc, #432]	; (8001aac <HAL_ADC_Init+0x2b4>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d004      	beq.n	800190a <HAL_ADC_Init+0x112>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a6a      	ldr	r2, [pc, #424]	; (8001ab0 <HAL_ADC_Init+0x2b8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d10e      	bne.n	8001928 <HAL_ADC_Init+0x130>
 800190a:	4868      	ldr	r0, [pc, #416]	; (8001aac <HAL_ADC_Init+0x2b4>)
 800190c:	f7ff feea 	bl	80016e4 <LL_ADC_IsEnabled>
 8001910:	4604      	mov	r4, r0
 8001912:	4867      	ldr	r0, [pc, #412]	; (8001ab0 <HAL_ADC_Init+0x2b8>)
 8001914:	f7ff fee6 	bl	80016e4 <LL_ADC_IsEnabled>
 8001918:	4603      	mov	r3, r0
 800191a:	4323      	orrs	r3, r4
 800191c:	2b00      	cmp	r3, #0
 800191e:	bf0c      	ite	eq
 8001920:	2301      	moveq	r3, #1
 8001922:	2300      	movne	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	e008      	b.n	800193a <HAL_ADC_Init+0x142>
 8001928:	4862      	ldr	r0, [pc, #392]	; (8001ab4 <HAL_ADC_Init+0x2bc>)
 800192a:	f7ff fedb 	bl	80016e4 <LL_ADC_IsEnabled>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf0c      	ite	eq
 8001934:	2301      	moveq	r3, #1
 8001936:	2300      	movne	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d012      	beq.n	8001964 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a5a      	ldr	r2, [pc, #360]	; (8001aac <HAL_ADC_Init+0x2b4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d004      	beq.n	8001952 <HAL_ADC_Init+0x15a>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a58      	ldr	r2, [pc, #352]	; (8001ab0 <HAL_ADC_Init+0x2b8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d101      	bne.n	8001956 <HAL_ADC_Init+0x15e>
 8001952:	4a59      	ldr	r2, [pc, #356]	; (8001ab8 <HAL_ADC_Init+0x2c0>)
 8001954:	e000      	b.n	8001958 <HAL_ADC_Init+0x160>
 8001956:	4a59      	ldr	r2, [pc, #356]	; (8001abc <HAL_ADC_Init+0x2c4>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4619      	mov	r1, r3
 800195e:	4610      	mov	r0, r2
 8001960:	f7ff fc2e 	bl	80011c0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a52      	ldr	r2, [pc, #328]	; (8001ab4 <HAL_ADC_Init+0x2bc>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d129      	bne.n	80019c2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7e5b      	ldrb	r3, [r3, #25]
 8001972:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001978:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800197e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b08      	cmp	r3, #8
 8001986:	d013      	beq.n	80019b0 <HAL_ADC_Init+0x1b8>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b0c      	cmp	r3, #12
 800198e:	d00d      	beq.n	80019ac <HAL_ADC_Init+0x1b4>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b1c      	cmp	r3, #28
 8001996:	d007      	beq.n	80019a8 <HAL_ADC_Init+0x1b0>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b18      	cmp	r3, #24
 800199e:	d101      	bne.n	80019a4 <HAL_ADC_Init+0x1ac>
 80019a0:	2318      	movs	r3, #24
 80019a2:	e006      	b.n	80019b2 <HAL_ADC_Init+0x1ba>
 80019a4:	2300      	movs	r3, #0
 80019a6:	e004      	b.n	80019b2 <HAL_ADC_Init+0x1ba>
 80019a8:	2310      	movs	r3, #16
 80019aa:	e002      	b.n	80019b2 <HAL_ADC_Init+0x1ba>
 80019ac:	2308      	movs	r3, #8
 80019ae:	e000      	b.n	80019b2 <HAL_ADC_Init+0x1ba>
 80019b0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80019b2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ba:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
 80019c0:	e00e      	b.n	80019e0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7e5b      	ldrb	r3, [r3, #25]
 80019c6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019cc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80019d2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019da:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d106      	bne.n	80019f8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	3b01      	subs	r3, #1
 80019f0:	045b      	lsls	r3, r3, #17
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d009      	beq.n	8001a14 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a26      	ldr	r2, [pc, #152]	; (8001ab4 <HAL_ADC_Init+0x2bc>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d115      	bne.n	8001a4a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <HAL_ADC_Init+0x2c8>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	69b9      	ldr	r1, [r7, #24]
 8001a2e:	430b      	orrs	r3, r1
 8001a30:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	611a      	str	r2, [r3, #16]
 8001a48:	e009      	b.n	8001a5e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <HAL_ADC_Init+0x2cc>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	69b9      	ldr	r1, [r7, #24]
 8001a5a:	430b      	orrs	r3, r1
 8001a5c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fe8c 	bl	8001780 <LL_ADC_REG_IsConversionOngoing>
 8001a68:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff feae 	bl	80017d0 <LL_ADC_INJ_IsConversionOngoing>
 8001a74:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f040 808e 	bne.w	8001b9a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f040 808a 	bne.w	8001b9a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <HAL_ADC_Init+0x2bc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d11b      	bne.n	8001ac8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7e1b      	ldrb	r3, [r3, #24]
 8001a94:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a9c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	e018      	b.n	8001ad6 <HAL_ADC_Init+0x2de>
 8001aa4:	24000000 	.word	0x24000000
 8001aa8:	053e2d63 	.word	0x053e2d63
 8001aac:	40022000 	.word	0x40022000
 8001ab0:	40022100 	.word	0x40022100
 8001ab4:	58026000 	.word	0x58026000
 8001ab8:	40022300 	.word	0x40022300
 8001abc:	58026300 	.word	0x58026300
 8001ac0:	fff04007 	.word	0xfff04007
 8001ac4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7e1b      	ldrb	r3, [r3, #24]
 8001acc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	4b46      	ldr	r3, [pc, #280]	; (8001bf8 <HAL_ADC_Init+0x400>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	69b9      	ldr	r1, [r7, #24]
 8001ae6:	430b      	orrs	r3, r1
 8001ae8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d137      	bne.n	8001b64 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a3f      	ldr	r2, [pc, #252]	; (8001bfc <HAL_ADC_Init+0x404>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d116      	bne.n	8001b32 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691a      	ldr	r2, [r3, #16]
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <HAL_ADC_Init+0x408>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b16:	4311      	orrs	r1, r2
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b1c:	4311      	orrs	r1, r2
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001b22:	430a      	orrs	r2, r1
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	611a      	str	r2, [r3, #16]
 8001b30:	e020      	b.n	8001b74 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	4b32      	ldr	r3, [pc, #200]	; (8001c04 <HAL_ADC_Init+0x40c>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b40:	3a01      	subs	r2, #1
 8001b42:	0411      	lsls	r1, r2, #16
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b48:	4311      	orrs	r1, r2
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b4e:	4311      	orrs	r1, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001b54:	430a      	orrs	r2, r1
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0201 	orr.w	r2, r2, #1
 8001b60:	611a      	str	r2, [r3, #16]
 8001b62:	e007      	b.n	8001b74 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691a      	ldr	r2, [r3, #16]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0201 	bic.w	r2, r2, #1
 8001b72:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a1b      	ldr	r2, [pc, #108]	; (8001bfc <HAL_ADC_Init+0x404>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d002      	beq.n	8001b9a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f001 f8ef 	bl	8002d78 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d10c      	bne.n	8001bbc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	f023 010f 	bic.w	r1, r3, #15
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	1e5a      	subs	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	631a      	str	r2, [r3, #48]	; 0x30
 8001bba:	e007      	b.n	8001bcc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 020f 	bic.w	r2, r2, #15
 8001bca:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd0:	f023 0303 	bic.w	r3, r3, #3
 8001bd4:	f043 0201 	orr.w	r2, r3, #1
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	661a      	str	r2, [r3, #96]	; 0x60
 8001bdc:	e007      	b.n	8001bee <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be2:	f043 0210 	orr.w	r2, r3, #16
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bee:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3724      	adds	r7, #36	; 0x24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd90      	pop	{r4, r7, pc}
 8001bf8:	ffffbffc 	.word	0xffffbffc
 8001bfc:	58026000 	.word	0x58026000
 8001c00:	fc00f81f 	.word	0xfc00f81f
 8001c04:	fc00f81e 	.word	0xfc00f81e

08001c08 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a60      	ldr	r2, [pc, #384]	; (8001d9c <HAL_ADC_Start_DMA+0x194>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d004      	beq.n	8001c28 <HAL_ADC_Start_DMA+0x20>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a5f      	ldr	r2, [pc, #380]	; (8001da0 <HAL_ADC_Start_DMA+0x198>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d101      	bne.n	8001c2c <HAL_ADC_Start_DMA+0x24>
 8001c28:	4b5e      	ldr	r3, [pc, #376]	; (8001da4 <HAL_ADC_Start_DMA+0x19c>)
 8001c2a:	e000      	b.n	8001c2e <HAL_ADC_Start_DMA+0x26>
 8001c2c:	4b5e      	ldr	r3, [pc, #376]	; (8001da8 <HAL_ADC_Start_DMA+0x1a0>)
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fcd4 	bl	80015dc <LL_ADC_GetMultimode>
 8001c34:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fda0 	bl	8001780 <LL_ADC_REG_IsConversionOngoing>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f040 80a2 	bne.w	8001d8c <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_ADC_Start_DMA+0x4e>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e09d      	b.n	8001d92 <HAL_ADC_Start_DMA+0x18a>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d006      	beq.n	8001c72 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	2b05      	cmp	r3, #5
 8001c68:	d003      	beq.n	8001c72 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	2b09      	cmp	r3, #9
 8001c6e:	f040 8086 	bne.w	8001d7e <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 ff02 	bl	8002a7c <ADC_Enable>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d178      	bne.n	8001d74 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c86:	4b49      	ldr	r3, [pc, #292]	; (8001dac <HAL_ADC_Start_DMA+0x1a4>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a42      	ldr	r2, [pc, #264]	; (8001da0 <HAL_ADC_Start_DMA+0x198>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d002      	beq.n	8001ca2 <HAL_ADC_Start_DMA+0x9a>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	e000      	b.n	8001ca4 <HAL_ADC_Start_DMA+0x9c>
 8001ca2:	4b3e      	ldr	r3, [pc, #248]	; (8001d9c <HAL_ADC_Start_DMA+0x194>)
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d002      	beq.n	8001cb2 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d105      	bne.n	8001cbe <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d006      	beq.n	8001cd8 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cce:	f023 0206 	bic.w	r2, r3, #6
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	665a      	str	r2, [r3, #100]	; 0x64
 8001cd6:	e002      	b.n	8001cde <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce2:	4a33      	ldr	r2, [pc, #204]	; (8001db0 <HAL_ADC_Start_DMA+0x1a8>)
 8001ce4:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	4a32      	ldr	r2, [pc, #200]	; (8001db4 <HAL_ADC_Start_DMA+0x1ac>)
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf2:	4a31      	ldr	r2, [pc, #196]	; (8001db8 <HAL_ADC_Start_DMA+0x1b0>)
 8001cf4:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	221c      	movs	r2, #28
 8001cfc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0210 	orr.w	r2, r2, #16
 8001d14:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a28      	ldr	r2, [pc, #160]	; (8001dbc <HAL_ADC_Start_DMA+0x1b4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d10f      	bne.n	8001d40 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4610      	mov	r0, r2
 8001d30:	f7ff fbce 	bl	80014d0 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fbb9 	bl	80014b0 <LL_ADC_EnableDMAReq>
 8001d3e:	e007      	b.n	8001d50 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f7ff fb9d 	bl	800148a <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	3340      	adds	r3, #64	; 0x40
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f001 fe68 	bl	8003a34 <HAL_DMA_Start_IT>
 8001d64:	4603      	mov	r3, r0
 8001d66:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fcdf 	bl	8001730 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001d72:	e00d      	b.n	8001d90 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8001d7c:	e008      	b.n	8001d90 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001d8a:	e001      	b.n	8001d90 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40022000 	.word	0x40022000
 8001da0:	40022100 	.word	0x40022100
 8001da4:	40022300 	.word	0x40022300
 8001da8:	58026300 	.word	0x58026300
 8001dac:	fffff0fe 	.word	0xfffff0fe
 8001db0:	08002c4f 	.word	0x08002c4f
 8001db4:	08002d27 	.word	0x08002d27
 8001db8:	08002d43 	.word	0x08002d43
 8001dbc:	58026000 	.word	0x58026000

08001dc0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_Stop_DMA+0x16>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e04f      	b.n	8001e76 <HAL_ADC_Stop_DMA+0xb6>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001dde:	2103      	movs	r1, #3
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fd8f 	bl	8002904 <ADC_ConversionStop>
 8001de6:	4603      	mov	r3, r0
 8001de8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d13d      	bne.n	8001e6c <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0203 	bic.w	r2, r2, #3
 8001dfe:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d10f      	bne.n	8001e2e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	4618      	mov	r0, r3
 8001e14:	f002 f878 	bl	8003f08 <HAL_DMA_Abort>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	661a      	str	r2, [r3, #96]	; 0x60
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0210 	bic.w	r2, r2, #16
 8001e3c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d105      	bne.n	8001e50 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 fea3 	bl	8002b90 <ADC_Disable>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	73fb      	strb	r3, [r7, #15]
 8001e4e:	e002      	b.n	8001e56 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fe9d 	bl	8002b90 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d107      	bne.n	8001e6c <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <HAL_ADC_Stop_DMA+0xc0>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	f043 0201 	orr.w	r2, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	661a      	str	r2, [r3, #96]	; 0x60
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	ffffeefe 	.word	0xffffeefe

08001e84 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b0b9      	sub	sp, #228	; 0xe4
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ec6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4ab3      	ldr	r2, [pc, #716]	; (800219c <HAL_ADC_ConfigChannel+0x2f0>)
 8001ece:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d102      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x34>
 8001eda:	2302      	movs	r3, #2
 8001edc:	f000 bcfa 	b.w	80028d4 <HAL_ADC_ConfigChannel+0xa28>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fc47 	bl	8001780 <LL_ADC_REG_IsConversionOngoing>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f040 84de 	bne.w	80028b6 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4aa8      	ldr	r2, [pc, #672]	; (80021a0 <HAL_ADC_ConfigChannel+0x2f4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d033      	beq.n	8001f6c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d108      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x76>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0e9b      	lsrs	r3, r3, #26
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	e01d      	b.n	8001f5e <HAL_ADC_ConfigChannel+0xb2>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8001f46:	2320      	movs	r3, #32
 8001f48:	e004      	b.n	8001f54 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8001f4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	2201      	movs	r2, #1
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	69d1      	ldr	r1, [r2, #28]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6859      	ldr	r1, [r3, #4]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f7ff fa5a 	bl	8001432 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fbfc 	bl	8001780 <LL_ADC_REG_IsConversionOngoing>
 8001f88:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fc1d 	bl	80017d0 <LL_ADC_INJ_IsConversionOngoing>
 8001f96:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f040 8270 	bne.w	8002484 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fa4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f040 826b 	bne.w	8002484 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6819      	ldr	r1, [r3, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f7ff faa2 	bl	8001504 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a76      	ldr	r2, [pc, #472]	; (80021a0 <HAL_ADC_ConfigChannel+0x2f4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d10d      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	08db      	lsrs	r3, r3, #3
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001fe4:	e032      	b.n	800204c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fe6:	4b6f      	ldr	r3, [pc, #444]	; (80021a4 <HAL_ADC_ConfigChannel+0x2f8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001fee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ff2:	d10b      	bne.n	800200c <HAL_ADC_ConfigChannel+0x160>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	e01d      	b.n	8002048 <HAL_ADC_ConfigChannel+0x19c>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10b      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x186>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	695a      	ldr	r2, [r3, #20]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	e00a      	b.n	8002048 <HAL_ADC_ConfigChannel+0x19c>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	2b04      	cmp	r3, #4
 8002052:	d048      	beq.n	80020e6 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6919      	ldr	r1, [r3, #16]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002064:	f7ff f8e0 	bl	8001228 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a4c      	ldr	r2, [pc, #304]	; (80021a0 <HAL_ADC_ConfigChannel+0x2f4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d119      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6919      	ldr	r1, [r3, #16]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	461a      	mov	r2, r3
 8002080:	f7ff f978 	bl	8001374 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6919      	ldr	r1, [r3, #16]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d102      	bne.n	800209c <HAL_ADC_ConfigChannel+0x1f0>
 8002096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800209a:	e000      	b.n	800209e <HAL_ADC_ConfigChannel+0x1f2>
 800209c:	2300      	movs	r3, #0
 800209e:	461a      	mov	r2, r3
 80020a0:	f7ff f946 	bl	8001330 <LL_ADC_SetOffsetSaturation>
 80020a4:	e1ee      	b.n	8002484 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	6919      	ldr	r1, [r3, #16]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d102      	bne.n	80020be <HAL_ADC_ConfigChannel+0x212>
 80020b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80020bc:	e000      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x214>
 80020be:	2300      	movs	r3, #0
 80020c0:	461a      	mov	r2, r3
 80020c2:	f7ff f913 	bl	80012ec <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6919      	ldr	r1, [r3, #16]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	7e1b      	ldrb	r3, [r3, #24]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d102      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x230>
 80020d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020da:	e000      	b.n	80020de <HAL_ADC_ConfigChannel+0x232>
 80020dc:	2300      	movs	r3, #0
 80020de:	461a      	mov	r2, r3
 80020e0:	f7ff f8ea 	bl	80012b8 <LL_ADC_SetDataRightShift>
 80020e4:	e1ce      	b.n	8002484 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a2d      	ldr	r2, [pc, #180]	; (80021a0 <HAL_ADC_ConfigChannel+0x2f4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	f040 8181 	bne.w	80023f4 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff f8c7 	bl	800128c <LL_ADC_GetOffsetChannel>
 80020fe:	4603      	mov	r3, r0
 8002100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10a      	bne.n	800211e <HAL_ADC_ConfigChannel+0x272>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff f8bc 	bl	800128c <LL_ADC_GetOffsetChannel>
 8002114:	4603      	mov	r3, r0
 8002116:	0e9b      	lsrs	r3, r3, #26
 8002118:	f003 021f 	and.w	r2, r3, #31
 800211c:	e01e      	b.n	800215c <HAL_ADC_ConfigChannel+0x2b0>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff f8b1 	bl	800128c <LL_ADC_GetOffsetChannel>
 800212a:	4603      	mov	r3, r0
 800212c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800213c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002140:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002144:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 800214c:	2320      	movs	r3, #32
 800214e:	e004      	b.n	800215a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8002150:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x2c8>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	0e9b      	lsrs	r3, r3, #26
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	e01e      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x306>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002188:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800218c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002190:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d107      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8002198:	2320      	movs	r3, #32
 800219a:	e00a      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x306>
 800219c:	47ff0000 	.word	0x47ff0000
 80021a0:	58026000 	.word	0x58026000
 80021a4:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 80021a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021ac:	fab3 f383 	clz	r3, r3
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d106      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff f8fa 	bl	80013b8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2101      	movs	r1, #1
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff f85e 	bl	800128c <LL_ADC_GetOffsetChannel>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10a      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x344>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2101      	movs	r1, #1
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff f853 	bl	800128c <LL_ADC_GetOffsetChannel>
 80021e6:	4603      	mov	r3, r0
 80021e8:	0e9b      	lsrs	r3, r3, #26
 80021ea:	f003 021f 	and.w	r2, r3, #31
 80021ee:	e01e      	b.n	800222e <HAL_ADC_ConfigChannel+0x382>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2101      	movs	r1, #1
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff f848 	bl	800128c <LL_ADC_GetOffsetChannel>
 80021fc:	4603      	mov	r3, r0
 80021fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002206:	fa93 f3a3 	rbit	r3, r3
 800220a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800220e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002212:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002216:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800221e:	2320      	movs	r3, #32
 8002220:	e004      	b.n	800222c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8002222:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002236:	2b00      	cmp	r3, #0
 8002238:	d105      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x39a>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	0e9b      	lsrs	r3, r3, #26
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	e018      	b.n	8002278 <HAL_ADC_ConfigChannel+0x3cc>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002252:	fa93 f3a3 	rbit	r3, r3
 8002256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800225a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800225e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002262:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800226a:	2320      	movs	r3, #32
 800226c:	e004      	b.n	8002278 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800226e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	429a      	cmp	r2, r3
 800227a:	d106      	bne.n	800228a <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2200      	movs	r2, #0
 8002282:	2101      	movs	r1, #1
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff f897 	bl	80013b8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2102      	movs	r1, #2
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe fffb 	bl	800128c <LL_ADC_GetOffsetChannel>
 8002296:	4603      	mov	r3, r0
 8002298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10a      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x40a>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2102      	movs	r1, #2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fff0 	bl	800128c <LL_ADC_GetOffsetChannel>
 80022ac:	4603      	mov	r3, r0
 80022ae:	0e9b      	lsrs	r3, r3, #26
 80022b0:	f003 021f 	and.w	r2, r3, #31
 80022b4:	e01e      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x448>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2102      	movs	r1, #2
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe ffe5 	bl	800128c <LL_ADC_GetOffsetChannel>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022cc:	fa93 f3a3 	rbit	r3, r3
 80022d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80022d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80022dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80022e4:	2320      	movs	r3, #32
 80022e6:	e004      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80022e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d105      	bne.n	800230c <HAL_ADC_ConfigChannel+0x460>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	0e9b      	lsrs	r3, r3, #26
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	e014      	b.n	8002336 <HAL_ADC_ConfigChannel+0x48a>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800231a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800231c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002320:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8002328:	2320      	movs	r3, #32
 800232a:	e004      	b.n	8002336 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800232c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	429a      	cmp	r2, r3
 8002338:	d106      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2200      	movs	r2, #0
 8002340:	2102      	movs	r1, #2
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff f838 	bl	80013b8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2103      	movs	r1, #3
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe ff9c 	bl	800128c <LL_ADC_GetOffsetChannel>
 8002354:	4603      	mov	r3, r0
 8002356:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10a      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x4c8>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2103      	movs	r1, #3
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe ff91 	bl	800128c <LL_ADC_GetOffsetChannel>
 800236a:	4603      	mov	r3, r0
 800236c:	0e9b      	lsrs	r3, r3, #26
 800236e:	f003 021f 	and.w	r2, r3, #31
 8002372:	e017      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x4f8>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2103      	movs	r1, #3
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe ff86 	bl	800128c <LL_ADC_GetOffsetChannel>
 8002380:	4603      	mov	r3, r0
 8002382:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800238c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800238e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002396:	2320      	movs	r3, #32
 8002398:	e003      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800239a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800239c:	fab3 f383 	clz	r3, r3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	461a      	mov	r2, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d105      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x510>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0e9b      	lsrs	r3, r3, #26
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	e011      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x534>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80023ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023cc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80023ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80023d4:	2320      	movs	r3, #32
 80023d6:	e003      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80023d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d14f      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2200      	movs	r2, #0
 80023ea:	2103      	movs	r1, #3
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe ffe3 	bl	80013b8 <LL_ADC_SetOffsetState>
 80023f2:	e047      	b.n	8002484 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	069b      	lsls	r3, r3, #26
 8002404:	429a      	cmp	r2, r3
 8002406:	d107      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002416:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800241e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	069b      	lsls	r3, r3, #26
 8002428:	429a      	cmp	r2, r3
 800242a:	d107      	bne.n	800243c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800243a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002442:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	069b      	lsls	r3, r3, #26
 800244c:	429a      	cmp	r2, r3
 800244e:	d107      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800245e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002466:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	069b      	lsls	r3, r3, #26
 8002470:	429a      	cmp	r2, r3
 8002472:	d107      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002482:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff f92b 	bl	80016e4 <LL_ADC_IsEnabled>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	f040 8219 	bne.w	80028c8 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	6819      	ldr	r1, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	461a      	mov	r2, r3
 80024a4:	f7ff f85a 	bl	800155c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4aa1      	ldr	r2, [pc, #644]	; (8002734 <HAL_ADC_ConfigChannel+0x888>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	f040 812e 	bne.w	8002710 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10b      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x630>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	0e9b      	lsrs	r3, r3, #26
 80024ca:	3301      	adds	r3, #1
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	2b09      	cmp	r3, #9
 80024d2:	bf94      	ite	ls
 80024d4:	2301      	movls	r3, #1
 80024d6:	2300      	movhi	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	e019      	b.n	8002510 <HAL_ADC_ConfigChannel+0x664>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80024ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80024ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80024f4:	2320      	movs	r3, #32
 80024f6:	e003      	b.n	8002500 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80024f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	3301      	adds	r3, #1
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	2b09      	cmp	r3, #9
 8002508:	bf94      	ite	ls
 800250a:	2301      	movls	r3, #1
 800250c:	2300      	movhi	r3, #0
 800250e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002510:	2b00      	cmp	r3, #0
 8002512:	d079      	beq.n	8002608 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800251c:	2b00      	cmp	r3, #0
 800251e:	d107      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x684>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	0e9b      	lsrs	r3, r3, #26
 8002526:	3301      	adds	r3, #1
 8002528:	069b      	lsls	r3, r3, #26
 800252a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800252e:	e015      	b.n	800255c <HAL_ADC_ConfigChannel+0x6b0>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800253e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002540:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002548:	2320      	movs	r3, #32
 800254a:	e003      	b.n	8002554 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800254c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	3301      	adds	r3, #1
 8002556:	069b      	lsls	r3, r3, #26
 8002558:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <HAL_ADC_ConfigChannel+0x6d0>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0e9b      	lsrs	r3, r3, #26
 800256e:	3301      	adds	r3, #1
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2101      	movs	r1, #1
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	e017      	b.n	80025ac <HAL_ADC_ConfigChannel+0x700>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002584:	fa93 f3a3 	rbit	r3, r3
 8002588:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800258a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800258c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800258e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8002594:	2320      	movs	r3, #32
 8002596:	e003      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8002598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800259a:	fab3 f383 	clz	r3, r3
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	3301      	adds	r3, #1
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	2101      	movs	r1, #1
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	ea42 0103 	orr.w	r1, r2, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10a      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x726>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	0e9b      	lsrs	r3, r3, #26
 80025c2:	3301      	adds	r3, #1
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4613      	mov	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	051b      	lsls	r3, r3, #20
 80025d0:	e018      	b.n	8002604 <HAL_ADC_ConfigChannel+0x758>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80025e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80025e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80025ea:	2320      	movs	r3, #32
 80025ec:	e003      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80025ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	3301      	adds	r3, #1
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	4613      	mov	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4413      	add	r3, r2
 8002602:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002604:	430b      	orrs	r3, r1
 8002606:	e07e      	b.n	8002706 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002610:	2b00      	cmp	r3, #0
 8002612:	d107      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x778>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	0e9b      	lsrs	r3, r3, #26
 800261a:	3301      	adds	r3, #1
 800261c:	069b      	lsls	r3, r3, #26
 800261e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002622:	e015      	b.n	8002650 <HAL_ADC_ConfigChannel+0x7a4>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800263c:	2320      	movs	r3, #32
 800263e:	e003      	b.n	8002648 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8002640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	3301      	adds	r3, #1
 800264a:	069b      	lsls	r3, r3, #26
 800264c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002658:	2b00      	cmp	r3, #0
 800265a:	d109      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x7c4>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	0e9b      	lsrs	r3, r3, #26
 8002662:	3301      	adds	r3, #1
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	2101      	movs	r1, #1
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	e017      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x7f4>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	61bb      	str	r3, [r7, #24]
  return result;
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8002688:	2320      	movs	r3, #32
 800268a:	e003      	b.n	8002694 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	3301      	adds	r3, #1
 8002696:	f003 031f 	and.w	r3, r3, #31
 800269a:	2101      	movs	r1, #1
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	ea42 0103 	orr.w	r1, r2, r3
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10d      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x820>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0e9b      	lsrs	r3, r3, #26
 80026b6:	3301      	adds	r3, #1
 80026b8:	f003 021f 	and.w	r2, r3, #31
 80026bc:	4613      	mov	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	3b1e      	subs	r3, #30
 80026c4:	051b      	lsls	r3, r3, #20
 80026c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ca:	e01b      	b.n	8002704 <HAL_ADC_ConfigChannel+0x858>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	fa93 f3a3 	rbit	r3, r3
 80026d8:	60fb      	str	r3, [r7, #12]
  return result;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80026e4:	2320      	movs	r3, #32
 80026e6:	e003      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	fab3 f383 	clz	r3, r3
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	3301      	adds	r3, #1
 80026f2:	f003 021f 	and.w	r2, r3, #31
 80026f6:	4613      	mov	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	4413      	add	r3, r2
 80026fc:	3b1e      	subs	r3, #30
 80026fe:	051b      	lsls	r3, r3, #20
 8002700:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002704:	430b      	orrs	r3, r1
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	6892      	ldr	r2, [r2, #8]
 800270a:	4619      	mov	r1, r3
 800270c:	f7fe fefa 	bl	8001504 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	f280 80d7 	bge.w	80028c8 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a06      	ldr	r2, [pc, #24]	; (8002738 <HAL_ADC_ConfigChannel+0x88c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d004      	beq.n	800272e <HAL_ADC_ConfigChannel+0x882>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a04      	ldr	r2, [pc, #16]	; (800273c <HAL_ADC_ConfigChannel+0x890>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10a      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x898>
 800272e:	4b04      	ldr	r3, [pc, #16]	; (8002740 <HAL_ADC_ConfigChannel+0x894>)
 8002730:	e009      	b.n	8002746 <HAL_ADC_ConfigChannel+0x89a>
 8002732:	bf00      	nop
 8002734:	47ff0000 	.word	0x47ff0000
 8002738:	40022000 	.word	0x40022000
 800273c:	40022100 	.word	0x40022100
 8002740:	40022300 	.word	0x40022300
 8002744:	4b65      	ldr	r3, [pc, #404]	; (80028dc <HAL_ADC_ConfigChannel+0xa30>)
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fd60 	bl	800120c <LL_ADC_GetCommonPathInternalCh>
 800274c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a62      	ldr	r2, [pc, #392]	; (80028e0 <HAL_ADC_ConfigChannel+0xa34>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d004      	beq.n	8002764 <HAL_ADC_ConfigChannel+0x8b8>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a61      	ldr	r2, [pc, #388]	; (80028e4 <HAL_ADC_ConfigChannel+0xa38>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d10e      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x8d6>
 8002764:	485e      	ldr	r0, [pc, #376]	; (80028e0 <HAL_ADC_ConfigChannel+0xa34>)
 8002766:	f7fe ffbd 	bl	80016e4 <LL_ADC_IsEnabled>
 800276a:	4604      	mov	r4, r0
 800276c:	485d      	ldr	r0, [pc, #372]	; (80028e4 <HAL_ADC_ConfigChannel+0xa38>)
 800276e:	f7fe ffb9 	bl	80016e4 <LL_ADC_IsEnabled>
 8002772:	4603      	mov	r3, r0
 8002774:	4323      	orrs	r3, r4
 8002776:	2b00      	cmp	r3, #0
 8002778:	bf0c      	ite	eq
 800277a:	2301      	moveq	r3, #1
 800277c:	2300      	movne	r3, #0
 800277e:	b2db      	uxtb	r3, r3
 8002780:	e008      	b.n	8002794 <HAL_ADC_ConfigChannel+0x8e8>
 8002782:	4859      	ldr	r0, [pc, #356]	; (80028e8 <HAL_ADC_ConfigChannel+0xa3c>)
 8002784:	f7fe ffae 	bl	80016e4 <LL_ADC_IsEnabled>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	bf0c      	ite	eq
 800278e:	2301      	moveq	r3, #1
 8002790:	2300      	movne	r3, #0
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 8084 	beq.w	80028a2 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a53      	ldr	r2, [pc, #332]	; (80028ec <HAL_ADC_ConfigChannel+0xa40>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d132      	bne.n	800280a <HAL_ADC_ConfigChannel+0x95e>
 80027a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d12c      	bne.n	800280a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a4c      	ldr	r2, [pc, #304]	; (80028e8 <HAL_ADC_ConfigChannel+0xa3c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	f040 8086 	bne.w	80028c8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a47      	ldr	r2, [pc, #284]	; (80028e0 <HAL_ADC_ConfigChannel+0xa34>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d004      	beq.n	80027d0 <HAL_ADC_ConfigChannel+0x924>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a46      	ldr	r2, [pc, #280]	; (80028e4 <HAL_ADC_ConfigChannel+0xa38>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d101      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x928>
 80027d0:	4a47      	ldr	r2, [pc, #284]	; (80028f0 <HAL_ADC_ConfigChannel+0xa44>)
 80027d2:	e000      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x92a>
 80027d4:	4a41      	ldr	r2, [pc, #260]	; (80028dc <HAL_ADC_ConfigChannel+0xa30>)
 80027d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027de:	4619      	mov	r1, r3
 80027e0:	4610      	mov	r0, r2
 80027e2:	f7fe fd00 	bl	80011e6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027e6:	4b43      	ldr	r3, [pc, #268]	; (80028f4 <HAL_ADC_ConfigChannel+0xa48>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	099b      	lsrs	r3, r3, #6
 80027ec:	4a42      	ldr	r2, [pc, #264]	; (80028f8 <HAL_ADC_ConfigChannel+0xa4c>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	099b      	lsrs	r3, r3, #6
 80027f4:	3301      	adds	r3, #1
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027fa:	e002      	b.n	8002802 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	3b01      	subs	r3, #1
 8002800:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f9      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002808:	e05e      	b.n	80028c8 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a3b      	ldr	r2, [pc, #236]	; (80028fc <HAL_ADC_ConfigChannel+0xa50>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d120      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x9aa>
 8002814:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d11a      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a30      	ldr	r2, [pc, #192]	; (80028e8 <HAL_ADC_ConfigChannel+0xa3c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d14e      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a2c      	ldr	r2, [pc, #176]	; (80028e0 <HAL_ADC_ConfigChannel+0xa34>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d004      	beq.n	800283e <HAL_ADC_ConfigChannel+0x992>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a2a      	ldr	r2, [pc, #168]	; (80028e4 <HAL_ADC_ConfigChannel+0xa38>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d101      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x996>
 800283e:	4a2c      	ldr	r2, [pc, #176]	; (80028f0 <HAL_ADC_ConfigChannel+0xa44>)
 8002840:	e000      	b.n	8002844 <HAL_ADC_ConfigChannel+0x998>
 8002842:	4a26      	ldr	r2, [pc, #152]	; (80028dc <HAL_ADC_ConfigChannel+0xa30>)
 8002844:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002848:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800284c:	4619      	mov	r1, r3
 800284e:	4610      	mov	r0, r2
 8002850:	f7fe fcc9 	bl	80011e6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002854:	e038      	b.n	80028c8 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a29      	ldr	r2, [pc, #164]	; (8002900 <HAL_ADC_ConfigChannel+0xa54>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d133      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0xa1c>
 8002860:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d12d      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1d      	ldr	r2, [pc, #116]	; (80028e8 <HAL_ADC_ConfigChannel+0xa3c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d128      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a19      	ldr	r2, [pc, #100]	; (80028e0 <HAL_ADC_ConfigChannel+0xa34>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d004      	beq.n	800288a <HAL_ADC_ConfigChannel+0x9de>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <HAL_ADC_ConfigChannel+0xa38>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d101      	bne.n	800288e <HAL_ADC_ConfigChannel+0x9e2>
 800288a:	4a19      	ldr	r2, [pc, #100]	; (80028f0 <HAL_ADC_ConfigChannel+0xa44>)
 800288c:	e000      	b.n	8002890 <HAL_ADC_ConfigChannel+0x9e4>
 800288e:	4a13      	ldr	r2, [pc, #76]	; (80028dc <HAL_ADC_ConfigChannel+0xa30>)
 8002890:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002898:	4619      	mov	r1, r3
 800289a:	4610      	mov	r0, r2
 800289c:	f7fe fca3 	bl	80011e6 <LL_ADC_SetCommonPathInternalCh>
 80028a0:	e012      	b.n	80028c8 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a6:	f043 0220 	orr.w	r2, r3, #32
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80028b4:	e008      	b.n	80028c8 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ba:	f043 0220 	orr.w	r2, r3, #32
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80028d0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	37e4      	adds	r7, #228	; 0xe4
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd90      	pop	{r4, r7, pc}
 80028dc:	58026300 	.word	0x58026300
 80028e0:	40022000 	.word	0x40022000
 80028e4:	40022100 	.word	0x40022100
 80028e8:	58026000 	.word	0x58026000
 80028ec:	c7520000 	.word	0xc7520000
 80028f0:	40022300 	.word	0x40022300
 80028f4:	24000000 	.word	0x24000000
 80028f8:	053e2d63 	.word	0x053e2d63
 80028fc:	c3210000 	.word	0xc3210000
 8002900:	cb840000 	.word	0xcb840000

08002904 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe ff30 	bl	8001780 <LL_ADC_REG_IsConversionOngoing>
 8002920:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe ff52 	bl	80017d0 <LL_ADC_INJ_IsConversionOngoing>
 800292c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d103      	bne.n	800293c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 8098 	beq.w	8002a6c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d02a      	beq.n	80029a0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	7e5b      	ldrb	r3, [r3, #25]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d126      	bne.n	80029a0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	7e1b      	ldrb	r3, [r3, #24]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d122      	bne.n	80029a0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800295a:	2301      	movs	r3, #1
 800295c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800295e:	e014      	b.n	800298a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	4a45      	ldr	r2, [pc, #276]	; (8002a78 <ADC_ConversionStop+0x174>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d90d      	bls.n	8002984 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296c:	f043 0210 	orr.w	r2, r3, #16
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002978:	f043 0201 	orr.w	r2, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e074      	b.n	8002a6e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	3301      	adds	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002994:	2b40      	cmp	r3, #64	; 0x40
 8002996:	d1e3      	bne.n	8002960 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2240      	movs	r2, #64	; 0x40
 800299e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d014      	beq.n	80029d0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe fee8 	bl	8001780 <LL_ADC_REG_IsConversionOngoing>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00c      	beq.n	80029d0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fea5 	bl	800170a <LL_ADC_IsDisableOngoing>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d104      	bne.n	80029d0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe fec4 	bl	8001758 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d014      	beq.n	8002a00 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fef8 	bl	80017d0 <LL_ADC_INJ_IsConversionOngoing>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00c      	beq.n	8002a00 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe fe8d 	bl	800170a <LL_ADC_IsDisableOngoing>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d104      	bne.n	8002a00 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fed4 	bl	80017a8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d005      	beq.n	8002a12 <ADC_ConversionStop+0x10e>
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d105      	bne.n	8002a18 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002a0c:	230c      	movs	r3, #12
 8002a0e:	617b      	str	r3, [r7, #20]
        break;
 8002a10:	e005      	b.n	8002a1e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002a12:	2308      	movs	r3, #8
 8002a14:	617b      	str	r3, [r7, #20]
        break;
 8002a16:	e002      	b.n	8002a1e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002a18:	2304      	movs	r3, #4
 8002a1a:	617b      	str	r3, [r7, #20]
        break;
 8002a1c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002a1e:	f7fe fb9f 	bl	8001160 <HAL_GetTick>
 8002a22:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a24:	e01b      	b.n	8002a5e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002a26:	f7fe fb9b 	bl	8001160 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b05      	cmp	r3, #5
 8002a32:	d914      	bls.n	8002a5e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00d      	beq.n	8002a5e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a46:	f043 0210 	orr.w	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a52:	f043 0201 	orr.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e007      	b.n	8002a6e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1dc      	bne.n	8002a26 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3720      	adds	r7, #32
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	000cdbff 	.word	0x000cdbff

08002a7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe fe2b 	bl	80016e4 <LL_ADC_IsEnabled>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d16e      	bne.n	8002b72 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	4b38      	ldr	r3, [pc, #224]	; (8002b7c <ADC_Enable+0x100>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00d      	beq.n	8002abe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa6:	f043 0210 	orr.w	r2, r3, #16
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ab2:	f043 0201 	orr.w	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e05a      	b.n	8002b74 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe fde6 	bl	8001694 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ac8:	f7fe fb4a 	bl	8001160 <HAL_GetTick>
 8002acc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a2b      	ldr	r2, [pc, #172]	; (8002b80 <ADC_Enable+0x104>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <ADC_Enable+0x66>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a29      	ldr	r2, [pc, #164]	; (8002b84 <ADC_Enable+0x108>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d101      	bne.n	8002ae6 <ADC_Enable+0x6a>
 8002ae2:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <ADC_Enable+0x10c>)
 8002ae4:	e000      	b.n	8002ae8 <ADC_Enable+0x6c>
 8002ae6:	4b29      	ldr	r3, [pc, #164]	; (8002b8c <ADC_Enable+0x110>)
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe fd77 	bl	80015dc <LL_ADC_GetMultimode>
 8002aee:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a23      	ldr	r2, [pc, #140]	; (8002b84 <ADC_Enable+0x108>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d002      	beq.n	8002b00 <ADC_Enable+0x84>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	e000      	b.n	8002b02 <ADC_Enable+0x86>
 8002b00:	4b1f      	ldr	r3, [pc, #124]	; (8002b80 <ADC_Enable+0x104>)
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d02c      	beq.n	8002b64 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d130      	bne.n	8002b72 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b10:	e028      	b.n	8002b64 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe fde4 	bl	80016e4 <LL_ADC_IsEnabled>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d104      	bne.n	8002b2c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe fdb4 	bl	8001694 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b2c:	f7fe fb18 	bl	8001160 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d914      	bls.n	8002b64 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d00d      	beq.n	8002b64 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4c:	f043 0210 	orr.w	r2, r3, #16
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b58:	f043 0201 	orr.w	r2, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e007      	b.n	8002b74 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d1cf      	bne.n	8002b12 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	8000003f 	.word	0x8000003f
 8002b80:	40022000 	.word	0x40022000
 8002b84:	40022100 	.word	0x40022100
 8002b88:	40022300 	.word	0x40022300
 8002b8c:	58026300 	.word	0x58026300

08002b90 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe fdb4 	bl	800170a <LL_ADC_IsDisableOngoing>
 8002ba2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fe fd9b 	bl	80016e4 <LL_ADC_IsEnabled>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d047      	beq.n	8002c44 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d144      	bne.n	8002c44 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 030d 	and.w	r3, r3, #13
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d10c      	bne.n	8002be2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe fd75 	bl	80016bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bda:	f7fe fac1 	bl	8001160 <HAL_GetTick>
 8002bde:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002be0:	e029      	b.n	8002c36 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be6:	f043 0210 	orr.w	r2, r3, #16
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bf2:	f043 0201 	orr.w	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e023      	b.n	8002c46 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bfe:	f7fe faaf 	bl	8001160 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d914      	bls.n	8002c36 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00d      	beq.n	8002c36 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1e:	f043 0210 	orr.w	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c2a:	f043 0201 	orr.w	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e007      	b.n	8002c46 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1dc      	bne.n	8002bfe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d14b      	bne.n	8002d00 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d021      	beq.n	8002cc6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe fbc0 	bl	800140c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d032      	beq.n	8002cf8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d12b      	bne.n	8002cf8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d11f      	bne.n	8002cf8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cbc:	f043 0201 	orr.w	r2, r3, #1
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	661a      	str	r2, [r3, #96]	; 0x60
 8002cc4:	e018      	b.n	8002cf8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d111      	bne.n	8002cf8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d105      	bne.n	8002cf8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf0:	f043 0201 	orr.w	r2, r3, #1
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f7fd ff35 	bl	8000b68 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cfe:	e00e      	b.n	8002d1e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f7ff f8c3 	bl	8001e98 <HAL_ADC_ErrorCallback>
}
 8002d12:	e004      	b.n	8002d1e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	4798      	blx	r3
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f7ff f8a5 	bl	8001e84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d60:	f043 0204 	orr.w	r2, r3, #4
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f7ff f895 	bl	8001e98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a6b      	ldr	r2, [pc, #428]	; (8002f34 <ADC_ConfigureBoostMode+0x1bc>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d004      	beq.n	8002d94 <ADC_ConfigureBoostMode+0x1c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a6a      	ldr	r2, [pc, #424]	; (8002f38 <ADC_ConfigureBoostMode+0x1c0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d109      	bne.n	8002da8 <ADC_ConfigureBoostMode+0x30>
 8002d94:	4b69      	ldr	r3, [pc, #420]	; (8002f3c <ADC_ConfigureBoostMode+0x1c4>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf14      	ite	ne
 8002da0:	2301      	movne	r3, #1
 8002da2:	2300      	moveq	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	e008      	b.n	8002dba <ADC_ConfigureBoostMode+0x42>
 8002da8:	4b65      	ldr	r3, [pc, #404]	; (8002f40 <ADC_ConfigureBoostMode+0x1c8>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf14      	ite	ne
 8002db4:	2301      	movne	r3, #1
 8002db6:	2300      	moveq	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d01c      	beq.n	8002df8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002dbe:	f004 f9ef 	bl	80071a0 <HAL_RCC_GetHCLKFreq>
 8002dc2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dcc:	d010      	beq.n	8002df0 <ADC_ConfigureBoostMode+0x78>
 8002dce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dd2:	d871      	bhi.n	8002eb8 <ADC_ConfigureBoostMode+0x140>
 8002dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd8:	d002      	beq.n	8002de0 <ADC_ConfigureBoostMode+0x68>
 8002dda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dde:	d16b      	bne.n	8002eb8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	0c1b      	lsrs	r3, r3, #16
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dec:	60fb      	str	r3, [r7, #12]
        break;
 8002dee:	e066      	b.n	8002ebe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	089b      	lsrs	r3, r3, #2
 8002df4:	60fb      	str	r3, [r7, #12]
        break;
 8002df6:	e062      	b.n	8002ebe <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002df8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002dfc:	f005 f926 	bl	800804c <HAL_RCCEx_GetPeriphCLKFreq>
 8002e00:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e0a:	d051      	beq.n	8002eb0 <ADC_ConfigureBoostMode+0x138>
 8002e0c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e10:	d854      	bhi.n	8002ebc <ADC_ConfigureBoostMode+0x144>
 8002e12:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e16:	d047      	beq.n	8002ea8 <ADC_ConfigureBoostMode+0x130>
 8002e18:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e1c:	d84e      	bhi.n	8002ebc <ADC_ConfigureBoostMode+0x144>
 8002e1e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e22:	d03d      	beq.n	8002ea0 <ADC_ConfigureBoostMode+0x128>
 8002e24:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e28:	d848      	bhi.n	8002ebc <ADC_ConfigureBoostMode+0x144>
 8002e2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e2e:	d033      	beq.n	8002e98 <ADC_ConfigureBoostMode+0x120>
 8002e30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e34:	d842      	bhi.n	8002ebc <ADC_ConfigureBoostMode+0x144>
 8002e36:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002e3a:	d029      	beq.n	8002e90 <ADC_ConfigureBoostMode+0x118>
 8002e3c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002e40:	d83c      	bhi.n	8002ebc <ADC_ConfigureBoostMode+0x144>
 8002e42:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e46:	d01a      	beq.n	8002e7e <ADC_ConfigureBoostMode+0x106>
 8002e48:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e4c:	d836      	bhi.n	8002ebc <ADC_ConfigureBoostMode+0x144>
 8002e4e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002e52:	d014      	beq.n	8002e7e <ADC_ConfigureBoostMode+0x106>
 8002e54:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002e58:	d830      	bhi.n	8002ebc <ADC_ConfigureBoostMode+0x144>
 8002e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e5e:	d00e      	beq.n	8002e7e <ADC_ConfigureBoostMode+0x106>
 8002e60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e64:	d82a      	bhi.n	8002ebc <ADC_ConfigureBoostMode+0x144>
 8002e66:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e6a:	d008      	beq.n	8002e7e <ADC_ConfigureBoostMode+0x106>
 8002e6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e70:	d824      	bhi.n	8002ebc <ADC_ConfigureBoostMode+0x144>
 8002e72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e76:	d002      	beq.n	8002e7e <ADC_ConfigureBoostMode+0x106>
 8002e78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e7c:	d11e      	bne.n	8002ebc <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	0c9b      	lsrs	r3, r3, #18
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8c:	60fb      	str	r3, [r7, #12]
        break;
 8002e8e:	e016      	b.n	8002ebe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	60fb      	str	r3, [r7, #12]
        break;
 8002e96:	e012      	b.n	8002ebe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	60fb      	str	r3, [r7, #12]
        break;
 8002e9e:	e00e      	b.n	8002ebe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	099b      	lsrs	r3, r3, #6
 8002ea4:	60fb      	str	r3, [r7, #12]
        break;
 8002ea6:	e00a      	b.n	8002ebe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	09db      	lsrs	r3, r3, #7
 8002eac:	60fb      	str	r3, [r7, #12]
        break;
 8002eae:	e006      	b.n	8002ebe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	0a1b      	lsrs	r3, r3, #8
 8002eb4:	60fb      	str	r3, [r7, #12]
        break;
 8002eb6:	e002      	b.n	8002ebe <ADC_ConfigureBoostMode+0x146>
        break;
 8002eb8:	bf00      	nop
 8002eba:	e000      	b.n	8002ebe <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002ebc:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	085b      	lsrs	r3, r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4a1f      	ldr	r2, [pc, #124]	; (8002f44 <ADC_ConfigureBoostMode+0x1cc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d808      	bhi.n	8002ede <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002eda:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002edc:	e025      	b.n	8002f2a <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4a19      	ldr	r2, [pc, #100]	; (8002f48 <ADC_ConfigureBoostMode+0x1d0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d80a      	bhi.n	8002efc <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef8:	609a      	str	r2, [r3, #8]
}
 8002efa:	e016      	b.n	8002f2a <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4a13      	ldr	r2, [pc, #76]	; (8002f4c <ADC_ConfigureBoostMode+0x1d4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d80a      	bhi.n	8002f1a <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f16:	609a      	str	r2, [r3, #8]
}
 8002f18:	e007      	b.n	8002f2a <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002f28:	609a      	str	r2, [r3, #8]
}
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40022000 	.word	0x40022000
 8002f38:	40022100 	.word	0x40022100
 8002f3c:	40022300 	.word	0x40022300
 8002f40:	58026300 	.word	0x58026300
 8002f44:	005f5e10 	.word	0x005f5e10
 8002f48:	00bebc20 	.word	0x00bebc20
 8002f4c:	017d7840 	.word	0x017d7840

08002f50 <LL_ADC_IsEnabled>:
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <LL_ADC_IsEnabled+0x18>
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <LL_ADC_IsEnabled+0x1a>
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <LL_ADC_REG_IsConversionOngoing>:
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d101      	bne.n	8002f8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f9c:	b590      	push	{r4, r7, lr}
 8002f9e:	b0a3      	sub	sp, #140	; 0x8c
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e0c1      	b.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a5e      	ldr	r2, [pc, #376]	; (8003148 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d102      	bne.n	8002fda <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002fd4:	4b5d      	ldr	r3, [pc, #372]	; (800314c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	e001      	b.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10b      	bne.n	8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe8:	f043 0220 	orr.w	r2, r3, #32
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0a0      	b.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff ffb9 	bl	8002f76 <LL_ADC_REG_IsConversionOngoing>
 8003004:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff ffb2 	bl	8002f76 <LL_ADC_REG_IsConversionOngoing>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	f040 8081 	bne.w	800311c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800301a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800301e:	2b00      	cmp	r3, #0
 8003020:	d17c      	bne.n	800311c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a48      	ldr	r2, [pc, #288]	; (8003148 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d004      	beq.n	8003036 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a46      	ldr	r2, [pc, #280]	; (800314c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d101      	bne.n	800303a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003036:	4b46      	ldr	r3, [pc, #280]	; (8003150 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003038:	e000      	b.n	800303c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800303a:	4b46      	ldr	r3, [pc, #280]	; (8003154 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800303c:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d039      	beq.n	80030ba <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003046:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	431a      	orrs	r2, r3
 8003054:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003056:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a3a      	ldr	r2, [pc, #232]	; (8003148 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d004      	beq.n	800306c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a39      	ldr	r2, [pc, #228]	; (800314c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d10e      	bne.n	800308a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800306c:	4836      	ldr	r0, [pc, #216]	; (8003148 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800306e:	f7ff ff6f 	bl	8002f50 <LL_ADC_IsEnabled>
 8003072:	4604      	mov	r4, r0
 8003074:	4835      	ldr	r0, [pc, #212]	; (800314c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003076:	f7ff ff6b 	bl	8002f50 <LL_ADC_IsEnabled>
 800307a:	4603      	mov	r3, r0
 800307c:	4323      	orrs	r3, r4
 800307e:	2b00      	cmp	r3, #0
 8003080:	bf0c      	ite	eq
 8003082:	2301      	moveq	r3, #1
 8003084:	2300      	movne	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	e008      	b.n	800309c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800308a:	4833      	ldr	r0, [pc, #204]	; (8003158 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800308c:	f7ff ff60 	bl	8002f50 <LL_ADC_IsEnabled>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	bf0c      	ite	eq
 8003096:	2301      	moveq	r3, #1
 8003098:	2300      	movne	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d047      	beq.n	8003130 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	4b2d      	ldr	r3, [pc, #180]	; (800315c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	6811      	ldr	r1, [r2, #0]
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	6892      	ldr	r2, [r2, #8]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	431a      	orrs	r2, r3
 80030b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030b6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030b8:	e03a      	b.n	8003130 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80030ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030c4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1f      	ldr	r2, [pc, #124]	; (8003148 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d004      	beq.n	80030da <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1d      	ldr	r2, [pc, #116]	; (800314c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d10e      	bne.n	80030f8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80030da:	481b      	ldr	r0, [pc, #108]	; (8003148 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80030dc:	f7ff ff38 	bl	8002f50 <LL_ADC_IsEnabled>
 80030e0:	4604      	mov	r4, r0
 80030e2:	481a      	ldr	r0, [pc, #104]	; (800314c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80030e4:	f7ff ff34 	bl	8002f50 <LL_ADC_IsEnabled>
 80030e8:	4603      	mov	r3, r0
 80030ea:	4323      	orrs	r3, r4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e008      	b.n	800310a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80030f8:	4817      	ldr	r0, [pc, #92]	; (8003158 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80030fa:	f7ff ff29 	bl	8002f50 <LL_ADC_IsEnabled>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf0c      	ite	eq
 8003104:	2301      	moveq	r3, #1
 8003106:	2300      	movne	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d010      	beq.n	8003130 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800310e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	4b12      	ldr	r3, [pc, #72]	; (800315c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003114:	4013      	ands	r3, r2
 8003116:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003118:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800311a:	e009      	b.n	8003130 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800312e:	e000      	b.n	8003132 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003130:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800313a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800313e:	4618      	mov	r0, r3
 8003140:	378c      	adds	r7, #140	; 0x8c
 8003142:	46bd      	mov	sp, r7
 8003144:	bd90      	pop	{r4, r7, pc}
 8003146:	bf00      	nop
 8003148:	40022000 	.word	0x40022000
 800314c:	40022100 	.word	0x40022100
 8003150:	40022300 	.word	0x40022300
 8003154:	58026300 	.word	0x58026300
 8003158:	58026000 	.word	0x58026000
 800315c:	fffff0e0 	.word	0xfffff0e0

08003160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800317c:	4013      	ands	r3, r2
 800317e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <__NVIC_SetPriorityGrouping+0x44>)
 800318a:	4313      	orrs	r3, r2
 800318c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800318e:	4a04      	ldr	r2, [pc, #16]	; (80031a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	60d3      	str	r3, [r2, #12]
}
 8003194:	bf00      	nop
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	e000ed00 	.word	0xe000ed00
 80031a4:	05fa0000 	.word	0x05fa0000

080031a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031ac:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <__NVIC_GetPriorityGrouping+0x18>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	0a1b      	lsrs	r3, r3, #8
 80031b2:	f003 0307 	and.w	r3, r3, #7
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	e000ed00 	.word	0xe000ed00

080031c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	db0b      	blt.n	80031ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031d6:	88fb      	ldrh	r3, [r7, #6]
 80031d8:	f003 021f 	and.w	r2, r3, #31
 80031dc:	4907      	ldr	r1, [pc, #28]	; (80031fc <__NVIC_EnableIRQ+0x38>)
 80031de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	2001      	movs	r0, #1
 80031e6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	e000e100 	.word	0xe000e100

08003200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	6039      	str	r1, [r7, #0]
 800320a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800320c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003210:	2b00      	cmp	r3, #0
 8003212:	db0a      	blt.n	800322a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	b2da      	uxtb	r2, r3
 8003218:	490c      	ldr	r1, [pc, #48]	; (800324c <__NVIC_SetPriority+0x4c>)
 800321a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800321e:	0112      	lsls	r2, r2, #4
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	440b      	add	r3, r1
 8003224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003228:	e00a      	b.n	8003240 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	b2da      	uxtb	r2, r3
 800322e:	4908      	ldr	r1, [pc, #32]	; (8003250 <__NVIC_SetPriority+0x50>)
 8003230:	88fb      	ldrh	r3, [r7, #6]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	3b04      	subs	r3, #4
 8003238:	0112      	lsls	r2, r2, #4
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	440b      	add	r3, r1
 800323e:	761a      	strb	r2, [r3, #24]
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	e000e100 	.word	0xe000e100
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003254:	b480      	push	{r7}
 8003256:	b089      	sub	sp, #36	; 0x24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f1c3 0307 	rsb	r3, r3, #7
 800326e:	2b04      	cmp	r3, #4
 8003270:	bf28      	it	cs
 8003272:	2304      	movcs	r3, #4
 8003274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	3304      	adds	r3, #4
 800327a:	2b06      	cmp	r3, #6
 800327c:	d902      	bls.n	8003284 <NVIC_EncodePriority+0x30>
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	3b03      	subs	r3, #3
 8003282:	e000      	b.n	8003286 <NVIC_EncodePriority+0x32>
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003288:	f04f 32ff 	mov.w	r2, #4294967295
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43da      	mvns	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	401a      	ands	r2, r3
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800329c:	f04f 31ff 	mov.w	r1, #4294967295
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	fa01 f303 	lsl.w	r3, r1, r3
 80032a6:	43d9      	mvns	r1, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ac:	4313      	orrs	r3, r2
         );
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3724      	adds	r7, #36	; 0x24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032cc:	d301      	bcc.n	80032d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ce:	2301      	movs	r3, #1
 80032d0:	e00f      	b.n	80032f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032d2:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <SysTick_Config+0x40>)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032da:	210f      	movs	r1, #15
 80032dc:	f04f 30ff 	mov.w	r0, #4294967295
 80032e0:	f7ff ff8e 	bl	8003200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032e4:	4b05      	ldr	r3, [pc, #20]	; (80032fc <SysTick_Config+0x40>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ea:	4b04      	ldr	r3, [pc, #16]	; (80032fc <SysTick_Config+0x40>)
 80032ec:	2207      	movs	r2, #7
 80032ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	e000e010 	.word	0xe000e010

08003300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff ff29 	bl	8003160 <__NVIC_SetPriorityGrouping>
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b086      	sub	sp, #24
 800331a:	af00      	add	r7, sp, #0
 800331c:	4603      	mov	r3, r0
 800331e:	60b9      	str	r1, [r7, #8]
 8003320:	607a      	str	r2, [r7, #4]
 8003322:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003324:	f7ff ff40 	bl	80031a8 <__NVIC_GetPriorityGrouping>
 8003328:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	6978      	ldr	r0, [r7, #20]
 8003330:	f7ff ff90 	bl	8003254 <NVIC_EncodePriority>
 8003334:	4602      	mov	r2, r0
 8003336:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800333a:	4611      	mov	r1, r2
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff ff5f 	bl	8003200 <__NVIC_SetPriority>
}
 8003342:	bf00      	nop
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
 8003350:	4603      	mov	r3, r0
 8003352:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003354:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff ff33 	bl	80031c4 <__NVIC_EnableIRQ>
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff ffa4 	bl	80032bc <SysTick_Config>
 8003374:	4603      	mov	r3, r0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003388:	f7fd feea 	bl	8001160 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e314      	b.n	80039c2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a66      	ldr	r2, [pc, #408]	; (8003538 <HAL_DMA_Init+0x1b8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d04a      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a65      	ldr	r2, [pc, #404]	; (800353c <HAL_DMA_Init+0x1bc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d045      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a63      	ldr	r2, [pc, #396]	; (8003540 <HAL_DMA_Init+0x1c0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d040      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a62      	ldr	r2, [pc, #392]	; (8003544 <HAL_DMA_Init+0x1c4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d03b      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a60      	ldr	r2, [pc, #384]	; (8003548 <HAL_DMA_Init+0x1c8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d036      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a5f      	ldr	r2, [pc, #380]	; (800354c <HAL_DMA_Init+0x1cc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d031      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a5d      	ldr	r2, [pc, #372]	; (8003550 <HAL_DMA_Init+0x1d0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d02c      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a5c      	ldr	r2, [pc, #368]	; (8003554 <HAL_DMA_Init+0x1d4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d027      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a5a      	ldr	r2, [pc, #360]	; (8003558 <HAL_DMA_Init+0x1d8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d022      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a59      	ldr	r2, [pc, #356]	; (800355c <HAL_DMA_Init+0x1dc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d01d      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a57      	ldr	r2, [pc, #348]	; (8003560 <HAL_DMA_Init+0x1e0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d018      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a56      	ldr	r2, [pc, #344]	; (8003564 <HAL_DMA_Init+0x1e4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d013      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a54      	ldr	r2, [pc, #336]	; (8003568 <HAL_DMA_Init+0x1e8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00e      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a53      	ldr	r2, [pc, #332]	; (800356c <HAL_DMA_Init+0x1ec>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d009      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a51      	ldr	r2, [pc, #324]	; (8003570 <HAL_DMA_Init+0x1f0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d004      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a50      	ldr	r2, [pc, #320]	; (8003574 <HAL_DMA_Init+0x1f4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d101      	bne.n	800343c <HAL_DMA_Init+0xbc>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <HAL_DMA_Init+0xbe>
 800343c:	2300      	movs	r3, #0
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 813c 	beq.w	80036bc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a37      	ldr	r2, [pc, #220]	; (8003538 <HAL_DMA_Init+0x1b8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d04a      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a36      	ldr	r2, [pc, #216]	; (800353c <HAL_DMA_Init+0x1bc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d045      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a34      	ldr	r2, [pc, #208]	; (8003540 <HAL_DMA_Init+0x1c0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d040      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a33      	ldr	r2, [pc, #204]	; (8003544 <HAL_DMA_Init+0x1c4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d03b      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a31      	ldr	r2, [pc, #196]	; (8003548 <HAL_DMA_Init+0x1c8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d036      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a30      	ldr	r2, [pc, #192]	; (800354c <HAL_DMA_Init+0x1cc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d031      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a2e      	ldr	r2, [pc, #184]	; (8003550 <HAL_DMA_Init+0x1d0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d02c      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a2d      	ldr	r2, [pc, #180]	; (8003554 <HAL_DMA_Init+0x1d4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d027      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a2b      	ldr	r2, [pc, #172]	; (8003558 <HAL_DMA_Init+0x1d8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d022      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a2a      	ldr	r2, [pc, #168]	; (800355c <HAL_DMA_Init+0x1dc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d01d      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a28      	ldr	r2, [pc, #160]	; (8003560 <HAL_DMA_Init+0x1e0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d018      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a27      	ldr	r2, [pc, #156]	; (8003564 <HAL_DMA_Init+0x1e4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d013      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a25      	ldr	r2, [pc, #148]	; (8003568 <HAL_DMA_Init+0x1e8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00e      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a24      	ldr	r2, [pc, #144]	; (800356c <HAL_DMA_Init+0x1ec>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d009      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a22      	ldr	r2, [pc, #136]	; (8003570 <HAL_DMA_Init+0x1f0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d004      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a21      	ldr	r2, [pc, #132]	; (8003574 <HAL_DMA_Init+0x1f4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d108      	bne.n	8003506 <HAL_DMA_Init+0x186>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	e007      	b.n	8003516 <HAL_DMA_Init+0x196>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0201 	bic.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003516:	e02f      	b.n	8003578 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003518:	f7fd fe22 	bl	8001160 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b05      	cmp	r3, #5
 8003524:	d928      	bls.n	8003578 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2220      	movs	r2, #32
 800352a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2203      	movs	r2, #3
 8003530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e244      	b.n	80039c2 <HAL_DMA_Init+0x642>
 8003538:	40020010 	.word	0x40020010
 800353c:	40020028 	.word	0x40020028
 8003540:	40020040 	.word	0x40020040
 8003544:	40020058 	.word	0x40020058
 8003548:	40020070 	.word	0x40020070
 800354c:	40020088 	.word	0x40020088
 8003550:	400200a0 	.word	0x400200a0
 8003554:	400200b8 	.word	0x400200b8
 8003558:	40020410 	.word	0x40020410
 800355c:	40020428 	.word	0x40020428
 8003560:	40020440 	.word	0x40020440
 8003564:	40020458 	.word	0x40020458
 8003568:	40020470 	.word	0x40020470
 800356c:	40020488 	.word	0x40020488
 8003570:	400204a0 	.word	0x400204a0
 8003574:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1c8      	bne.n	8003518 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4b84      	ldr	r3, [pc, #528]	; (80037a4 <HAL_DMA_Init+0x424>)
 8003592:	4013      	ands	r3, r2
 8003594:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800359e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d107      	bne.n	80035dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	4313      	orrs	r3, r2
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b28      	cmp	r3, #40	; 0x28
 80035e2:	d903      	bls.n	80035ec <HAL_DMA_Init+0x26c>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b2e      	cmp	r3, #46	; 0x2e
 80035ea:	d91f      	bls.n	800362c <HAL_DMA_Init+0x2ac>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b3e      	cmp	r3, #62	; 0x3e
 80035f2:	d903      	bls.n	80035fc <HAL_DMA_Init+0x27c>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b42      	cmp	r3, #66	; 0x42
 80035fa:	d917      	bls.n	800362c <HAL_DMA_Init+0x2ac>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b46      	cmp	r3, #70	; 0x46
 8003602:	d903      	bls.n	800360c <HAL_DMA_Init+0x28c>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b48      	cmp	r3, #72	; 0x48
 800360a:	d90f      	bls.n	800362c <HAL_DMA_Init+0x2ac>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b4e      	cmp	r3, #78	; 0x4e
 8003612:	d903      	bls.n	800361c <HAL_DMA_Init+0x29c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b52      	cmp	r3, #82	; 0x52
 800361a:	d907      	bls.n	800362c <HAL_DMA_Init+0x2ac>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b73      	cmp	r3, #115	; 0x73
 8003622:	d905      	bls.n	8003630 <HAL_DMA_Init+0x2b0>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b77      	cmp	r3, #119	; 0x77
 800362a:	d801      	bhi.n	8003630 <HAL_DMA_Init+0x2b0>
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <HAL_DMA_Init+0x2b2>
 8003630:	2300      	movs	r3, #0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800363c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f023 0307 	bic.w	r3, r3, #7
 8003654:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	2b04      	cmp	r3, #4
 8003666:	d117      	bne.n	8003698 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00e      	beq.n	8003698 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f002 fb2e 	bl	8005cdc <DMA_CheckFifoParam>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d008      	beq.n	8003698 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2240      	movs	r2, #64	; 0x40
 800368a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e194      	b.n	80039c2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f002 fa69 	bl	8005b78 <DMA_CalcBaseAndBitshift>
 80036a6:	4603      	mov	r3, r0
 80036a8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ae:	f003 031f 	and.w	r3, r3, #31
 80036b2:	223f      	movs	r2, #63	; 0x3f
 80036b4:	409a      	lsls	r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	609a      	str	r2, [r3, #8]
 80036ba:	e0ca      	b.n	8003852 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a39      	ldr	r2, [pc, #228]	; (80037a8 <HAL_DMA_Init+0x428>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d022      	beq.n	800370c <HAL_DMA_Init+0x38c>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a38      	ldr	r2, [pc, #224]	; (80037ac <HAL_DMA_Init+0x42c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d01d      	beq.n	800370c <HAL_DMA_Init+0x38c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a36      	ldr	r2, [pc, #216]	; (80037b0 <HAL_DMA_Init+0x430>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d018      	beq.n	800370c <HAL_DMA_Init+0x38c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a35      	ldr	r2, [pc, #212]	; (80037b4 <HAL_DMA_Init+0x434>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d013      	beq.n	800370c <HAL_DMA_Init+0x38c>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a33      	ldr	r2, [pc, #204]	; (80037b8 <HAL_DMA_Init+0x438>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00e      	beq.n	800370c <HAL_DMA_Init+0x38c>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a32      	ldr	r2, [pc, #200]	; (80037bc <HAL_DMA_Init+0x43c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d009      	beq.n	800370c <HAL_DMA_Init+0x38c>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a30      	ldr	r2, [pc, #192]	; (80037c0 <HAL_DMA_Init+0x440>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_DMA_Init+0x38c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a2f      	ldr	r2, [pc, #188]	; (80037c4 <HAL_DMA_Init+0x444>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d101      	bne.n	8003710 <HAL_DMA_Init+0x390>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <HAL_DMA_Init+0x392>
 8003710:	2300      	movs	r3, #0
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8094 	beq.w	8003840 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a22      	ldr	r2, [pc, #136]	; (80037a8 <HAL_DMA_Init+0x428>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d021      	beq.n	8003766 <HAL_DMA_Init+0x3e6>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a21      	ldr	r2, [pc, #132]	; (80037ac <HAL_DMA_Init+0x42c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d01c      	beq.n	8003766 <HAL_DMA_Init+0x3e6>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1f      	ldr	r2, [pc, #124]	; (80037b0 <HAL_DMA_Init+0x430>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d017      	beq.n	8003766 <HAL_DMA_Init+0x3e6>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a1e      	ldr	r2, [pc, #120]	; (80037b4 <HAL_DMA_Init+0x434>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d012      	beq.n	8003766 <HAL_DMA_Init+0x3e6>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <HAL_DMA_Init+0x438>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00d      	beq.n	8003766 <HAL_DMA_Init+0x3e6>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1b      	ldr	r2, [pc, #108]	; (80037bc <HAL_DMA_Init+0x43c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d008      	beq.n	8003766 <HAL_DMA_Init+0x3e6>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a19      	ldr	r2, [pc, #100]	; (80037c0 <HAL_DMA_Init+0x440>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d003      	beq.n	8003766 <HAL_DMA_Init+0x3e6>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a18      	ldr	r2, [pc, #96]	; (80037c4 <HAL_DMA_Init+0x444>)
 8003764:	4293      	cmp	r3, r2
 8003766:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <HAL_DMA_Init+0x448>)
 8003784:	4013      	ands	r3, r2
 8003786:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2b40      	cmp	r3, #64	; 0x40
 800378e:	d01d      	beq.n	80037cc <HAL_DMA_Init+0x44c>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b80      	cmp	r3, #128	; 0x80
 8003796:	d102      	bne.n	800379e <HAL_DMA_Init+0x41e>
 8003798:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800379c:	e017      	b.n	80037ce <HAL_DMA_Init+0x44e>
 800379e:	2300      	movs	r3, #0
 80037a0:	e015      	b.n	80037ce <HAL_DMA_Init+0x44e>
 80037a2:	bf00      	nop
 80037a4:	fe10803f 	.word	0xfe10803f
 80037a8:	58025408 	.word	0x58025408
 80037ac:	5802541c 	.word	0x5802541c
 80037b0:	58025430 	.word	0x58025430
 80037b4:	58025444 	.word	0x58025444
 80037b8:	58025458 	.word	0x58025458
 80037bc:	5802546c 	.word	0x5802546c
 80037c0:	58025480 	.word	0x58025480
 80037c4:	58025494 	.word	0x58025494
 80037c8:	fffe000f 	.word	0xfffe000f
 80037cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	68d2      	ldr	r2, [r2, #12]
 80037d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80037dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80037e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80037ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80037f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80037fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	4b6e      	ldr	r3, [pc, #440]	; (80039cc <HAL_DMA_Init+0x64c>)
 8003814:	4413      	add	r3, r2
 8003816:	4a6e      	ldr	r2, [pc, #440]	; (80039d0 <HAL_DMA_Init+0x650>)
 8003818:	fba2 2303 	umull	r2, r3, r2, r3
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	009a      	lsls	r2, r3, #2
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f002 f9a7 	bl	8005b78 <DMA_CalcBaseAndBitshift>
 800382a:	4603      	mov	r3, r0
 800382c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003832:	f003 031f 	and.w	r3, r3, #31
 8003836:	2201      	movs	r2, #1
 8003838:	409a      	lsls	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	e008      	b.n	8003852 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2240      	movs	r2, #64	; 0x40
 8003844:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2203      	movs	r2, #3
 800384a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e0b7      	b.n	80039c2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a5f      	ldr	r2, [pc, #380]	; (80039d4 <HAL_DMA_Init+0x654>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d072      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a5d      	ldr	r2, [pc, #372]	; (80039d8 <HAL_DMA_Init+0x658>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d06d      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a5c      	ldr	r2, [pc, #368]	; (80039dc <HAL_DMA_Init+0x65c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d068      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a5a      	ldr	r2, [pc, #360]	; (80039e0 <HAL_DMA_Init+0x660>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d063      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a59      	ldr	r2, [pc, #356]	; (80039e4 <HAL_DMA_Init+0x664>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d05e      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a57      	ldr	r2, [pc, #348]	; (80039e8 <HAL_DMA_Init+0x668>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d059      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a56      	ldr	r2, [pc, #344]	; (80039ec <HAL_DMA_Init+0x66c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d054      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a54      	ldr	r2, [pc, #336]	; (80039f0 <HAL_DMA_Init+0x670>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d04f      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a53      	ldr	r2, [pc, #332]	; (80039f4 <HAL_DMA_Init+0x674>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d04a      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a51      	ldr	r2, [pc, #324]	; (80039f8 <HAL_DMA_Init+0x678>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d045      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a50      	ldr	r2, [pc, #320]	; (80039fc <HAL_DMA_Init+0x67c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d040      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a4e      	ldr	r2, [pc, #312]	; (8003a00 <HAL_DMA_Init+0x680>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d03b      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a4d      	ldr	r2, [pc, #308]	; (8003a04 <HAL_DMA_Init+0x684>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d036      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a4b      	ldr	r2, [pc, #300]	; (8003a08 <HAL_DMA_Init+0x688>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d031      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a4a      	ldr	r2, [pc, #296]	; (8003a0c <HAL_DMA_Init+0x68c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d02c      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a48      	ldr	r2, [pc, #288]	; (8003a10 <HAL_DMA_Init+0x690>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d027      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a47      	ldr	r2, [pc, #284]	; (8003a14 <HAL_DMA_Init+0x694>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d022      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a45      	ldr	r2, [pc, #276]	; (8003a18 <HAL_DMA_Init+0x698>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d01d      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a44      	ldr	r2, [pc, #272]	; (8003a1c <HAL_DMA_Init+0x69c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d018      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a42      	ldr	r2, [pc, #264]	; (8003a20 <HAL_DMA_Init+0x6a0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a41      	ldr	r2, [pc, #260]	; (8003a24 <HAL_DMA_Init+0x6a4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d00e      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a3f      	ldr	r2, [pc, #252]	; (8003a28 <HAL_DMA_Init+0x6a8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d009      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a3e      	ldr	r2, [pc, #248]	; (8003a2c <HAL_DMA_Init+0x6ac>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d004      	beq.n	8003942 <HAL_DMA_Init+0x5c2>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a3c      	ldr	r2, [pc, #240]	; (8003a30 <HAL_DMA_Init+0x6b0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d101      	bne.n	8003946 <HAL_DMA_Init+0x5c6>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <HAL_DMA_Init+0x5c8>
 8003946:	2300      	movs	r3, #0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d032      	beq.n	80039b2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f002 fa41 	bl	8005dd4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b80      	cmp	r3, #128	; 0x80
 8003958:	d102      	bne.n	8003960 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003974:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d010      	beq.n	80039a0 <HAL_DMA_Init+0x620>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b08      	cmp	r3, #8
 8003984:	d80c      	bhi.n	80039a0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f002 fabe 	bl	8005f08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800399c:	605a      	str	r2, [r3, #4]
 800399e:	e008      	b.n	80039b2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	a7fdabf8 	.word	0xa7fdabf8
 80039d0:	cccccccd 	.word	0xcccccccd
 80039d4:	40020010 	.word	0x40020010
 80039d8:	40020028 	.word	0x40020028
 80039dc:	40020040 	.word	0x40020040
 80039e0:	40020058 	.word	0x40020058
 80039e4:	40020070 	.word	0x40020070
 80039e8:	40020088 	.word	0x40020088
 80039ec:	400200a0 	.word	0x400200a0
 80039f0:	400200b8 	.word	0x400200b8
 80039f4:	40020410 	.word	0x40020410
 80039f8:	40020428 	.word	0x40020428
 80039fc:	40020440 	.word	0x40020440
 8003a00:	40020458 	.word	0x40020458
 8003a04:	40020470 	.word	0x40020470
 8003a08:	40020488 	.word	0x40020488
 8003a0c:	400204a0 	.word	0x400204a0
 8003a10:	400204b8 	.word	0x400204b8
 8003a14:	58025408 	.word	0x58025408
 8003a18:	5802541c 	.word	0x5802541c
 8003a1c:	58025430 	.word	0x58025430
 8003a20:	58025444 	.word	0x58025444
 8003a24:	58025458 	.word	0x58025458
 8003a28:	5802546c 	.word	0x5802546c
 8003a2c:	58025480 	.word	0x58025480
 8003a30:	58025494 	.word	0x58025494

08003a34 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e226      	b.n	8003e9e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <HAL_DMA_Start_IT+0x2a>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e21f      	b.n	8003e9e <HAL_DMA_Start_IT+0x46a>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	f040 820a 	bne.w	8003e88 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a68      	ldr	r2, [pc, #416]	; (8003c28 <HAL_DMA_Start_IT+0x1f4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d04a      	beq.n	8003b22 <HAL_DMA_Start_IT+0xee>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a66      	ldr	r2, [pc, #408]	; (8003c2c <HAL_DMA_Start_IT+0x1f8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d045      	beq.n	8003b22 <HAL_DMA_Start_IT+0xee>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a65      	ldr	r2, [pc, #404]	; (8003c30 <HAL_DMA_Start_IT+0x1fc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d040      	beq.n	8003b22 <HAL_DMA_Start_IT+0xee>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a63      	ldr	r2, [pc, #396]	; (8003c34 <HAL_DMA_Start_IT+0x200>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d03b      	beq.n	8003b22 <HAL_DMA_Start_IT+0xee>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a62      	ldr	r2, [pc, #392]	; (8003c38 <HAL_DMA_Start_IT+0x204>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d036      	beq.n	8003b22 <HAL_DMA_Start_IT+0xee>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a60      	ldr	r2, [pc, #384]	; (8003c3c <HAL_DMA_Start_IT+0x208>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d031      	beq.n	8003b22 <HAL_DMA_Start_IT+0xee>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a5f      	ldr	r2, [pc, #380]	; (8003c40 <HAL_DMA_Start_IT+0x20c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d02c      	beq.n	8003b22 <HAL_DMA_Start_IT+0xee>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a5d      	ldr	r2, [pc, #372]	; (8003c44 <HAL_DMA_Start_IT+0x210>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d027      	beq.n	8003b22 <HAL_DMA_Start_IT+0xee>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a5c      	ldr	r2, [pc, #368]	; (8003c48 <HAL_DMA_Start_IT+0x214>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d022      	beq.n	8003b22 <HAL_DMA_Start_IT+0xee>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a5a      	ldr	r2, [pc, #360]	; (8003c4c <HAL_DMA_Start_IT+0x218>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d01d      	beq.n	8003b22 <HAL_DMA_Start_IT+0xee>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a59      	ldr	r2, [pc, #356]	; (8003c50 <HAL_DMA_Start_IT+0x21c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d018      	beq.n	8003b22 <HAL_DMA_Start_IT+0xee>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a57      	ldr	r2, [pc, #348]	; (8003c54 <HAL_DMA_Start_IT+0x220>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d013      	beq.n	8003b22 <HAL_DMA_Start_IT+0xee>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a56      	ldr	r2, [pc, #344]	; (8003c58 <HAL_DMA_Start_IT+0x224>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00e      	beq.n	8003b22 <HAL_DMA_Start_IT+0xee>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a54      	ldr	r2, [pc, #336]	; (8003c5c <HAL_DMA_Start_IT+0x228>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d009      	beq.n	8003b22 <HAL_DMA_Start_IT+0xee>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a53      	ldr	r2, [pc, #332]	; (8003c60 <HAL_DMA_Start_IT+0x22c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d004      	beq.n	8003b22 <HAL_DMA_Start_IT+0xee>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a51      	ldr	r2, [pc, #324]	; (8003c64 <HAL_DMA_Start_IT+0x230>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d108      	bne.n	8003b34 <HAL_DMA_Start_IT+0x100>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0201 	bic.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	e007      	b.n	8003b44 <HAL_DMA_Start_IT+0x110>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0201 	bic.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f001 fe68 	bl	8005820 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a34      	ldr	r2, [pc, #208]	; (8003c28 <HAL_DMA_Start_IT+0x1f4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d04a      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x1bc>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a33      	ldr	r2, [pc, #204]	; (8003c2c <HAL_DMA_Start_IT+0x1f8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d045      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x1bc>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a31      	ldr	r2, [pc, #196]	; (8003c30 <HAL_DMA_Start_IT+0x1fc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d040      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x1bc>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a30      	ldr	r2, [pc, #192]	; (8003c34 <HAL_DMA_Start_IT+0x200>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d03b      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x1bc>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a2e      	ldr	r2, [pc, #184]	; (8003c38 <HAL_DMA_Start_IT+0x204>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d036      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x1bc>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a2d      	ldr	r2, [pc, #180]	; (8003c3c <HAL_DMA_Start_IT+0x208>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d031      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x1bc>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a2b      	ldr	r2, [pc, #172]	; (8003c40 <HAL_DMA_Start_IT+0x20c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d02c      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x1bc>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a2a      	ldr	r2, [pc, #168]	; (8003c44 <HAL_DMA_Start_IT+0x210>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d027      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x1bc>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a28      	ldr	r2, [pc, #160]	; (8003c48 <HAL_DMA_Start_IT+0x214>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d022      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x1bc>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a27      	ldr	r2, [pc, #156]	; (8003c4c <HAL_DMA_Start_IT+0x218>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d01d      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x1bc>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a25      	ldr	r2, [pc, #148]	; (8003c50 <HAL_DMA_Start_IT+0x21c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d018      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x1bc>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a24      	ldr	r2, [pc, #144]	; (8003c54 <HAL_DMA_Start_IT+0x220>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x1bc>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <HAL_DMA_Start_IT+0x224>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00e      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x1bc>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a21      	ldr	r2, [pc, #132]	; (8003c5c <HAL_DMA_Start_IT+0x228>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d009      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x1bc>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a1f      	ldr	r2, [pc, #124]	; (8003c60 <HAL_DMA_Start_IT+0x22c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <HAL_DMA_Start_IT+0x1bc>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1e      	ldr	r2, [pc, #120]	; (8003c64 <HAL_DMA_Start_IT+0x230>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d101      	bne.n	8003bf4 <HAL_DMA_Start_IT+0x1c0>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <HAL_DMA_Start_IT+0x1c2>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d036      	beq.n	8003c68 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f023 021e 	bic.w	r2, r3, #30
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 0216 	orr.w	r2, r2, #22
 8003c0c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d03e      	beq.n	8003c94 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0208 	orr.w	r2, r2, #8
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	e035      	b.n	8003c94 <HAL_DMA_Start_IT+0x260>
 8003c28:	40020010 	.word	0x40020010
 8003c2c:	40020028 	.word	0x40020028
 8003c30:	40020040 	.word	0x40020040
 8003c34:	40020058 	.word	0x40020058
 8003c38:	40020070 	.word	0x40020070
 8003c3c:	40020088 	.word	0x40020088
 8003c40:	400200a0 	.word	0x400200a0
 8003c44:	400200b8 	.word	0x400200b8
 8003c48:	40020410 	.word	0x40020410
 8003c4c:	40020428 	.word	0x40020428
 8003c50:	40020440 	.word	0x40020440
 8003c54:	40020458 	.word	0x40020458
 8003c58:	40020470 	.word	0x40020470
 8003c5c:	40020488 	.word	0x40020488
 8003c60:	400204a0 	.word	0x400204a0
 8003c64:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 020e 	bic.w	r2, r3, #14
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 020a 	orr.w	r2, r2, #10
 8003c7a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0204 	orr.w	r2, r2, #4
 8003c92:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a83      	ldr	r2, [pc, #524]	; (8003ea8 <HAL_DMA_Start_IT+0x474>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d072      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a82      	ldr	r2, [pc, #520]	; (8003eac <HAL_DMA_Start_IT+0x478>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d06d      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a80      	ldr	r2, [pc, #512]	; (8003eb0 <HAL_DMA_Start_IT+0x47c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d068      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a7f      	ldr	r2, [pc, #508]	; (8003eb4 <HAL_DMA_Start_IT+0x480>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d063      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a7d      	ldr	r2, [pc, #500]	; (8003eb8 <HAL_DMA_Start_IT+0x484>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d05e      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a7c      	ldr	r2, [pc, #496]	; (8003ebc <HAL_DMA_Start_IT+0x488>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d059      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a7a      	ldr	r2, [pc, #488]	; (8003ec0 <HAL_DMA_Start_IT+0x48c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d054      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a79      	ldr	r2, [pc, #484]	; (8003ec4 <HAL_DMA_Start_IT+0x490>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d04f      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a77      	ldr	r2, [pc, #476]	; (8003ec8 <HAL_DMA_Start_IT+0x494>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d04a      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a76      	ldr	r2, [pc, #472]	; (8003ecc <HAL_DMA_Start_IT+0x498>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d045      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a74      	ldr	r2, [pc, #464]	; (8003ed0 <HAL_DMA_Start_IT+0x49c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d040      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a73      	ldr	r2, [pc, #460]	; (8003ed4 <HAL_DMA_Start_IT+0x4a0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d03b      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a71      	ldr	r2, [pc, #452]	; (8003ed8 <HAL_DMA_Start_IT+0x4a4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d036      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a70      	ldr	r2, [pc, #448]	; (8003edc <HAL_DMA_Start_IT+0x4a8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d031      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a6e      	ldr	r2, [pc, #440]	; (8003ee0 <HAL_DMA_Start_IT+0x4ac>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d02c      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a6d      	ldr	r2, [pc, #436]	; (8003ee4 <HAL_DMA_Start_IT+0x4b0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d027      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a6b      	ldr	r2, [pc, #428]	; (8003ee8 <HAL_DMA_Start_IT+0x4b4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d022      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a6a      	ldr	r2, [pc, #424]	; (8003eec <HAL_DMA_Start_IT+0x4b8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d01d      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a68      	ldr	r2, [pc, #416]	; (8003ef0 <HAL_DMA_Start_IT+0x4bc>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d018      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a67      	ldr	r2, [pc, #412]	; (8003ef4 <HAL_DMA_Start_IT+0x4c0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d013      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a65      	ldr	r2, [pc, #404]	; (8003ef8 <HAL_DMA_Start_IT+0x4c4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d00e      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a64      	ldr	r2, [pc, #400]	; (8003efc <HAL_DMA_Start_IT+0x4c8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d009      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a62      	ldr	r2, [pc, #392]	; (8003f00 <HAL_DMA_Start_IT+0x4cc>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d004      	beq.n	8003d84 <HAL_DMA_Start_IT+0x350>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a61      	ldr	r2, [pc, #388]	; (8003f04 <HAL_DMA_Start_IT+0x4d0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d101      	bne.n	8003d88 <HAL_DMA_Start_IT+0x354>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <HAL_DMA_Start_IT+0x356>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d01a      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d007      	beq.n	8003dac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003daa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d007      	beq.n	8003dc4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dc2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a37      	ldr	r2, [pc, #220]	; (8003ea8 <HAL_DMA_Start_IT+0x474>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d04a      	beq.n	8003e64 <HAL_DMA_Start_IT+0x430>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a36      	ldr	r2, [pc, #216]	; (8003eac <HAL_DMA_Start_IT+0x478>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d045      	beq.n	8003e64 <HAL_DMA_Start_IT+0x430>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a34      	ldr	r2, [pc, #208]	; (8003eb0 <HAL_DMA_Start_IT+0x47c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d040      	beq.n	8003e64 <HAL_DMA_Start_IT+0x430>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a33      	ldr	r2, [pc, #204]	; (8003eb4 <HAL_DMA_Start_IT+0x480>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d03b      	beq.n	8003e64 <HAL_DMA_Start_IT+0x430>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a31      	ldr	r2, [pc, #196]	; (8003eb8 <HAL_DMA_Start_IT+0x484>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d036      	beq.n	8003e64 <HAL_DMA_Start_IT+0x430>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a30      	ldr	r2, [pc, #192]	; (8003ebc <HAL_DMA_Start_IT+0x488>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d031      	beq.n	8003e64 <HAL_DMA_Start_IT+0x430>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a2e      	ldr	r2, [pc, #184]	; (8003ec0 <HAL_DMA_Start_IT+0x48c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d02c      	beq.n	8003e64 <HAL_DMA_Start_IT+0x430>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a2d      	ldr	r2, [pc, #180]	; (8003ec4 <HAL_DMA_Start_IT+0x490>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d027      	beq.n	8003e64 <HAL_DMA_Start_IT+0x430>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a2b      	ldr	r2, [pc, #172]	; (8003ec8 <HAL_DMA_Start_IT+0x494>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d022      	beq.n	8003e64 <HAL_DMA_Start_IT+0x430>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a2a      	ldr	r2, [pc, #168]	; (8003ecc <HAL_DMA_Start_IT+0x498>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d01d      	beq.n	8003e64 <HAL_DMA_Start_IT+0x430>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a28      	ldr	r2, [pc, #160]	; (8003ed0 <HAL_DMA_Start_IT+0x49c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d018      	beq.n	8003e64 <HAL_DMA_Start_IT+0x430>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a27      	ldr	r2, [pc, #156]	; (8003ed4 <HAL_DMA_Start_IT+0x4a0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d013      	beq.n	8003e64 <HAL_DMA_Start_IT+0x430>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a25      	ldr	r2, [pc, #148]	; (8003ed8 <HAL_DMA_Start_IT+0x4a4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00e      	beq.n	8003e64 <HAL_DMA_Start_IT+0x430>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a24      	ldr	r2, [pc, #144]	; (8003edc <HAL_DMA_Start_IT+0x4a8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d009      	beq.n	8003e64 <HAL_DMA_Start_IT+0x430>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a22      	ldr	r2, [pc, #136]	; (8003ee0 <HAL_DMA_Start_IT+0x4ac>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d004      	beq.n	8003e64 <HAL_DMA_Start_IT+0x430>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a21      	ldr	r2, [pc, #132]	; (8003ee4 <HAL_DMA_Start_IT+0x4b0>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d108      	bne.n	8003e76 <HAL_DMA_Start_IT+0x442>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	e012      	b.n	8003e9c <HAL_DMA_Start_IT+0x468>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 0201 	orr.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e009      	b.n	8003e9c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40020010 	.word	0x40020010
 8003eac:	40020028 	.word	0x40020028
 8003eb0:	40020040 	.word	0x40020040
 8003eb4:	40020058 	.word	0x40020058
 8003eb8:	40020070 	.word	0x40020070
 8003ebc:	40020088 	.word	0x40020088
 8003ec0:	400200a0 	.word	0x400200a0
 8003ec4:	400200b8 	.word	0x400200b8
 8003ec8:	40020410 	.word	0x40020410
 8003ecc:	40020428 	.word	0x40020428
 8003ed0:	40020440 	.word	0x40020440
 8003ed4:	40020458 	.word	0x40020458
 8003ed8:	40020470 	.word	0x40020470
 8003edc:	40020488 	.word	0x40020488
 8003ee0:	400204a0 	.word	0x400204a0
 8003ee4:	400204b8 	.word	0x400204b8
 8003ee8:	58025408 	.word	0x58025408
 8003eec:	5802541c 	.word	0x5802541c
 8003ef0:	58025430 	.word	0x58025430
 8003ef4:	58025444 	.word	0x58025444
 8003ef8:	58025458 	.word	0x58025458
 8003efc:	5802546c 	.word	0x5802546c
 8003f00:	58025480 	.word	0x58025480
 8003f04:	58025494 	.word	0x58025494

08003f08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003f10:	f7fd f926 	bl	8001160 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e2dc      	b.n	80044da <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d008      	beq.n	8003f3e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2280      	movs	r2, #128	; 0x80
 8003f30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e2cd      	b.n	80044da <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a76      	ldr	r2, [pc, #472]	; (800411c <HAL_DMA_Abort+0x214>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d04a      	beq.n	8003fde <HAL_DMA_Abort+0xd6>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a74      	ldr	r2, [pc, #464]	; (8004120 <HAL_DMA_Abort+0x218>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d045      	beq.n	8003fde <HAL_DMA_Abort+0xd6>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a73      	ldr	r2, [pc, #460]	; (8004124 <HAL_DMA_Abort+0x21c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d040      	beq.n	8003fde <HAL_DMA_Abort+0xd6>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a71      	ldr	r2, [pc, #452]	; (8004128 <HAL_DMA_Abort+0x220>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d03b      	beq.n	8003fde <HAL_DMA_Abort+0xd6>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a70      	ldr	r2, [pc, #448]	; (800412c <HAL_DMA_Abort+0x224>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d036      	beq.n	8003fde <HAL_DMA_Abort+0xd6>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a6e      	ldr	r2, [pc, #440]	; (8004130 <HAL_DMA_Abort+0x228>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d031      	beq.n	8003fde <HAL_DMA_Abort+0xd6>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a6d      	ldr	r2, [pc, #436]	; (8004134 <HAL_DMA_Abort+0x22c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d02c      	beq.n	8003fde <HAL_DMA_Abort+0xd6>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a6b      	ldr	r2, [pc, #428]	; (8004138 <HAL_DMA_Abort+0x230>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d027      	beq.n	8003fde <HAL_DMA_Abort+0xd6>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a6a      	ldr	r2, [pc, #424]	; (800413c <HAL_DMA_Abort+0x234>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d022      	beq.n	8003fde <HAL_DMA_Abort+0xd6>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a68      	ldr	r2, [pc, #416]	; (8004140 <HAL_DMA_Abort+0x238>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d01d      	beq.n	8003fde <HAL_DMA_Abort+0xd6>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a67      	ldr	r2, [pc, #412]	; (8004144 <HAL_DMA_Abort+0x23c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d018      	beq.n	8003fde <HAL_DMA_Abort+0xd6>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a65      	ldr	r2, [pc, #404]	; (8004148 <HAL_DMA_Abort+0x240>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d013      	beq.n	8003fde <HAL_DMA_Abort+0xd6>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a64      	ldr	r2, [pc, #400]	; (800414c <HAL_DMA_Abort+0x244>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00e      	beq.n	8003fde <HAL_DMA_Abort+0xd6>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a62      	ldr	r2, [pc, #392]	; (8004150 <HAL_DMA_Abort+0x248>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d009      	beq.n	8003fde <HAL_DMA_Abort+0xd6>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a61      	ldr	r2, [pc, #388]	; (8004154 <HAL_DMA_Abort+0x24c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d004      	beq.n	8003fde <HAL_DMA_Abort+0xd6>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a5f      	ldr	r2, [pc, #380]	; (8004158 <HAL_DMA_Abort+0x250>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d101      	bne.n	8003fe2 <HAL_DMA_Abort+0xda>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <HAL_DMA_Abort+0xdc>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d013      	beq.n	8004010 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 021e 	bic.w	r2, r2, #30
 8003ff6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004006:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	e00a      	b.n	8004026 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 020e 	bic.w	r2, r2, #14
 800401e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a3c      	ldr	r2, [pc, #240]	; (800411c <HAL_DMA_Abort+0x214>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d072      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a3a      	ldr	r2, [pc, #232]	; (8004120 <HAL_DMA_Abort+0x218>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d06d      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a39      	ldr	r2, [pc, #228]	; (8004124 <HAL_DMA_Abort+0x21c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d068      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a37      	ldr	r2, [pc, #220]	; (8004128 <HAL_DMA_Abort+0x220>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d063      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a36      	ldr	r2, [pc, #216]	; (800412c <HAL_DMA_Abort+0x224>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d05e      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a34      	ldr	r2, [pc, #208]	; (8004130 <HAL_DMA_Abort+0x228>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d059      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a33      	ldr	r2, [pc, #204]	; (8004134 <HAL_DMA_Abort+0x22c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d054      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a31      	ldr	r2, [pc, #196]	; (8004138 <HAL_DMA_Abort+0x230>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d04f      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a30      	ldr	r2, [pc, #192]	; (800413c <HAL_DMA_Abort+0x234>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d04a      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a2e      	ldr	r2, [pc, #184]	; (8004140 <HAL_DMA_Abort+0x238>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d045      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a2d      	ldr	r2, [pc, #180]	; (8004144 <HAL_DMA_Abort+0x23c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d040      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a2b      	ldr	r2, [pc, #172]	; (8004148 <HAL_DMA_Abort+0x240>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d03b      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a2a      	ldr	r2, [pc, #168]	; (800414c <HAL_DMA_Abort+0x244>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d036      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a28      	ldr	r2, [pc, #160]	; (8004150 <HAL_DMA_Abort+0x248>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d031      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a27      	ldr	r2, [pc, #156]	; (8004154 <HAL_DMA_Abort+0x24c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d02c      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a25      	ldr	r2, [pc, #148]	; (8004158 <HAL_DMA_Abort+0x250>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d027      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a24      	ldr	r2, [pc, #144]	; (800415c <HAL_DMA_Abort+0x254>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d022      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a22      	ldr	r2, [pc, #136]	; (8004160 <HAL_DMA_Abort+0x258>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d01d      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a21      	ldr	r2, [pc, #132]	; (8004164 <HAL_DMA_Abort+0x25c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d018      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a1f      	ldr	r2, [pc, #124]	; (8004168 <HAL_DMA_Abort+0x260>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d013      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a1e      	ldr	r2, [pc, #120]	; (800416c <HAL_DMA_Abort+0x264>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00e      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1c      	ldr	r2, [pc, #112]	; (8004170 <HAL_DMA_Abort+0x268>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d009      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <HAL_DMA_Abort+0x26c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d004      	beq.n	8004116 <HAL_DMA_Abort+0x20e>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a19      	ldr	r2, [pc, #100]	; (8004178 <HAL_DMA_Abort+0x270>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d132      	bne.n	800417c <HAL_DMA_Abort+0x274>
 8004116:	2301      	movs	r3, #1
 8004118:	e031      	b.n	800417e <HAL_DMA_Abort+0x276>
 800411a:	bf00      	nop
 800411c:	40020010 	.word	0x40020010
 8004120:	40020028 	.word	0x40020028
 8004124:	40020040 	.word	0x40020040
 8004128:	40020058 	.word	0x40020058
 800412c:	40020070 	.word	0x40020070
 8004130:	40020088 	.word	0x40020088
 8004134:	400200a0 	.word	0x400200a0
 8004138:	400200b8 	.word	0x400200b8
 800413c:	40020410 	.word	0x40020410
 8004140:	40020428 	.word	0x40020428
 8004144:	40020440 	.word	0x40020440
 8004148:	40020458 	.word	0x40020458
 800414c:	40020470 	.word	0x40020470
 8004150:	40020488 	.word	0x40020488
 8004154:	400204a0 	.word	0x400204a0
 8004158:	400204b8 	.word	0x400204b8
 800415c:	58025408 	.word	0x58025408
 8004160:	5802541c 	.word	0x5802541c
 8004164:	58025430 	.word	0x58025430
 8004168:	58025444 	.word	0x58025444
 800416c:	58025458 	.word	0x58025458
 8004170:	5802546c 	.word	0x5802546c
 8004174:	58025480 	.word	0x58025480
 8004178:	58025494 	.word	0x58025494
 800417c:	2300      	movs	r3, #0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800418c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004190:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a6d      	ldr	r2, [pc, #436]	; (800434c <HAL_DMA_Abort+0x444>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d04a      	beq.n	8004232 <HAL_DMA_Abort+0x32a>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a6b      	ldr	r2, [pc, #428]	; (8004350 <HAL_DMA_Abort+0x448>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d045      	beq.n	8004232 <HAL_DMA_Abort+0x32a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a6a      	ldr	r2, [pc, #424]	; (8004354 <HAL_DMA_Abort+0x44c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d040      	beq.n	8004232 <HAL_DMA_Abort+0x32a>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a68      	ldr	r2, [pc, #416]	; (8004358 <HAL_DMA_Abort+0x450>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d03b      	beq.n	8004232 <HAL_DMA_Abort+0x32a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a67      	ldr	r2, [pc, #412]	; (800435c <HAL_DMA_Abort+0x454>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d036      	beq.n	8004232 <HAL_DMA_Abort+0x32a>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a65      	ldr	r2, [pc, #404]	; (8004360 <HAL_DMA_Abort+0x458>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d031      	beq.n	8004232 <HAL_DMA_Abort+0x32a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a64      	ldr	r2, [pc, #400]	; (8004364 <HAL_DMA_Abort+0x45c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d02c      	beq.n	8004232 <HAL_DMA_Abort+0x32a>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a62      	ldr	r2, [pc, #392]	; (8004368 <HAL_DMA_Abort+0x460>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d027      	beq.n	8004232 <HAL_DMA_Abort+0x32a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a61      	ldr	r2, [pc, #388]	; (800436c <HAL_DMA_Abort+0x464>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d022      	beq.n	8004232 <HAL_DMA_Abort+0x32a>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a5f      	ldr	r2, [pc, #380]	; (8004370 <HAL_DMA_Abort+0x468>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d01d      	beq.n	8004232 <HAL_DMA_Abort+0x32a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a5e      	ldr	r2, [pc, #376]	; (8004374 <HAL_DMA_Abort+0x46c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d018      	beq.n	8004232 <HAL_DMA_Abort+0x32a>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a5c      	ldr	r2, [pc, #368]	; (8004378 <HAL_DMA_Abort+0x470>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d013      	beq.n	8004232 <HAL_DMA_Abort+0x32a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a5b      	ldr	r2, [pc, #364]	; (800437c <HAL_DMA_Abort+0x474>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00e      	beq.n	8004232 <HAL_DMA_Abort+0x32a>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a59      	ldr	r2, [pc, #356]	; (8004380 <HAL_DMA_Abort+0x478>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d009      	beq.n	8004232 <HAL_DMA_Abort+0x32a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a58      	ldr	r2, [pc, #352]	; (8004384 <HAL_DMA_Abort+0x47c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d004      	beq.n	8004232 <HAL_DMA_Abort+0x32a>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a56      	ldr	r2, [pc, #344]	; (8004388 <HAL_DMA_Abort+0x480>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d108      	bne.n	8004244 <HAL_DMA_Abort+0x33c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0201 	bic.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	e007      	b.n	8004254 <HAL_DMA_Abort+0x34c>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0201 	bic.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004254:	e013      	b.n	800427e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004256:	f7fc ff83 	bl	8001160 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b05      	cmp	r3, #5
 8004262:	d90c      	bls.n	800427e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2220      	movs	r2, #32
 8004268:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2203      	movs	r2, #3
 800426e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e12d      	b.n	80044da <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1e5      	bne.n	8004256 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a2f      	ldr	r2, [pc, #188]	; (800434c <HAL_DMA_Abort+0x444>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d04a      	beq.n	800432a <HAL_DMA_Abort+0x422>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a2d      	ldr	r2, [pc, #180]	; (8004350 <HAL_DMA_Abort+0x448>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d045      	beq.n	800432a <HAL_DMA_Abort+0x422>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a2c      	ldr	r2, [pc, #176]	; (8004354 <HAL_DMA_Abort+0x44c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d040      	beq.n	800432a <HAL_DMA_Abort+0x422>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a2a      	ldr	r2, [pc, #168]	; (8004358 <HAL_DMA_Abort+0x450>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d03b      	beq.n	800432a <HAL_DMA_Abort+0x422>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a29      	ldr	r2, [pc, #164]	; (800435c <HAL_DMA_Abort+0x454>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d036      	beq.n	800432a <HAL_DMA_Abort+0x422>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a27      	ldr	r2, [pc, #156]	; (8004360 <HAL_DMA_Abort+0x458>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d031      	beq.n	800432a <HAL_DMA_Abort+0x422>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a26      	ldr	r2, [pc, #152]	; (8004364 <HAL_DMA_Abort+0x45c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d02c      	beq.n	800432a <HAL_DMA_Abort+0x422>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a24      	ldr	r2, [pc, #144]	; (8004368 <HAL_DMA_Abort+0x460>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d027      	beq.n	800432a <HAL_DMA_Abort+0x422>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a23      	ldr	r2, [pc, #140]	; (800436c <HAL_DMA_Abort+0x464>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d022      	beq.n	800432a <HAL_DMA_Abort+0x422>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a21      	ldr	r2, [pc, #132]	; (8004370 <HAL_DMA_Abort+0x468>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d01d      	beq.n	800432a <HAL_DMA_Abort+0x422>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a20      	ldr	r2, [pc, #128]	; (8004374 <HAL_DMA_Abort+0x46c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d018      	beq.n	800432a <HAL_DMA_Abort+0x422>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a1e      	ldr	r2, [pc, #120]	; (8004378 <HAL_DMA_Abort+0x470>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d013      	beq.n	800432a <HAL_DMA_Abort+0x422>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1d      	ldr	r2, [pc, #116]	; (800437c <HAL_DMA_Abort+0x474>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00e      	beq.n	800432a <HAL_DMA_Abort+0x422>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <HAL_DMA_Abort+0x478>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d009      	beq.n	800432a <HAL_DMA_Abort+0x422>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a1a      	ldr	r2, [pc, #104]	; (8004384 <HAL_DMA_Abort+0x47c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d004      	beq.n	800432a <HAL_DMA_Abort+0x422>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a18      	ldr	r2, [pc, #96]	; (8004388 <HAL_DMA_Abort+0x480>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d101      	bne.n	800432e <HAL_DMA_Abort+0x426>
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <HAL_DMA_Abort+0x428>
 800432e:	2300      	movs	r3, #0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d02b      	beq.n	800438c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004338:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433e:	f003 031f 	and.w	r3, r3, #31
 8004342:	223f      	movs	r2, #63	; 0x3f
 8004344:	409a      	lsls	r2, r3
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	609a      	str	r2, [r3, #8]
 800434a:	e02a      	b.n	80043a2 <HAL_DMA_Abort+0x49a>
 800434c:	40020010 	.word	0x40020010
 8004350:	40020028 	.word	0x40020028
 8004354:	40020040 	.word	0x40020040
 8004358:	40020058 	.word	0x40020058
 800435c:	40020070 	.word	0x40020070
 8004360:	40020088 	.word	0x40020088
 8004364:	400200a0 	.word	0x400200a0
 8004368:	400200b8 	.word	0x400200b8
 800436c:	40020410 	.word	0x40020410
 8004370:	40020428 	.word	0x40020428
 8004374:	40020440 	.word	0x40020440
 8004378:	40020458 	.word	0x40020458
 800437c:	40020470 	.word	0x40020470
 8004380:	40020488 	.word	0x40020488
 8004384:	400204a0 	.word	0x400204a0
 8004388:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004390:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004396:	f003 031f 	and.w	r3, r3, #31
 800439a:	2201      	movs	r2, #1
 800439c:	409a      	lsls	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a4f      	ldr	r2, [pc, #316]	; (80044e4 <HAL_DMA_Abort+0x5dc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d072      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a4d      	ldr	r2, [pc, #308]	; (80044e8 <HAL_DMA_Abort+0x5e0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d06d      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a4c      	ldr	r2, [pc, #304]	; (80044ec <HAL_DMA_Abort+0x5e4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d068      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a4a      	ldr	r2, [pc, #296]	; (80044f0 <HAL_DMA_Abort+0x5e8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d063      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a49      	ldr	r2, [pc, #292]	; (80044f4 <HAL_DMA_Abort+0x5ec>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d05e      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a47      	ldr	r2, [pc, #284]	; (80044f8 <HAL_DMA_Abort+0x5f0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d059      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a46      	ldr	r2, [pc, #280]	; (80044fc <HAL_DMA_Abort+0x5f4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d054      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a44      	ldr	r2, [pc, #272]	; (8004500 <HAL_DMA_Abort+0x5f8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d04f      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a43      	ldr	r2, [pc, #268]	; (8004504 <HAL_DMA_Abort+0x5fc>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d04a      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a41      	ldr	r2, [pc, #260]	; (8004508 <HAL_DMA_Abort+0x600>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d045      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a40      	ldr	r2, [pc, #256]	; (800450c <HAL_DMA_Abort+0x604>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d040      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a3e      	ldr	r2, [pc, #248]	; (8004510 <HAL_DMA_Abort+0x608>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d03b      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a3d      	ldr	r2, [pc, #244]	; (8004514 <HAL_DMA_Abort+0x60c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d036      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a3b      	ldr	r2, [pc, #236]	; (8004518 <HAL_DMA_Abort+0x610>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d031      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a3a      	ldr	r2, [pc, #232]	; (800451c <HAL_DMA_Abort+0x614>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d02c      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a38      	ldr	r2, [pc, #224]	; (8004520 <HAL_DMA_Abort+0x618>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d027      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a37      	ldr	r2, [pc, #220]	; (8004524 <HAL_DMA_Abort+0x61c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d022      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a35      	ldr	r2, [pc, #212]	; (8004528 <HAL_DMA_Abort+0x620>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d01d      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a34      	ldr	r2, [pc, #208]	; (800452c <HAL_DMA_Abort+0x624>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d018      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a32      	ldr	r2, [pc, #200]	; (8004530 <HAL_DMA_Abort+0x628>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d013      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a31      	ldr	r2, [pc, #196]	; (8004534 <HAL_DMA_Abort+0x62c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00e      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a2f      	ldr	r2, [pc, #188]	; (8004538 <HAL_DMA_Abort+0x630>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d009      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a2e      	ldr	r2, [pc, #184]	; (800453c <HAL_DMA_Abort+0x634>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d004      	beq.n	8004492 <HAL_DMA_Abort+0x58a>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a2c      	ldr	r2, [pc, #176]	; (8004540 <HAL_DMA_Abort+0x638>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d101      	bne.n	8004496 <HAL_DMA_Abort+0x58e>
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <HAL_DMA_Abort+0x590>
 8004496:	2300      	movs	r3, #0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d015      	beq.n	80044c8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80044a4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00c      	beq.n	80044c8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044bc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80044c6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40020010 	.word	0x40020010
 80044e8:	40020028 	.word	0x40020028
 80044ec:	40020040 	.word	0x40020040
 80044f0:	40020058 	.word	0x40020058
 80044f4:	40020070 	.word	0x40020070
 80044f8:	40020088 	.word	0x40020088
 80044fc:	400200a0 	.word	0x400200a0
 8004500:	400200b8 	.word	0x400200b8
 8004504:	40020410 	.word	0x40020410
 8004508:	40020428 	.word	0x40020428
 800450c:	40020440 	.word	0x40020440
 8004510:	40020458 	.word	0x40020458
 8004514:	40020470 	.word	0x40020470
 8004518:	40020488 	.word	0x40020488
 800451c:	400204a0 	.word	0x400204a0
 8004520:	400204b8 	.word	0x400204b8
 8004524:	58025408 	.word	0x58025408
 8004528:	5802541c 	.word	0x5802541c
 800452c:	58025430 	.word	0x58025430
 8004530:	58025444 	.word	0x58025444
 8004534:	58025458 	.word	0x58025458
 8004538:	5802546c 	.word	0x5802546c
 800453c:	58025480 	.word	0x58025480
 8004540:	58025494 	.word	0x58025494

08004544 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e205      	b.n	8004962 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d004      	beq.n	800456c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2280      	movs	r2, #128	; 0x80
 8004566:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e1fa      	b.n	8004962 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a8c      	ldr	r2, [pc, #560]	; (80047a4 <HAL_DMA_Abort_IT+0x260>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d04a      	beq.n	800460c <HAL_DMA_Abort_IT+0xc8>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a8b      	ldr	r2, [pc, #556]	; (80047a8 <HAL_DMA_Abort_IT+0x264>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d045      	beq.n	800460c <HAL_DMA_Abort_IT+0xc8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a89      	ldr	r2, [pc, #548]	; (80047ac <HAL_DMA_Abort_IT+0x268>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d040      	beq.n	800460c <HAL_DMA_Abort_IT+0xc8>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a88      	ldr	r2, [pc, #544]	; (80047b0 <HAL_DMA_Abort_IT+0x26c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d03b      	beq.n	800460c <HAL_DMA_Abort_IT+0xc8>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a86      	ldr	r2, [pc, #536]	; (80047b4 <HAL_DMA_Abort_IT+0x270>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d036      	beq.n	800460c <HAL_DMA_Abort_IT+0xc8>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a85      	ldr	r2, [pc, #532]	; (80047b8 <HAL_DMA_Abort_IT+0x274>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d031      	beq.n	800460c <HAL_DMA_Abort_IT+0xc8>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a83      	ldr	r2, [pc, #524]	; (80047bc <HAL_DMA_Abort_IT+0x278>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d02c      	beq.n	800460c <HAL_DMA_Abort_IT+0xc8>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a82      	ldr	r2, [pc, #520]	; (80047c0 <HAL_DMA_Abort_IT+0x27c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d027      	beq.n	800460c <HAL_DMA_Abort_IT+0xc8>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a80      	ldr	r2, [pc, #512]	; (80047c4 <HAL_DMA_Abort_IT+0x280>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d022      	beq.n	800460c <HAL_DMA_Abort_IT+0xc8>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a7f      	ldr	r2, [pc, #508]	; (80047c8 <HAL_DMA_Abort_IT+0x284>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d01d      	beq.n	800460c <HAL_DMA_Abort_IT+0xc8>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a7d      	ldr	r2, [pc, #500]	; (80047cc <HAL_DMA_Abort_IT+0x288>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d018      	beq.n	800460c <HAL_DMA_Abort_IT+0xc8>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a7c      	ldr	r2, [pc, #496]	; (80047d0 <HAL_DMA_Abort_IT+0x28c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d013      	beq.n	800460c <HAL_DMA_Abort_IT+0xc8>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a7a      	ldr	r2, [pc, #488]	; (80047d4 <HAL_DMA_Abort_IT+0x290>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00e      	beq.n	800460c <HAL_DMA_Abort_IT+0xc8>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a79      	ldr	r2, [pc, #484]	; (80047d8 <HAL_DMA_Abort_IT+0x294>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d009      	beq.n	800460c <HAL_DMA_Abort_IT+0xc8>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a77      	ldr	r2, [pc, #476]	; (80047dc <HAL_DMA_Abort_IT+0x298>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d004      	beq.n	800460c <HAL_DMA_Abort_IT+0xc8>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a76      	ldr	r2, [pc, #472]	; (80047e0 <HAL_DMA_Abort_IT+0x29c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d101      	bne.n	8004610 <HAL_DMA_Abort_IT+0xcc>
 800460c:	2301      	movs	r3, #1
 800460e:	e000      	b.n	8004612 <HAL_DMA_Abort_IT+0xce>
 8004610:	2300      	movs	r3, #0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d065      	beq.n	80046e2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2204      	movs	r2, #4
 800461a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a60      	ldr	r2, [pc, #384]	; (80047a4 <HAL_DMA_Abort_IT+0x260>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d04a      	beq.n	80046be <HAL_DMA_Abort_IT+0x17a>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a5e      	ldr	r2, [pc, #376]	; (80047a8 <HAL_DMA_Abort_IT+0x264>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d045      	beq.n	80046be <HAL_DMA_Abort_IT+0x17a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a5d      	ldr	r2, [pc, #372]	; (80047ac <HAL_DMA_Abort_IT+0x268>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d040      	beq.n	80046be <HAL_DMA_Abort_IT+0x17a>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a5b      	ldr	r2, [pc, #364]	; (80047b0 <HAL_DMA_Abort_IT+0x26c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d03b      	beq.n	80046be <HAL_DMA_Abort_IT+0x17a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a5a      	ldr	r2, [pc, #360]	; (80047b4 <HAL_DMA_Abort_IT+0x270>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d036      	beq.n	80046be <HAL_DMA_Abort_IT+0x17a>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a58      	ldr	r2, [pc, #352]	; (80047b8 <HAL_DMA_Abort_IT+0x274>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d031      	beq.n	80046be <HAL_DMA_Abort_IT+0x17a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a57      	ldr	r2, [pc, #348]	; (80047bc <HAL_DMA_Abort_IT+0x278>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d02c      	beq.n	80046be <HAL_DMA_Abort_IT+0x17a>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a55      	ldr	r2, [pc, #340]	; (80047c0 <HAL_DMA_Abort_IT+0x27c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d027      	beq.n	80046be <HAL_DMA_Abort_IT+0x17a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a54      	ldr	r2, [pc, #336]	; (80047c4 <HAL_DMA_Abort_IT+0x280>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d022      	beq.n	80046be <HAL_DMA_Abort_IT+0x17a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a52      	ldr	r2, [pc, #328]	; (80047c8 <HAL_DMA_Abort_IT+0x284>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d01d      	beq.n	80046be <HAL_DMA_Abort_IT+0x17a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a51      	ldr	r2, [pc, #324]	; (80047cc <HAL_DMA_Abort_IT+0x288>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d018      	beq.n	80046be <HAL_DMA_Abort_IT+0x17a>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a4f      	ldr	r2, [pc, #316]	; (80047d0 <HAL_DMA_Abort_IT+0x28c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d013      	beq.n	80046be <HAL_DMA_Abort_IT+0x17a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a4e      	ldr	r2, [pc, #312]	; (80047d4 <HAL_DMA_Abort_IT+0x290>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00e      	beq.n	80046be <HAL_DMA_Abort_IT+0x17a>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a4c      	ldr	r2, [pc, #304]	; (80047d8 <HAL_DMA_Abort_IT+0x294>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d009      	beq.n	80046be <HAL_DMA_Abort_IT+0x17a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a4b      	ldr	r2, [pc, #300]	; (80047dc <HAL_DMA_Abort_IT+0x298>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d004      	beq.n	80046be <HAL_DMA_Abort_IT+0x17a>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a49      	ldr	r2, [pc, #292]	; (80047e0 <HAL_DMA_Abort_IT+0x29c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d108      	bne.n	80046d0 <HAL_DMA_Abort_IT+0x18c>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0201 	bic.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	e147      	b.n	8004960 <HAL_DMA_Abort_IT+0x41c>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	e13e      	b.n	8004960 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 020e 	bic.w	r2, r2, #14
 80046f0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a2b      	ldr	r2, [pc, #172]	; (80047a4 <HAL_DMA_Abort_IT+0x260>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d04a      	beq.n	8004792 <HAL_DMA_Abort_IT+0x24e>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a29      	ldr	r2, [pc, #164]	; (80047a8 <HAL_DMA_Abort_IT+0x264>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d045      	beq.n	8004792 <HAL_DMA_Abort_IT+0x24e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a28      	ldr	r2, [pc, #160]	; (80047ac <HAL_DMA_Abort_IT+0x268>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d040      	beq.n	8004792 <HAL_DMA_Abort_IT+0x24e>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a26      	ldr	r2, [pc, #152]	; (80047b0 <HAL_DMA_Abort_IT+0x26c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d03b      	beq.n	8004792 <HAL_DMA_Abort_IT+0x24e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a25      	ldr	r2, [pc, #148]	; (80047b4 <HAL_DMA_Abort_IT+0x270>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d036      	beq.n	8004792 <HAL_DMA_Abort_IT+0x24e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a23      	ldr	r2, [pc, #140]	; (80047b8 <HAL_DMA_Abort_IT+0x274>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d031      	beq.n	8004792 <HAL_DMA_Abort_IT+0x24e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a22      	ldr	r2, [pc, #136]	; (80047bc <HAL_DMA_Abort_IT+0x278>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d02c      	beq.n	8004792 <HAL_DMA_Abort_IT+0x24e>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a20      	ldr	r2, [pc, #128]	; (80047c0 <HAL_DMA_Abort_IT+0x27c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d027      	beq.n	8004792 <HAL_DMA_Abort_IT+0x24e>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1f      	ldr	r2, [pc, #124]	; (80047c4 <HAL_DMA_Abort_IT+0x280>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d022      	beq.n	8004792 <HAL_DMA_Abort_IT+0x24e>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1d      	ldr	r2, [pc, #116]	; (80047c8 <HAL_DMA_Abort_IT+0x284>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d01d      	beq.n	8004792 <HAL_DMA_Abort_IT+0x24e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1c      	ldr	r2, [pc, #112]	; (80047cc <HAL_DMA_Abort_IT+0x288>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d018      	beq.n	8004792 <HAL_DMA_Abort_IT+0x24e>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1a      	ldr	r2, [pc, #104]	; (80047d0 <HAL_DMA_Abort_IT+0x28c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d013      	beq.n	8004792 <HAL_DMA_Abort_IT+0x24e>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a19      	ldr	r2, [pc, #100]	; (80047d4 <HAL_DMA_Abort_IT+0x290>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d00e      	beq.n	8004792 <HAL_DMA_Abort_IT+0x24e>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a17      	ldr	r2, [pc, #92]	; (80047d8 <HAL_DMA_Abort_IT+0x294>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d009      	beq.n	8004792 <HAL_DMA_Abort_IT+0x24e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a16      	ldr	r2, [pc, #88]	; (80047dc <HAL_DMA_Abort_IT+0x298>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d004      	beq.n	8004792 <HAL_DMA_Abort_IT+0x24e>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a14      	ldr	r2, [pc, #80]	; (80047e0 <HAL_DMA_Abort_IT+0x29c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d128      	bne.n	80047e4 <HAL_DMA_Abort_IT+0x2a0>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0201 	bic.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	e027      	b.n	80047f4 <HAL_DMA_Abort_IT+0x2b0>
 80047a4:	40020010 	.word	0x40020010
 80047a8:	40020028 	.word	0x40020028
 80047ac:	40020040 	.word	0x40020040
 80047b0:	40020058 	.word	0x40020058
 80047b4:	40020070 	.word	0x40020070
 80047b8:	40020088 	.word	0x40020088
 80047bc:	400200a0 	.word	0x400200a0
 80047c0:	400200b8 	.word	0x400200b8
 80047c4:	40020410 	.word	0x40020410
 80047c8:	40020428 	.word	0x40020428
 80047cc:	40020440 	.word	0x40020440
 80047d0:	40020458 	.word	0x40020458
 80047d4:	40020470 	.word	0x40020470
 80047d8:	40020488 	.word	0x40020488
 80047dc:	400204a0 	.word	0x400204a0
 80047e0:	400204b8 	.word	0x400204b8
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0201 	bic.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a5c      	ldr	r2, [pc, #368]	; (800496c <HAL_DMA_Abort_IT+0x428>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d072      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a5b      	ldr	r2, [pc, #364]	; (8004970 <HAL_DMA_Abort_IT+0x42c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d06d      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a59      	ldr	r2, [pc, #356]	; (8004974 <HAL_DMA_Abort_IT+0x430>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d068      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a58      	ldr	r2, [pc, #352]	; (8004978 <HAL_DMA_Abort_IT+0x434>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d063      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a56      	ldr	r2, [pc, #344]	; (800497c <HAL_DMA_Abort_IT+0x438>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d05e      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a55      	ldr	r2, [pc, #340]	; (8004980 <HAL_DMA_Abort_IT+0x43c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d059      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a53      	ldr	r2, [pc, #332]	; (8004984 <HAL_DMA_Abort_IT+0x440>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d054      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a52      	ldr	r2, [pc, #328]	; (8004988 <HAL_DMA_Abort_IT+0x444>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d04f      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a50      	ldr	r2, [pc, #320]	; (800498c <HAL_DMA_Abort_IT+0x448>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d04a      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a4f      	ldr	r2, [pc, #316]	; (8004990 <HAL_DMA_Abort_IT+0x44c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d045      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a4d      	ldr	r2, [pc, #308]	; (8004994 <HAL_DMA_Abort_IT+0x450>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d040      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a4c      	ldr	r2, [pc, #304]	; (8004998 <HAL_DMA_Abort_IT+0x454>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d03b      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a4a      	ldr	r2, [pc, #296]	; (800499c <HAL_DMA_Abort_IT+0x458>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d036      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a49      	ldr	r2, [pc, #292]	; (80049a0 <HAL_DMA_Abort_IT+0x45c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d031      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a47      	ldr	r2, [pc, #284]	; (80049a4 <HAL_DMA_Abort_IT+0x460>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d02c      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a46      	ldr	r2, [pc, #280]	; (80049a8 <HAL_DMA_Abort_IT+0x464>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d027      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a44      	ldr	r2, [pc, #272]	; (80049ac <HAL_DMA_Abort_IT+0x468>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d022      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a43      	ldr	r2, [pc, #268]	; (80049b0 <HAL_DMA_Abort_IT+0x46c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d01d      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a41      	ldr	r2, [pc, #260]	; (80049b4 <HAL_DMA_Abort_IT+0x470>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d018      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a40      	ldr	r2, [pc, #256]	; (80049b8 <HAL_DMA_Abort_IT+0x474>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d013      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a3e      	ldr	r2, [pc, #248]	; (80049bc <HAL_DMA_Abort_IT+0x478>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00e      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a3d      	ldr	r2, [pc, #244]	; (80049c0 <HAL_DMA_Abort_IT+0x47c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d009      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a3b      	ldr	r2, [pc, #236]	; (80049c4 <HAL_DMA_Abort_IT+0x480>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x3a0>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a3a      	ldr	r2, [pc, #232]	; (80049c8 <HAL_DMA_Abort_IT+0x484>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d101      	bne.n	80048e8 <HAL_DMA_Abort_IT+0x3a4>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <HAL_DMA_Abort_IT+0x3a6>
 80048e8:	2300      	movs	r3, #0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d028      	beq.n	8004940 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048fc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004902:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	2201      	movs	r2, #1
 800490e:	409a      	lsls	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800491c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00c      	beq.n	8004940 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004930:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004934:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800493e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40020010 	.word	0x40020010
 8004970:	40020028 	.word	0x40020028
 8004974:	40020040 	.word	0x40020040
 8004978:	40020058 	.word	0x40020058
 800497c:	40020070 	.word	0x40020070
 8004980:	40020088 	.word	0x40020088
 8004984:	400200a0 	.word	0x400200a0
 8004988:	400200b8 	.word	0x400200b8
 800498c:	40020410 	.word	0x40020410
 8004990:	40020428 	.word	0x40020428
 8004994:	40020440 	.word	0x40020440
 8004998:	40020458 	.word	0x40020458
 800499c:	40020470 	.word	0x40020470
 80049a0:	40020488 	.word	0x40020488
 80049a4:	400204a0 	.word	0x400204a0
 80049a8:	400204b8 	.word	0x400204b8
 80049ac:	58025408 	.word	0x58025408
 80049b0:	5802541c 	.word	0x5802541c
 80049b4:	58025430 	.word	0x58025430
 80049b8:	58025444 	.word	0x58025444
 80049bc:	58025458 	.word	0x58025458
 80049c0:	5802546c 	.word	0x5802546c
 80049c4:	58025480 	.word	0x58025480
 80049c8:	58025494 	.word	0x58025494

080049cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08a      	sub	sp, #40	; 0x28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049d8:	4b67      	ldr	r3, [pc, #412]	; (8004b78 <HAL_DMA_IRQHandler+0x1ac>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a67      	ldr	r2, [pc, #412]	; (8004b7c <HAL_DMA_IRQHandler+0x1b0>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	0a9b      	lsrs	r3, r3, #10
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a5f      	ldr	r2, [pc, #380]	; (8004b80 <HAL_DMA_IRQHandler+0x1b4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d04a      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xd2>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a5d      	ldr	r2, [pc, #372]	; (8004b84 <HAL_DMA_IRQHandler+0x1b8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d045      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xd2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a5c      	ldr	r2, [pc, #368]	; (8004b88 <HAL_DMA_IRQHandler+0x1bc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d040      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xd2>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a5a      	ldr	r2, [pc, #360]	; (8004b8c <HAL_DMA_IRQHandler+0x1c0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d03b      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xd2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a59      	ldr	r2, [pc, #356]	; (8004b90 <HAL_DMA_IRQHandler+0x1c4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d036      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xd2>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a57      	ldr	r2, [pc, #348]	; (8004b94 <HAL_DMA_IRQHandler+0x1c8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d031      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xd2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a56      	ldr	r2, [pc, #344]	; (8004b98 <HAL_DMA_IRQHandler+0x1cc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d02c      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xd2>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a54      	ldr	r2, [pc, #336]	; (8004b9c <HAL_DMA_IRQHandler+0x1d0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d027      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xd2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a53      	ldr	r2, [pc, #332]	; (8004ba0 <HAL_DMA_IRQHandler+0x1d4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d022      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xd2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a51      	ldr	r2, [pc, #324]	; (8004ba4 <HAL_DMA_IRQHandler+0x1d8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d01d      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xd2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a50      	ldr	r2, [pc, #320]	; (8004ba8 <HAL_DMA_IRQHandler+0x1dc>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d018      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xd2>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a4e      	ldr	r2, [pc, #312]	; (8004bac <HAL_DMA_IRQHandler+0x1e0>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d013      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xd2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a4d      	ldr	r2, [pc, #308]	; (8004bb0 <HAL_DMA_IRQHandler+0x1e4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00e      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xd2>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a4b      	ldr	r2, [pc, #300]	; (8004bb4 <HAL_DMA_IRQHandler+0x1e8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d009      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xd2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a4a      	ldr	r2, [pc, #296]	; (8004bb8 <HAL_DMA_IRQHandler+0x1ec>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d004      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xd2>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a48      	ldr	r2, [pc, #288]	; (8004bbc <HAL_DMA_IRQHandler+0x1f0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d101      	bne.n	8004aa2 <HAL_DMA_IRQHandler+0xd6>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <HAL_DMA_IRQHandler+0xd8>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 842b 	beq.w	8005300 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aae:	f003 031f 	and.w	r3, r3, #31
 8004ab2:	2208      	movs	r2, #8
 8004ab4:	409a      	lsls	r2, r3
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 80a2 	beq.w	8004c04 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a2e      	ldr	r2, [pc, #184]	; (8004b80 <HAL_DMA_IRQHandler+0x1b4>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d04a      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x194>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a2d      	ldr	r2, [pc, #180]	; (8004b84 <HAL_DMA_IRQHandler+0x1b8>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d045      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x194>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a2b      	ldr	r2, [pc, #172]	; (8004b88 <HAL_DMA_IRQHandler+0x1bc>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d040      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x194>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a2a      	ldr	r2, [pc, #168]	; (8004b8c <HAL_DMA_IRQHandler+0x1c0>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d03b      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x194>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a28      	ldr	r2, [pc, #160]	; (8004b90 <HAL_DMA_IRQHandler+0x1c4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d036      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x194>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a27      	ldr	r2, [pc, #156]	; (8004b94 <HAL_DMA_IRQHandler+0x1c8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d031      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x194>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a25      	ldr	r2, [pc, #148]	; (8004b98 <HAL_DMA_IRQHandler+0x1cc>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d02c      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x194>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a24      	ldr	r2, [pc, #144]	; (8004b9c <HAL_DMA_IRQHandler+0x1d0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d027      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x194>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a22      	ldr	r2, [pc, #136]	; (8004ba0 <HAL_DMA_IRQHandler+0x1d4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d022      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x194>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a21      	ldr	r2, [pc, #132]	; (8004ba4 <HAL_DMA_IRQHandler+0x1d8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d01d      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x194>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a1f      	ldr	r2, [pc, #124]	; (8004ba8 <HAL_DMA_IRQHandler+0x1dc>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d018      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x194>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a1e      	ldr	r2, [pc, #120]	; (8004bac <HAL_DMA_IRQHandler+0x1e0>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d013      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x194>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a1c      	ldr	r2, [pc, #112]	; (8004bb0 <HAL_DMA_IRQHandler+0x1e4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00e      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x194>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a1b      	ldr	r2, [pc, #108]	; (8004bb4 <HAL_DMA_IRQHandler+0x1e8>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d009      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x194>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a19      	ldr	r2, [pc, #100]	; (8004bb8 <HAL_DMA_IRQHandler+0x1ec>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x194>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a18      	ldr	r2, [pc, #96]	; (8004bbc <HAL_DMA_IRQHandler+0x1f0>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d12f      	bne.n	8004bc0 <HAL_DMA_IRQHandler+0x1f4>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0304 	and.w	r3, r3, #4
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	bf14      	ite	ne
 8004b6e:	2301      	movne	r3, #1
 8004b70:	2300      	moveq	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	e02e      	b.n	8004bd4 <HAL_DMA_IRQHandler+0x208>
 8004b76:	bf00      	nop
 8004b78:	24000000 	.word	0x24000000
 8004b7c:	1b4e81b5 	.word	0x1b4e81b5
 8004b80:	40020010 	.word	0x40020010
 8004b84:	40020028 	.word	0x40020028
 8004b88:	40020040 	.word	0x40020040
 8004b8c:	40020058 	.word	0x40020058
 8004b90:	40020070 	.word	0x40020070
 8004b94:	40020088 	.word	0x40020088
 8004b98:	400200a0 	.word	0x400200a0
 8004b9c:	400200b8 	.word	0x400200b8
 8004ba0:	40020410 	.word	0x40020410
 8004ba4:	40020428 	.word	0x40020428
 8004ba8:	40020440 	.word	0x40020440
 8004bac:	40020458 	.word	0x40020458
 8004bb0:	40020470 	.word	0x40020470
 8004bb4:	40020488 	.word	0x40020488
 8004bb8:	400204a0 	.word	0x400204a0
 8004bbc:	400204b8 	.word	0x400204b8
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	bf14      	ite	ne
 8004bce:	2301      	movne	r3, #1
 8004bd0:	2300      	moveq	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d015      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0204 	bic.w	r2, r2, #4
 8004be6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bec:	f003 031f 	and.w	r3, r3, #31
 8004bf0:	2208      	movs	r2, #8
 8004bf2:	409a      	lsls	r2, r3
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfc:	f043 0201 	orr.w	r2, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c08:	f003 031f 	and.w	r3, r3, #31
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d06e      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a69      	ldr	r2, [pc, #420]	; (8004dc4 <HAL_DMA_IRQHandler+0x3f8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d04a      	beq.n	8004cba <HAL_DMA_IRQHandler+0x2ee>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a67      	ldr	r2, [pc, #412]	; (8004dc8 <HAL_DMA_IRQHandler+0x3fc>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d045      	beq.n	8004cba <HAL_DMA_IRQHandler+0x2ee>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a66      	ldr	r2, [pc, #408]	; (8004dcc <HAL_DMA_IRQHandler+0x400>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d040      	beq.n	8004cba <HAL_DMA_IRQHandler+0x2ee>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a64      	ldr	r2, [pc, #400]	; (8004dd0 <HAL_DMA_IRQHandler+0x404>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d03b      	beq.n	8004cba <HAL_DMA_IRQHandler+0x2ee>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a63      	ldr	r2, [pc, #396]	; (8004dd4 <HAL_DMA_IRQHandler+0x408>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d036      	beq.n	8004cba <HAL_DMA_IRQHandler+0x2ee>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a61      	ldr	r2, [pc, #388]	; (8004dd8 <HAL_DMA_IRQHandler+0x40c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d031      	beq.n	8004cba <HAL_DMA_IRQHandler+0x2ee>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a60      	ldr	r2, [pc, #384]	; (8004ddc <HAL_DMA_IRQHandler+0x410>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d02c      	beq.n	8004cba <HAL_DMA_IRQHandler+0x2ee>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a5e      	ldr	r2, [pc, #376]	; (8004de0 <HAL_DMA_IRQHandler+0x414>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d027      	beq.n	8004cba <HAL_DMA_IRQHandler+0x2ee>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a5d      	ldr	r2, [pc, #372]	; (8004de4 <HAL_DMA_IRQHandler+0x418>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d022      	beq.n	8004cba <HAL_DMA_IRQHandler+0x2ee>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a5b      	ldr	r2, [pc, #364]	; (8004de8 <HAL_DMA_IRQHandler+0x41c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d01d      	beq.n	8004cba <HAL_DMA_IRQHandler+0x2ee>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a5a      	ldr	r2, [pc, #360]	; (8004dec <HAL_DMA_IRQHandler+0x420>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d018      	beq.n	8004cba <HAL_DMA_IRQHandler+0x2ee>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a58      	ldr	r2, [pc, #352]	; (8004df0 <HAL_DMA_IRQHandler+0x424>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d013      	beq.n	8004cba <HAL_DMA_IRQHandler+0x2ee>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a57      	ldr	r2, [pc, #348]	; (8004df4 <HAL_DMA_IRQHandler+0x428>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d00e      	beq.n	8004cba <HAL_DMA_IRQHandler+0x2ee>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a55      	ldr	r2, [pc, #340]	; (8004df8 <HAL_DMA_IRQHandler+0x42c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d009      	beq.n	8004cba <HAL_DMA_IRQHandler+0x2ee>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a54      	ldr	r2, [pc, #336]	; (8004dfc <HAL_DMA_IRQHandler+0x430>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d004      	beq.n	8004cba <HAL_DMA_IRQHandler+0x2ee>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a52      	ldr	r2, [pc, #328]	; (8004e00 <HAL_DMA_IRQHandler+0x434>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d10a      	bne.n	8004cd0 <HAL_DMA_IRQHandler+0x304>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	bf14      	ite	ne
 8004cc8:	2301      	movne	r3, #1
 8004cca:	2300      	moveq	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	e003      	b.n	8004cd8 <HAL_DMA_IRQHandler+0x30c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00d      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce0:	f003 031f 	and.w	r3, r3, #31
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	409a      	lsls	r2, r3
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf0:	f043 0202 	orr.w	r2, r3, #2
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfc:	f003 031f 	and.w	r3, r3, #31
 8004d00:	2204      	movs	r2, #4
 8004d02:	409a      	lsls	r2, r3
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	4013      	ands	r3, r2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 808f 	beq.w	8004e2c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a2c      	ldr	r2, [pc, #176]	; (8004dc4 <HAL_DMA_IRQHandler+0x3f8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d04a      	beq.n	8004dae <HAL_DMA_IRQHandler+0x3e2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a2a      	ldr	r2, [pc, #168]	; (8004dc8 <HAL_DMA_IRQHandler+0x3fc>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d045      	beq.n	8004dae <HAL_DMA_IRQHandler+0x3e2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a29      	ldr	r2, [pc, #164]	; (8004dcc <HAL_DMA_IRQHandler+0x400>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d040      	beq.n	8004dae <HAL_DMA_IRQHandler+0x3e2>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a27      	ldr	r2, [pc, #156]	; (8004dd0 <HAL_DMA_IRQHandler+0x404>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d03b      	beq.n	8004dae <HAL_DMA_IRQHandler+0x3e2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a26      	ldr	r2, [pc, #152]	; (8004dd4 <HAL_DMA_IRQHandler+0x408>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d036      	beq.n	8004dae <HAL_DMA_IRQHandler+0x3e2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a24      	ldr	r2, [pc, #144]	; (8004dd8 <HAL_DMA_IRQHandler+0x40c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d031      	beq.n	8004dae <HAL_DMA_IRQHandler+0x3e2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a23      	ldr	r2, [pc, #140]	; (8004ddc <HAL_DMA_IRQHandler+0x410>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d02c      	beq.n	8004dae <HAL_DMA_IRQHandler+0x3e2>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a21      	ldr	r2, [pc, #132]	; (8004de0 <HAL_DMA_IRQHandler+0x414>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d027      	beq.n	8004dae <HAL_DMA_IRQHandler+0x3e2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a20      	ldr	r2, [pc, #128]	; (8004de4 <HAL_DMA_IRQHandler+0x418>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d022      	beq.n	8004dae <HAL_DMA_IRQHandler+0x3e2>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a1e      	ldr	r2, [pc, #120]	; (8004de8 <HAL_DMA_IRQHandler+0x41c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d01d      	beq.n	8004dae <HAL_DMA_IRQHandler+0x3e2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a1d      	ldr	r2, [pc, #116]	; (8004dec <HAL_DMA_IRQHandler+0x420>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d018      	beq.n	8004dae <HAL_DMA_IRQHandler+0x3e2>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a1b      	ldr	r2, [pc, #108]	; (8004df0 <HAL_DMA_IRQHandler+0x424>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d013      	beq.n	8004dae <HAL_DMA_IRQHandler+0x3e2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a1a      	ldr	r2, [pc, #104]	; (8004df4 <HAL_DMA_IRQHandler+0x428>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00e      	beq.n	8004dae <HAL_DMA_IRQHandler+0x3e2>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a18      	ldr	r2, [pc, #96]	; (8004df8 <HAL_DMA_IRQHandler+0x42c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d009      	beq.n	8004dae <HAL_DMA_IRQHandler+0x3e2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a17      	ldr	r2, [pc, #92]	; (8004dfc <HAL_DMA_IRQHandler+0x430>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d004      	beq.n	8004dae <HAL_DMA_IRQHandler+0x3e2>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a15      	ldr	r2, [pc, #84]	; (8004e00 <HAL_DMA_IRQHandler+0x434>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d12a      	bne.n	8004e04 <HAL_DMA_IRQHandler+0x438>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bf14      	ite	ne
 8004dbc:	2301      	movne	r3, #1
 8004dbe:	2300      	moveq	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	e023      	b.n	8004e0c <HAL_DMA_IRQHandler+0x440>
 8004dc4:	40020010 	.word	0x40020010
 8004dc8:	40020028 	.word	0x40020028
 8004dcc:	40020040 	.word	0x40020040
 8004dd0:	40020058 	.word	0x40020058
 8004dd4:	40020070 	.word	0x40020070
 8004dd8:	40020088 	.word	0x40020088
 8004ddc:	400200a0 	.word	0x400200a0
 8004de0:	400200b8 	.word	0x400200b8
 8004de4:	40020410 	.word	0x40020410
 8004de8:	40020428 	.word	0x40020428
 8004dec:	40020440 	.word	0x40020440
 8004df0:	40020458 	.word	0x40020458
 8004df4:	40020470 	.word	0x40020470
 8004df8:	40020488 	.word	0x40020488
 8004dfc:	400204a0 	.word	0x400204a0
 8004e00:	400204b8 	.word	0x400204b8
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00d      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e14:	f003 031f 	and.w	r3, r3, #31
 8004e18:	2204      	movs	r2, #4
 8004e1a:	409a      	lsls	r2, r3
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e24:	f043 0204 	orr.w	r2, r3, #4
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e30:	f003 031f 	and.w	r3, r3, #31
 8004e34:	2210      	movs	r2, #16
 8004e36:	409a      	lsls	r2, r3
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 80a6 	beq.w	8004f8e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a85      	ldr	r2, [pc, #532]	; (800505c <HAL_DMA_IRQHandler+0x690>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d04a      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x516>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a83      	ldr	r2, [pc, #524]	; (8005060 <HAL_DMA_IRQHandler+0x694>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d045      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x516>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a82      	ldr	r2, [pc, #520]	; (8005064 <HAL_DMA_IRQHandler+0x698>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d040      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x516>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a80      	ldr	r2, [pc, #512]	; (8005068 <HAL_DMA_IRQHandler+0x69c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d03b      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x516>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a7f      	ldr	r2, [pc, #508]	; (800506c <HAL_DMA_IRQHandler+0x6a0>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d036      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x516>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a7d      	ldr	r2, [pc, #500]	; (8005070 <HAL_DMA_IRQHandler+0x6a4>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d031      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x516>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a7c      	ldr	r2, [pc, #496]	; (8005074 <HAL_DMA_IRQHandler+0x6a8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d02c      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x516>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a7a      	ldr	r2, [pc, #488]	; (8005078 <HAL_DMA_IRQHandler+0x6ac>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d027      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x516>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a79      	ldr	r2, [pc, #484]	; (800507c <HAL_DMA_IRQHandler+0x6b0>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d022      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x516>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a77      	ldr	r2, [pc, #476]	; (8005080 <HAL_DMA_IRQHandler+0x6b4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d01d      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x516>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a76      	ldr	r2, [pc, #472]	; (8005084 <HAL_DMA_IRQHandler+0x6b8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d018      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x516>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a74      	ldr	r2, [pc, #464]	; (8005088 <HAL_DMA_IRQHandler+0x6bc>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d013      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x516>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a73      	ldr	r2, [pc, #460]	; (800508c <HAL_DMA_IRQHandler+0x6c0>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00e      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x516>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a71      	ldr	r2, [pc, #452]	; (8005090 <HAL_DMA_IRQHandler+0x6c4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d009      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x516>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a70      	ldr	r2, [pc, #448]	; (8005094 <HAL_DMA_IRQHandler+0x6c8>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d004      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x516>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a6e      	ldr	r2, [pc, #440]	; (8005098 <HAL_DMA_IRQHandler+0x6cc>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d10a      	bne.n	8004ef8 <HAL_DMA_IRQHandler+0x52c>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	bf14      	ite	ne
 8004ef0:	2301      	movne	r3, #1
 8004ef2:	2300      	moveq	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	e009      	b.n	8004f0c <HAL_DMA_IRQHandler+0x540>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bf14      	ite	ne
 8004f06:	2301      	movne	r3, #1
 8004f08:	2300      	moveq	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d03e      	beq.n	8004f8e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f14:	f003 031f 	and.w	r3, r3, #31
 8004f18:	2210      	movs	r2, #16
 8004f1a:	409a      	lsls	r2, r3
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d018      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d108      	bne.n	8004f4e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d024      	beq.n	8004f8e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	4798      	blx	r3
 8004f4c:	e01f      	b.n	8004f8e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d01b      	beq.n	8004f8e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	4798      	blx	r3
 8004f5e:	e016      	b.n	8004f8e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d107      	bne.n	8004f7e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0208 	bic.w	r2, r2, #8
 8004f7c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f92:	f003 031f 	and.w	r3, r3, #31
 8004f96:	2220      	movs	r2, #32
 8004f98:	409a      	lsls	r2, r3
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 8110 	beq.w	80051c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a2c      	ldr	r2, [pc, #176]	; (800505c <HAL_DMA_IRQHandler+0x690>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d04a      	beq.n	8005044 <HAL_DMA_IRQHandler+0x678>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a2b      	ldr	r2, [pc, #172]	; (8005060 <HAL_DMA_IRQHandler+0x694>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d045      	beq.n	8005044 <HAL_DMA_IRQHandler+0x678>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a29      	ldr	r2, [pc, #164]	; (8005064 <HAL_DMA_IRQHandler+0x698>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d040      	beq.n	8005044 <HAL_DMA_IRQHandler+0x678>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a28      	ldr	r2, [pc, #160]	; (8005068 <HAL_DMA_IRQHandler+0x69c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d03b      	beq.n	8005044 <HAL_DMA_IRQHandler+0x678>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a26      	ldr	r2, [pc, #152]	; (800506c <HAL_DMA_IRQHandler+0x6a0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d036      	beq.n	8005044 <HAL_DMA_IRQHandler+0x678>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a25      	ldr	r2, [pc, #148]	; (8005070 <HAL_DMA_IRQHandler+0x6a4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d031      	beq.n	8005044 <HAL_DMA_IRQHandler+0x678>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a23      	ldr	r2, [pc, #140]	; (8005074 <HAL_DMA_IRQHandler+0x6a8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d02c      	beq.n	8005044 <HAL_DMA_IRQHandler+0x678>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a22      	ldr	r2, [pc, #136]	; (8005078 <HAL_DMA_IRQHandler+0x6ac>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d027      	beq.n	8005044 <HAL_DMA_IRQHandler+0x678>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a20      	ldr	r2, [pc, #128]	; (800507c <HAL_DMA_IRQHandler+0x6b0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d022      	beq.n	8005044 <HAL_DMA_IRQHandler+0x678>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a1f      	ldr	r2, [pc, #124]	; (8005080 <HAL_DMA_IRQHandler+0x6b4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d01d      	beq.n	8005044 <HAL_DMA_IRQHandler+0x678>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a1d      	ldr	r2, [pc, #116]	; (8005084 <HAL_DMA_IRQHandler+0x6b8>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d018      	beq.n	8005044 <HAL_DMA_IRQHandler+0x678>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a1c      	ldr	r2, [pc, #112]	; (8005088 <HAL_DMA_IRQHandler+0x6bc>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d013      	beq.n	8005044 <HAL_DMA_IRQHandler+0x678>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1a      	ldr	r2, [pc, #104]	; (800508c <HAL_DMA_IRQHandler+0x6c0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00e      	beq.n	8005044 <HAL_DMA_IRQHandler+0x678>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a19      	ldr	r2, [pc, #100]	; (8005090 <HAL_DMA_IRQHandler+0x6c4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d009      	beq.n	8005044 <HAL_DMA_IRQHandler+0x678>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a17      	ldr	r2, [pc, #92]	; (8005094 <HAL_DMA_IRQHandler+0x6c8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d004      	beq.n	8005044 <HAL_DMA_IRQHandler+0x678>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a16      	ldr	r2, [pc, #88]	; (8005098 <HAL_DMA_IRQHandler+0x6cc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d12b      	bne.n	800509c <HAL_DMA_IRQHandler+0x6d0>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0310 	and.w	r3, r3, #16
 800504e:	2b00      	cmp	r3, #0
 8005050:	bf14      	ite	ne
 8005052:	2301      	movne	r3, #1
 8005054:	2300      	moveq	r3, #0
 8005056:	b2db      	uxtb	r3, r3
 8005058:	e02a      	b.n	80050b0 <HAL_DMA_IRQHandler+0x6e4>
 800505a:	bf00      	nop
 800505c:	40020010 	.word	0x40020010
 8005060:	40020028 	.word	0x40020028
 8005064:	40020040 	.word	0x40020040
 8005068:	40020058 	.word	0x40020058
 800506c:	40020070 	.word	0x40020070
 8005070:	40020088 	.word	0x40020088
 8005074:	400200a0 	.word	0x400200a0
 8005078:	400200b8 	.word	0x400200b8
 800507c:	40020410 	.word	0x40020410
 8005080:	40020428 	.word	0x40020428
 8005084:	40020440 	.word	0x40020440
 8005088:	40020458 	.word	0x40020458
 800508c:	40020470 	.word	0x40020470
 8005090:	40020488 	.word	0x40020488
 8005094:	400204a0 	.word	0x400204a0
 8005098:	400204b8 	.word	0x400204b8
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	bf14      	ite	ne
 80050aa:	2301      	movne	r3, #1
 80050ac:	2300      	moveq	r3, #0
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 8087 	beq.w	80051c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ba:	f003 031f 	and.w	r3, r3, #31
 80050be:	2220      	movs	r2, #32
 80050c0:	409a      	lsls	r2, r3
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d139      	bne.n	8005146 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0216 	bic.w	r2, r2, #22
 80050e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695a      	ldr	r2, [r3, #20]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d103      	bne.n	8005102 <HAL_DMA_IRQHandler+0x736>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d007      	beq.n	8005112 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0208 	bic.w	r2, r2, #8
 8005110:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005116:	f003 031f 	and.w	r3, r3, #31
 800511a:	223f      	movs	r2, #63	; 0x3f
 800511c:	409a      	lsls	r2, r3
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005136:	2b00      	cmp	r3, #0
 8005138:	f000 834a 	beq.w	80057d0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	4798      	blx	r3
          }
          return;
 8005144:	e344      	b.n	80057d0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d018      	beq.n	8005186 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d108      	bne.n	8005174 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005166:	2b00      	cmp	r3, #0
 8005168:	d02c      	beq.n	80051c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	4798      	blx	r3
 8005172:	e027      	b.n	80051c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005178:	2b00      	cmp	r3, #0
 800517a:	d023      	beq.n	80051c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	4798      	blx	r3
 8005184:	e01e      	b.n	80051c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10f      	bne.n	80051b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0210 	bic.w	r2, r2, #16
 80051a2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 8306 	beq.w	80057da <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 8088 	beq.w	80052ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2204      	movs	r2, #4
 80051e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a7a      	ldr	r2, [pc, #488]	; (80053d4 <HAL_DMA_IRQHandler+0xa08>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d04a      	beq.n	8005284 <HAL_DMA_IRQHandler+0x8b8>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a79      	ldr	r2, [pc, #484]	; (80053d8 <HAL_DMA_IRQHandler+0xa0c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d045      	beq.n	8005284 <HAL_DMA_IRQHandler+0x8b8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a77      	ldr	r2, [pc, #476]	; (80053dc <HAL_DMA_IRQHandler+0xa10>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d040      	beq.n	8005284 <HAL_DMA_IRQHandler+0x8b8>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a76      	ldr	r2, [pc, #472]	; (80053e0 <HAL_DMA_IRQHandler+0xa14>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d03b      	beq.n	8005284 <HAL_DMA_IRQHandler+0x8b8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a74      	ldr	r2, [pc, #464]	; (80053e4 <HAL_DMA_IRQHandler+0xa18>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d036      	beq.n	8005284 <HAL_DMA_IRQHandler+0x8b8>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a73      	ldr	r2, [pc, #460]	; (80053e8 <HAL_DMA_IRQHandler+0xa1c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d031      	beq.n	8005284 <HAL_DMA_IRQHandler+0x8b8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a71      	ldr	r2, [pc, #452]	; (80053ec <HAL_DMA_IRQHandler+0xa20>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d02c      	beq.n	8005284 <HAL_DMA_IRQHandler+0x8b8>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a70      	ldr	r2, [pc, #448]	; (80053f0 <HAL_DMA_IRQHandler+0xa24>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d027      	beq.n	8005284 <HAL_DMA_IRQHandler+0x8b8>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a6e      	ldr	r2, [pc, #440]	; (80053f4 <HAL_DMA_IRQHandler+0xa28>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d022      	beq.n	8005284 <HAL_DMA_IRQHandler+0x8b8>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a6d      	ldr	r2, [pc, #436]	; (80053f8 <HAL_DMA_IRQHandler+0xa2c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d01d      	beq.n	8005284 <HAL_DMA_IRQHandler+0x8b8>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a6b      	ldr	r2, [pc, #428]	; (80053fc <HAL_DMA_IRQHandler+0xa30>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d018      	beq.n	8005284 <HAL_DMA_IRQHandler+0x8b8>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a6a      	ldr	r2, [pc, #424]	; (8005400 <HAL_DMA_IRQHandler+0xa34>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d013      	beq.n	8005284 <HAL_DMA_IRQHandler+0x8b8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a68      	ldr	r2, [pc, #416]	; (8005404 <HAL_DMA_IRQHandler+0xa38>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00e      	beq.n	8005284 <HAL_DMA_IRQHandler+0x8b8>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a67      	ldr	r2, [pc, #412]	; (8005408 <HAL_DMA_IRQHandler+0xa3c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d009      	beq.n	8005284 <HAL_DMA_IRQHandler+0x8b8>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a65      	ldr	r2, [pc, #404]	; (800540c <HAL_DMA_IRQHandler+0xa40>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d004      	beq.n	8005284 <HAL_DMA_IRQHandler+0x8b8>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a64      	ldr	r2, [pc, #400]	; (8005410 <HAL_DMA_IRQHandler+0xa44>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d108      	bne.n	8005296 <HAL_DMA_IRQHandler+0x8ca>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0201 	bic.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	e007      	b.n	80052a6 <HAL_DMA_IRQHandler+0x8da>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0201 	bic.w	r2, r2, #1
 80052a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3301      	adds	r3, #1
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d307      	bcc.n	80052c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1f2      	bne.n	80052a6 <HAL_DMA_IRQHandler+0x8da>
 80052c0:	e000      	b.n	80052c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80052c2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d004      	beq.n	80052dc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2203      	movs	r2, #3
 80052d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80052da:	e003      	b.n	80052e4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 8272 	beq.w	80057da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	4798      	blx	r3
 80052fe:	e26c      	b.n	80057da <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a43      	ldr	r2, [pc, #268]	; (8005414 <HAL_DMA_IRQHandler+0xa48>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d022      	beq.n	8005350 <HAL_DMA_IRQHandler+0x984>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a42      	ldr	r2, [pc, #264]	; (8005418 <HAL_DMA_IRQHandler+0xa4c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d01d      	beq.n	8005350 <HAL_DMA_IRQHandler+0x984>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a40      	ldr	r2, [pc, #256]	; (800541c <HAL_DMA_IRQHandler+0xa50>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d018      	beq.n	8005350 <HAL_DMA_IRQHandler+0x984>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a3f      	ldr	r2, [pc, #252]	; (8005420 <HAL_DMA_IRQHandler+0xa54>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d013      	beq.n	8005350 <HAL_DMA_IRQHandler+0x984>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a3d      	ldr	r2, [pc, #244]	; (8005424 <HAL_DMA_IRQHandler+0xa58>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00e      	beq.n	8005350 <HAL_DMA_IRQHandler+0x984>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a3c      	ldr	r2, [pc, #240]	; (8005428 <HAL_DMA_IRQHandler+0xa5c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d009      	beq.n	8005350 <HAL_DMA_IRQHandler+0x984>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a3a      	ldr	r2, [pc, #232]	; (800542c <HAL_DMA_IRQHandler+0xa60>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d004      	beq.n	8005350 <HAL_DMA_IRQHandler+0x984>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a39      	ldr	r2, [pc, #228]	; (8005430 <HAL_DMA_IRQHandler+0xa64>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d101      	bne.n	8005354 <HAL_DMA_IRQHandler+0x988>
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <HAL_DMA_IRQHandler+0x98a>
 8005354:	2300      	movs	r3, #0
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 823f 	beq.w	80057da <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005368:	f003 031f 	and.w	r3, r3, #31
 800536c:	2204      	movs	r2, #4
 800536e:	409a      	lsls	r2, r3
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	4013      	ands	r3, r2
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 80cd 	beq.w	8005514 <HAL_DMA_IRQHandler+0xb48>
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80c7 	beq.w	8005514 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800538a:	f003 031f 	and.w	r3, r3, #31
 800538e:	2204      	movs	r2, #4
 8005390:	409a      	lsls	r2, r3
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d049      	beq.n	8005434 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 8210 	beq.w	80057d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053bc:	e20a      	b.n	80057d4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 8206 	beq.w	80057d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053d0:	e200      	b.n	80057d4 <HAL_DMA_IRQHandler+0xe08>
 80053d2:	bf00      	nop
 80053d4:	40020010 	.word	0x40020010
 80053d8:	40020028 	.word	0x40020028
 80053dc:	40020040 	.word	0x40020040
 80053e0:	40020058 	.word	0x40020058
 80053e4:	40020070 	.word	0x40020070
 80053e8:	40020088 	.word	0x40020088
 80053ec:	400200a0 	.word	0x400200a0
 80053f0:	400200b8 	.word	0x400200b8
 80053f4:	40020410 	.word	0x40020410
 80053f8:	40020428 	.word	0x40020428
 80053fc:	40020440 	.word	0x40020440
 8005400:	40020458 	.word	0x40020458
 8005404:	40020470 	.word	0x40020470
 8005408:	40020488 	.word	0x40020488
 800540c:	400204a0 	.word	0x400204a0
 8005410:	400204b8 	.word	0x400204b8
 8005414:	58025408 	.word	0x58025408
 8005418:	5802541c 	.word	0x5802541c
 800541c:	58025430 	.word	0x58025430
 8005420:	58025444 	.word	0x58025444
 8005424:	58025458 	.word	0x58025458
 8005428:	5802546c 	.word	0x5802546c
 800542c:	58025480 	.word	0x58025480
 8005430:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b00      	cmp	r3, #0
 800543c:	d160      	bne.n	8005500 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a8c      	ldr	r2, [pc, #560]	; (8005674 <HAL_DMA_IRQHandler+0xca8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d04a      	beq.n	80054de <HAL_DMA_IRQHandler+0xb12>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a8a      	ldr	r2, [pc, #552]	; (8005678 <HAL_DMA_IRQHandler+0xcac>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d045      	beq.n	80054de <HAL_DMA_IRQHandler+0xb12>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a89      	ldr	r2, [pc, #548]	; (800567c <HAL_DMA_IRQHandler+0xcb0>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d040      	beq.n	80054de <HAL_DMA_IRQHandler+0xb12>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a87      	ldr	r2, [pc, #540]	; (8005680 <HAL_DMA_IRQHandler+0xcb4>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d03b      	beq.n	80054de <HAL_DMA_IRQHandler+0xb12>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a86      	ldr	r2, [pc, #536]	; (8005684 <HAL_DMA_IRQHandler+0xcb8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d036      	beq.n	80054de <HAL_DMA_IRQHandler+0xb12>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a84      	ldr	r2, [pc, #528]	; (8005688 <HAL_DMA_IRQHandler+0xcbc>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d031      	beq.n	80054de <HAL_DMA_IRQHandler+0xb12>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a83      	ldr	r2, [pc, #524]	; (800568c <HAL_DMA_IRQHandler+0xcc0>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d02c      	beq.n	80054de <HAL_DMA_IRQHandler+0xb12>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a81      	ldr	r2, [pc, #516]	; (8005690 <HAL_DMA_IRQHandler+0xcc4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d027      	beq.n	80054de <HAL_DMA_IRQHandler+0xb12>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a80      	ldr	r2, [pc, #512]	; (8005694 <HAL_DMA_IRQHandler+0xcc8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d022      	beq.n	80054de <HAL_DMA_IRQHandler+0xb12>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a7e      	ldr	r2, [pc, #504]	; (8005698 <HAL_DMA_IRQHandler+0xccc>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d01d      	beq.n	80054de <HAL_DMA_IRQHandler+0xb12>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a7d      	ldr	r2, [pc, #500]	; (800569c <HAL_DMA_IRQHandler+0xcd0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d018      	beq.n	80054de <HAL_DMA_IRQHandler+0xb12>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a7b      	ldr	r2, [pc, #492]	; (80056a0 <HAL_DMA_IRQHandler+0xcd4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d013      	beq.n	80054de <HAL_DMA_IRQHandler+0xb12>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a7a      	ldr	r2, [pc, #488]	; (80056a4 <HAL_DMA_IRQHandler+0xcd8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00e      	beq.n	80054de <HAL_DMA_IRQHandler+0xb12>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a78      	ldr	r2, [pc, #480]	; (80056a8 <HAL_DMA_IRQHandler+0xcdc>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d009      	beq.n	80054de <HAL_DMA_IRQHandler+0xb12>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a77      	ldr	r2, [pc, #476]	; (80056ac <HAL_DMA_IRQHandler+0xce0>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d004      	beq.n	80054de <HAL_DMA_IRQHandler+0xb12>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a75      	ldr	r2, [pc, #468]	; (80056b0 <HAL_DMA_IRQHandler+0xce4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d108      	bne.n	80054f0 <HAL_DMA_IRQHandler+0xb24>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0208 	bic.w	r2, r2, #8
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e007      	b.n	8005500 <HAL_DMA_IRQHandler+0xb34>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0204 	bic.w	r2, r2, #4
 80054fe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 8165 	beq.w	80057d4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005512:	e15f      	b.n	80057d4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005518:	f003 031f 	and.w	r3, r3, #31
 800551c:	2202      	movs	r2, #2
 800551e:	409a      	lsls	r2, r3
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	4013      	ands	r3, r2
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 80c5 	beq.w	80056b4 <HAL_DMA_IRQHandler+0xce8>
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 80bf 	beq.w	80056b4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800553a:	f003 031f 	and.w	r3, r3, #31
 800553e:	2202      	movs	r2, #2
 8005540:	409a      	lsls	r2, r3
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d018      	beq.n	8005582 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d109      	bne.n	800556e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 813a 	beq.w	80057d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800556c:	e134      	b.n	80057d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 8130 	beq.w	80057d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005580:	e12a      	b.n	80057d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f003 0320 	and.w	r3, r3, #32
 8005588:	2b00      	cmp	r3, #0
 800558a:	d168      	bne.n	800565e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a38      	ldr	r2, [pc, #224]	; (8005674 <HAL_DMA_IRQHandler+0xca8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d04a      	beq.n	800562c <HAL_DMA_IRQHandler+0xc60>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a37      	ldr	r2, [pc, #220]	; (8005678 <HAL_DMA_IRQHandler+0xcac>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d045      	beq.n	800562c <HAL_DMA_IRQHandler+0xc60>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a35      	ldr	r2, [pc, #212]	; (800567c <HAL_DMA_IRQHandler+0xcb0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d040      	beq.n	800562c <HAL_DMA_IRQHandler+0xc60>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a34      	ldr	r2, [pc, #208]	; (8005680 <HAL_DMA_IRQHandler+0xcb4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d03b      	beq.n	800562c <HAL_DMA_IRQHandler+0xc60>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a32      	ldr	r2, [pc, #200]	; (8005684 <HAL_DMA_IRQHandler+0xcb8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d036      	beq.n	800562c <HAL_DMA_IRQHandler+0xc60>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a31      	ldr	r2, [pc, #196]	; (8005688 <HAL_DMA_IRQHandler+0xcbc>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d031      	beq.n	800562c <HAL_DMA_IRQHandler+0xc60>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a2f      	ldr	r2, [pc, #188]	; (800568c <HAL_DMA_IRQHandler+0xcc0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d02c      	beq.n	800562c <HAL_DMA_IRQHandler+0xc60>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a2e      	ldr	r2, [pc, #184]	; (8005690 <HAL_DMA_IRQHandler+0xcc4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d027      	beq.n	800562c <HAL_DMA_IRQHandler+0xc60>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a2c      	ldr	r2, [pc, #176]	; (8005694 <HAL_DMA_IRQHandler+0xcc8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d022      	beq.n	800562c <HAL_DMA_IRQHandler+0xc60>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a2b      	ldr	r2, [pc, #172]	; (8005698 <HAL_DMA_IRQHandler+0xccc>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d01d      	beq.n	800562c <HAL_DMA_IRQHandler+0xc60>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a29      	ldr	r2, [pc, #164]	; (800569c <HAL_DMA_IRQHandler+0xcd0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d018      	beq.n	800562c <HAL_DMA_IRQHandler+0xc60>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a28      	ldr	r2, [pc, #160]	; (80056a0 <HAL_DMA_IRQHandler+0xcd4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d013      	beq.n	800562c <HAL_DMA_IRQHandler+0xc60>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a26      	ldr	r2, [pc, #152]	; (80056a4 <HAL_DMA_IRQHandler+0xcd8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00e      	beq.n	800562c <HAL_DMA_IRQHandler+0xc60>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a25      	ldr	r2, [pc, #148]	; (80056a8 <HAL_DMA_IRQHandler+0xcdc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d009      	beq.n	800562c <HAL_DMA_IRQHandler+0xc60>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a23      	ldr	r2, [pc, #140]	; (80056ac <HAL_DMA_IRQHandler+0xce0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <HAL_DMA_IRQHandler+0xc60>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a22      	ldr	r2, [pc, #136]	; (80056b0 <HAL_DMA_IRQHandler+0xce4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d108      	bne.n	800563e <HAL_DMA_IRQHandler+0xc72>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0214 	bic.w	r2, r2, #20
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	e007      	b.n	800564e <HAL_DMA_IRQHandler+0xc82>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 020a 	bic.w	r2, r2, #10
 800564c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 80b8 	beq.w	80057d8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005670:	e0b2      	b.n	80057d8 <HAL_DMA_IRQHandler+0xe0c>
 8005672:	bf00      	nop
 8005674:	40020010 	.word	0x40020010
 8005678:	40020028 	.word	0x40020028
 800567c:	40020040 	.word	0x40020040
 8005680:	40020058 	.word	0x40020058
 8005684:	40020070 	.word	0x40020070
 8005688:	40020088 	.word	0x40020088
 800568c:	400200a0 	.word	0x400200a0
 8005690:	400200b8 	.word	0x400200b8
 8005694:	40020410 	.word	0x40020410
 8005698:	40020428 	.word	0x40020428
 800569c:	40020440 	.word	0x40020440
 80056a0:	40020458 	.word	0x40020458
 80056a4:	40020470 	.word	0x40020470
 80056a8:	40020488 	.word	0x40020488
 80056ac:	400204a0 	.word	0x400204a0
 80056b0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b8:	f003 031f 	and.w	r3, r3, #31
 80056bc:	2208      	movs	r2, #8
 80056be:	409a      	lsls	r2, r3
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	4013      	ands	r3, r2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 8088 	beq.w	80057da <HAL_DMA_IRQHandler+0xe0e>
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 8082 	beq.w	80057da <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a41      	ldr	r2, [pc, #260]	; (80057e0 <HAL_DMA_IRQHandler+0xe14>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d04a      	beq.n	8005776 <HAL_DMA_IRQHandler+0xdaa>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a3f      	ldr	r2, [pc, #252]	; (80057e4 <HAL_DMA_IRQHandler+0xe18>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d045      	beq.n	8005776 <HAL_DMA_IRQHandler+0xdaa>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a3e      	ldr	r2, [pc, #248]	; (80057e8 <HAL_DMA_IRQHandler+0xe1c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d040      	beq.n	8005776 <HAL_DMA_IRQHandler+0xdaa>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a3c      	ldr	r2, [pc, #240]	; (80057ec <HAL_DMA_IRQHandler+0xe20>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d03b      	beq.n	8005776 <HAL_DMA_IRQHandler+0xdaa>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a3b      	ldr	r2, [pc, #236]	; (80057f0 <HAL_DMA_IRQHandler+0xe24>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d036      	beq.n	8005776 <HAL_DMA_IRQHandler+0xdaa>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a39      	ldr	r2, [pc, #228]	; (80057f4 <HAL_DMA_IRQHandler+0xe28>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d031      	beq.n	8005776 <HAL_DMA_IRQHandler+0xdaa>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a38      	ldr	r2, [pc, #224]	; (80057f8 <HAL_DMA_IRQHandler+0xe2c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d02c      	beq.n	8005776 <HAL_DMA_IRQHandler+0xdaa>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a36      	ldr	r2, [pc, #216]	; (80057fc <HAL_DMA_IRQHandler+0xe30>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d027      	beq.n	8005776 <HAL_DMA_IRQHandler+0xdaa>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a35      	ldr	r2, [pc, #212]	; (8005800 <HAL_DMA_IRQHandler+0xe34>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d022      	beq.n	8005776 <HAL_DMA_IRQHandler+0xdaa>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a33      	ldr	r2, [pc, #204]	; (8005804 <HAL_DMA_IRQHandler+0xe38>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01d      	beq.n	8005776 <HAL_DMA_IRQHandler+0xdaa>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a32      	ldr	r2, [pc, #200]	; (8005808 <HAL_DMA_IRQHandler+0xe3c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d018      	beq.n	8005776 <HAL_DMA_IRQHandler+0xdaa>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a30      	ldr	r2, [pc, #192]	; (800580c <HAL_DMA_IRQHandler+0xe40>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <HAL_DMA_IRQHandler+0xdaa>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a2f      	ldr	r2, [pc, #188]	; (8005810 <HAL_DMA_IRQHandler+0xe44>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00e      	beq.n	8005776 <HAL_DMA_IRQHandler+0xdaa>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a2d      	ldr	r2, [pc, #180]	; (8005814 <HAL_DMA_IRQHandler+0xe48>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d009      	beq.n	8005776 <HAL_DMA_IRQHandler+0xdaa>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a2c      	ldr	r2, [pc, #176]	; (8005818 <HAL_DMA_IRQHandler+0xe4c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d004      	beq.n	8005776 <HAL_DMA_IRQHandler+0xdaa>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a2a      	ldr	r2, [pc, #168]	; (800581c <HAL_DMA_IRQHandler+0xe50>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d108      	bne.n	8005788 <HAL_DMA_IRQHandler+0xdbc>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 021c 	bic.w	r2, r2, #28
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	e007      	b.n	8005798 <HAL_DMA_IRQHandler+0xdcc>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 020e 	bic.w	r2, r2, #14
 8005796:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800579c:	f003 031f 	and.w	r3, r3, #31
 80057a0:	2201      	movs	r2, #1
 80057a2:	409a      	lsls	r2, r3
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d009      	beq.n	80057da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	4798      	blx	r3
 80057ce:	e004      	b.n	80057da <HAL_DMA_IRQHandler+0xe0e>
          return;
 80057d0:	bf00      	nop
 80057d2:	e002      	b.n	80057da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057d4:	bf00      	nop
 80057d6:	e000      	b.n	80057da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057d8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80057da:	3728      	adds	r7, #40	; 0x28
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40020010 	.word	0x40020010
 80057e4:	40020028 	.word	0x40020028
 80057e8:	40020040 	.word	0x40020040
 80057ec:	40020058 	.word	0x40020058
 80057f0:	40020070 	.word	0x40020070
 80057f4:	40020088 	.word	0x40020088
 80057f8:	400200a0 	.word	0x400200a0
 80057fc:	400200b8 	.word	0x400200b8
 8005800:	40020410 	.word	0x40020410
 8005804:	40020428 	.word	0x40020428
 8005808:	40020440 	.word	0x40020440
 800580c:	40020458 	.word	0x40020458
 8005810:	40020470 	.word	0x40020470
 8005814:	40020488 	.word	0x40020488
 8005818:	400204a0 	.word	0x400204a0
 800581c:	400204b8 	.word	0x400204b8

08005820 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005832:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005838:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a84      	ldr	r2, [pc, #528]	; (8005a50 <DMA_SetConfig+0x230>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d072      	beq.n	800592a <DMA_SetConfig+0x10a>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a82      	ldr	r2, [pc, #520]	; (8005a54 <DMA_SetConfig+0x234>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d06d      	beq.n	800592a <DMA_SetConfig+0x10a>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a81      	ldr	r2, [pc, #516]	; (8005a58 <DMA_SetConfig+0x238>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d068      	beq.n	800592a <DMA_SetConfig+0x10a>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a7f      	ldr	r2, [pc, #508]	; (8005a5c <DMA_SetConfig+0x23c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d063      	beq.n	800592a <DMA_SetConfig+0x10a>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a7e      	ldr	r2, [pc, #504]	; (8005a60 <DMA_SetConfig+0x240>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d05e      	beq.n	800592a <DMA_SetConfig+0x10a>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a7c      	ldr	r2, [pc, #496]	; (8005a64 <DMA_SetConfig+0x244>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d059      	beq.n	800592a <DMA_SetConfig+0x10a>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a7b      	ldr	r2, [pc, #492]	; (8005a68 <DMA_SetConfig+0x248>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d054      	beq.n	800592a <DMA_SetConfig+0x10a>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a79      	ldr	r2, [pc, #484]	; (8005a6c <DMA_SetConfig+0x24c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d04f      	beq.n	800592a <DMA_SetConfig+0x10a>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a78      	ldr	r2, [pc, #480]	; (8005a70 <DMA_SetConfig+0x250>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d04a      	beq.n	800592a <DMA_SetConfig+0x10a>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a76      	ldr	r2, [pc, #472]	; (8005a74 <DMA_SetConfig+0x254>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d045      	beq.n	800592a <DMA_SetConfig+0x10a>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a75      	ldr	r2, [pc, #468]	; (8005a78 <DMA_SetConfig+0x258>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d040      	beq.n	800592a <DMA_SetConfig+0x10a>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a73      	ldr	r2, [pc, #460]	; (8005a7c <DMA_SetConfig+0x25c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d03b      	beq.n	800592a <DMA_SetConfig+0x10a>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a72      	ldr	r2, [pc, #456]	; (8005a80 <DMA_SetConfig+0x260>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d036      	beq.n	800592a <DMA_SetConfig+0x10a>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a70      	ldr	r2, [pc, #448]	; (8005a84 <DMA_SetConfig+0x264>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d031      	beq.n	800592a <DMA_SetConfig+0x10a>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a6f      	ldr	r2, [pc, #444]	; (8005a88 <DMA_SetConfig+0x268>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d02c      	beq.n	800592a <DMA_SetConfig+0x10a>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a6d      	ldr	r2, [pc, #436]	; (8005a8c <DMA_SetConfig+0x26c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d027      	beq.n	800592a <DMA_SetConfig+0x10a>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a6c      	ldr	r2, [pc, #432]	; (8005a90 <DMA_SetConfig+0x270>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d022      	beq.n	800592a <DMA_SetConfig+0x10a>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a6a      	ldr	r2, [pc, #424]	; (8005a94 <DMA_SetConfig+0x274>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d01d      	beq.n	800592a <DMA_SetConfig+0x10a>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a69      	ldr	r2, [pc, #420]	; (8005a98 <DMA_SetConfig+0x278>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d018      	beq.n	800592a <DMA_SetConfig+0x10a>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a67      	ldr	r2, [pc, #412]	; (8005a9c <DMA_SetConfig+0x27c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d013      	beq.n	800592a <DMA_SetConfig+0x10a>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a66      	ldr	r2, [pc, #408]	; (8005aa0 <DMA_SetConfig+0x280>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d00e      	beq.n	800592a <DMA_SetConfig+0x10a>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a64      	ldr	r2, [pc, #400]	; (8005aa4 <DMA_SetConfig+0x284>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d009      	beq.n	800592a <DMA_SetConfig+0x10a>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a63      	ldr	r2, [pc, #396]	; (8005aa8 <DMA_SetConfig+0x288>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d004      	beq.n	800592a <DMA_SetConfig+0x10a>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a61      	ldr	r2, [pc, #388]	; (8005aac <DMA_SetConfig+0x28c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d101      	bne.n	800592e <DMA_SetConfig+0x10e>
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <DMA_SetConfig+0x110>
 800592e:	2300      	movs	r3, #0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00d      	beq.n	8005950 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800593c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005942:	2b00      	cmp	r3, #0
 8005944:	d004      	beq.n	8005950 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800594e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a3e      	ldr	r2, [pc, #248]	; (8005a50 <DMA_SetConfig+0x230>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d04a      	beq.n	80059f0 <DMA_SetConfig+0x1d0>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a3d      	ldr	r2, [pc, #244]	; (8005a54 <DMA_SetConfig+0x234>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d045      	beq.n	80059f0 <DMA_SetConfig+0x1d0>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a3b      	ldr	r2, [pc, #236]	; (8005a58 <DMA_SetConfig+0x238>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d040      	beq.n	80059f0 <DMA_SetConfig+0x1d0>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a3a      	ldr	r2, [pc, #232]	; (8005a5c <DMA_SetConfig+0x23c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d03b      	beq.n	80059f0 <DMA_SetConfig+0x1d0>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a38      	ldr	r2, [pc, #224]	; (8005a60 <DMA_SetConfig+0x240>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d036      	beq.n	80059f0 <DMA_SetConfig+0x1d0>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a37      	ldr	r2, [pc, #220]	; (8005a64 <DMA_SetConfig+0x244>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d031      	beq.n	80059f0 <DMA_SetConfig+0x1d0>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a35      	ldr	r2, [pc, #212]	; (8005a68 <DMA_SetConfig+0x248>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d02c      	beq.n	80059f0 <DMA_SetConfig+0x1d0>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a34      	ldr	r2, [pc, #208]	; (8005a6c <DMA_SetConfig+0x24c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d027      	beq.n	80059f0 <DMA_SetConfig+0x1d0>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a32      	ldr	r2, [pc, #200]	; (8005a70 <DMA_SetConfig+0x250>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d022      	beq.n	80059f0 <DMA_SetConfig+0x1d0>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a31      	ldr	r2, [pc, #196]	; (8005a74 <DMA_SetConfig+0x254>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d01d      	beq.n	80059f0 <DMA_SetConfig+0x1d0>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a2f      	ldr	r2, [pc, #188]	; (8005a78 <DMA_SetConfig+0x258>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d018      	beq.n	80059f0 <DMA_SetConfig+0x1d0>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a2e      	ldr	r2, [pc, #184]	; (8005a7c <DMA_SetConfig+0x25c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d013      	beq.n	80059f0 <DMA_SetConfig+0x1d0>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a2c      	ldr	r2, [pc, #176]	; (8005a80 <DMA_SetConfig+0x260>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00e      	beq.n	80059f0 <DMA_SetConfig+0x1d0>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a2b      	ldr	r2, [pc, #172]	; (8005a84 <DMA_SetConfig+0x264>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d009      	beq.n	80059f0 <DMA_SetConfig+0x1d0>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a29      	ldr	r2, [pc, #164]	; (8005a88 <DMA_SetConfig+0x268>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d004      	beq.n	80059f0 <DMA_SetConfig+0x1d0>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a28      	ldr	r2, [pc, #160]	; (8005a8c <DMA_SetConfig+0x26c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d101      	bne.n	80059f4 <DMA_SetConfig+0x1d4>
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <DMA_SetConfig+0x1d6>
 80059f4:	2300      	movs	r3, #0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d05a      	beq.n	8005ab0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fe:	f003 031f 	and.w	r3, r3, #31
 8005a02:	223f      	movs	r2, #63	; 0x3f
 8005a04:	409a      	lsls	r2, r3
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a18:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	2b40      	cmp	r3, #64	; 0x40
 8005a28:	d108      	bne.n	8005a3c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005a3a:	e087      	b.n	8005b4c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	60da      	str	r2, [r3, #12]
}
 8005a4c:	e07e      	b.n	8005b4c <DMA_SetConfig+0x32c>
 8005a4e:	bf00      	nop
 8005a50:	40020010 	.word	0x40020010
 8005a54:	40020028 	.word	0x40020028
 8005a58:	40020040 	.word	0x40020040
 8005a5c:	40020058 	.word	0x40020058
 8005a60:	40020070 	.word	0x40020070
 8005a64:	40020088 	.word	0x40020088
 8005a68:	400200a0 	.word	0x400200a0
 8005a6c:	400200b8 	.word	0x400200b8
 8005a70:	40020410 	.word	0x40020410
 8005a74:	40020428 	.word	0x40020428
 8005a78:	40020440 	.word	0x40020440
 8005a7c:	40020458 	.word	0x40020458
 8005a80:	40020470 	.word	0x40020470
 8005a84:	40020488 	.word	0x40020488
 8005a88:	400204a0 	.word	0x400204a0
 8005a8c:	400204b8 	.word	0x400204b8
 8005a90:	58025408 	.word	0x58025408
 8005a94:	5802541c 	.word	0x5802541c
 8005a98:	58025430 	.word	0x58025430
 8005a9c:	58025444 	.word	0x58025444
 8005aa0:	58025458 	.word	0x58025458
 8005aa4:	5802546c 	.word	0x5802546c
 8005aa8:	58025480 	.word	0x58025480
 8005aac:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a28      	ldr	r2, [pc, #160]	; (8005b58 <DMA_SetConfig+0x338>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d022      	beq.n	8005b00 <DMA_SetConfig+0x2e0>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a27      	ldr	r2, [pc, #156]	; (8005b5c <DMA_SetConfig+0x33c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d01d      	beq.n	8005b00 <DMA_SetConfig+0x2e0>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a25      	ldr	r2, [pc, #148]	; (8005b60 <DMA_SetConfig+0x340>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d018      	beq.n	8005b00 <DMA_SetConfig+0x2e0>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a24      	ldr	r2, [pc, #144]	; (8005b64 <DMA_SetConfig+0x344>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d013      	beq.n	8005b00 <DMA_SetConfig+0x2e0>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a22      	ldr	r2, [pc, #136]	; (8005b68 <DMA_SetConfig+0x348>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d00e      	beq.n	8005b00 <DMA_SetConfig+0x2e0>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a21      	ldr	r2, [pc, #132]	; (8005b6c <DMA_SetConfig+0x34c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d009      	beq.n	8005b00 <DMA_SetConfig+0x2e0>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a1f      	ldr	r2, [pc, #124]	; (8005b70 <DMA_SetConfig+0x350>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d004      	beq.n	8005b00 <DMA_SetConfig+0x2e0>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a1e      	ldr	r2, [pc, #120]	; (8005b74 <DMA_SetConfig+0x354>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d101      	bne.n	8005b04 <DMA_SetConfig+0x2e4>
 8005b00:	2301      	movs	r3, #1
 8005b02:	e000      	b.n	8005b06 <DMA_SetConfig+0x2e6>
 8005b04:	2300      	movs	r3, #0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d020      	beq.n	8005b4c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0e:	f003 031f 	and.w	r3, r3, #31
 8005b12:	2201      	movs	r2, #1
 8005b14:	409a      	lsls	r2, r3
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	2b40      	cmp	r3, #64	; 0x40
 8005b28:	d108      	bne.n	8005b3c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	60da      	str	r2, [r3, #12]
}
 8005b3a:	e007      	b.n	8005b4c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	60da      	str	r2, [r3, #12]
}
 8005b4c:	bf00      	nop
 8005b4e:	371c      	adds	r7, #28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	58025408 	.word	0x58025408
 8005b5c:	5802541c 	.word	0x5802541c
 8005b60:	58025430 	.word	0x58025430
 8005b64:	58025444 	.word	0x58025444
 8005b68:	58025458 	.word	0x58025458
 8005b6c:	5802546c 	.word	0x5802546c
 8005b70:	58025480 	.word	0x58025480
 8005b74:	58025494 	.word	0x58025494

08005b78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a42      	ldr	r2, [pc, #264]	; (8005c90 <DMA_CalcBaseAndBitshift+0x118>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d04a      	beq.n	8005c20 <DMA_CalcBaseAndBitshift+0xa8>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a41      	ldr	r2, [pc, #260]	; (8005c94 <DMA_CalcBaseAndBitshift+0x11c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d045      	beq.n	8005c20 <DMA_CalcBaseAndBitshift+0xa8>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a3f      	ldr	r2, [pc, #252]	; (8005c98 <DMA_CalcBaseAndBitshift+0x120>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d040      	beq.n	8005c20 <DMA_CalcBaseAndBitshift+0xa8>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a3e      	ldr	r2, [pc, #248]	; (8005c9c <DMA_CalcBaseAndBitshift+0x124>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d03b      	beq.n	8005c20 <DMA_CalcBaseAndBitshift+0xa8>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a3c      	ldr	r2, [pc, #240]	; (8005ca0 <DMA_CalcBaseAndBitshift+0x128>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d036      	beq.n	8005c20 <DMA_CalcBaseAndBitshift+0xa8>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a3b      	ldr	r2, [pc, #236]	; (8005ca4 <DMA_CalcBaseAndBitshift+0x12c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d031      	beq.n	8005c20 <DMA_CalcBaseAndBitshift+0xa8>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a39      	ldr	r2, [pc, #228]	; (8005ca8 <DMA_CalcBaseAndBitshift+0x130>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d02c      	beq.n	8005c20 <DMA_CalcBaseAndBitshift+0xa8>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a38      	ldr	r2, [pc, #224]	; (8005cac <DMA_CalcBaseAndBitshift+0x134>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d027      	beq.n	8005c20 <DMA_CalcBaseAndBitshift+0xa8>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a36      	ldr	r2, [pc, #216]	; (8005cb0 <DMA_CalcBaseAndBitshift+0x138>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d022      	beq.n	8005c20 <DMA_CalcBaseAndBitshift+0xa8>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a35      	ldr	r2, [pc, #212]	; (8005cb4 <DMA_CalcBaseAndBitshift+0x13c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d01d      	beq.n	8005c20 <DMA_CalcBaseAndBitshift+0xa8>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a33      	ldr	r2, [pc, #204]	; (8005cb8 <DMA_CalcBaseAndBitshift+0x140>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d018      	beq.n	8005c20 <DMA_CalcBaseAndBitshift+0xa8>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a32      	ldr	r2, [pc, #200]	; (8005cbc <DMA_CalcBaseAndBitshift+0x144>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d013      	beq.n	8005c20 <DMA_CalcBaseAndBitshift+0xa8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a30      	ldr	r2, [pc, #192]	; (8005cc0 <DMA_CalcBaseAndBitshift+0x148>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00e      	beq.n	8005c20 <DMA_CalcBaseAndBitshift+0xa8>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a2f      	ldr	r2, [pc, #188]	; (8005cc4 <DMA_CalcBaseAndBitshift+0x14c>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d009      	beq.n	8005c20 <DMA_CalcBaseAndBitshift+0xa8>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a2d      	ldr	r2, [pc, #180]	; (8005cc8 <DMA_CalcBaseAndBitshift+0x150>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d004      	beq.n	8005c20 <DMA_CalcBaseAndBitshift+0xa8>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a2c      	ldr	r2, [pc, #176]	; (8005ccc <DMA_CalcBaseAndBitshift+0x154>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d101      	bne.n	8005c24 <DMA_CalcBaseAndBitshift+0xac>
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <DMA_CalcBaseAndBitshift+0xae>
 8005c24:	2300      	movs	r3, #0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d024      	beq.n	8005c74 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	3b10      	subs	r3, #16
 8005c32:	4a27      	ldr	r2, [pc, #156]	; (8005cd0 <DMA_CalcBaseAndBitshift+0x158>)
 8005c34:	fba2 2303 	umull	r2, r3, r2, r3
 8005c38:	091b      	lsrs	r3, r3, #4
 8005c3a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	4a24      	ldr	r2, [pc, #144]	; (8005cd4 <DMA_CalcBaseAndBitshift+0x15c>)
 8005c44:	5cd3      	ldrb	r3, [r2, r3]
 8005c46:	461a      	mov	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d908      	bls.n	8005c64 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	461a      	mov	r2, r3
 8005c58:	4b1f      	ldr	r3, [pc, #124]	; (8005cd8 <DMA_CalcBaseAndBitshift+0x160>)
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	1d1a      	adds	r2, r3, #4
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	659a      	str	r2, [r3, #88]	; 0x58
 8005c62:	e00d      	b.n	8005c80 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4b1b      	ldr	r3, [pc, #108]	; (8005cd8 <DMA_CalcBaseAndBitshift+0x160>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	6593      	str	r3, [r2, #88]	; 0x58
 8005c72:	e005      	b.n	8005c80 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	40020010 	.word	0x40020010
 8005c94:	40020028 	.word	0x40020028
 8005c98:	40020040 	.word	0x40020040
 8005c9c:	40020058 	.word	0x40020058
 8005ca0:	40020070 	.word	0x40020070
 8005ca4:	40020088 	.word	0x40020088
 8005ca8:	400200a0 	.word	0x400200a0
 8005cac:	400200b8 	.word	0x400200b8
 8005cb0:	40020410 	.word	0x40020410
 8005cb4:	40020428 	.word	0x40020428
 8005cb8:	40020440 	.word	0x40020440
 8005cbc:	40020458 	.word	0x40020458
 8005cc0:	40020470 	.word	0x40020470
 8005cc4:	40020488 	.word	0x40020488
 8005cc8:	400204a0 	.word	0x400204a0
 8005ccc:	400204b8 	.word	0x400204b8
 8005cd0:	aaaaaaab 	.word	0xaaaaaaab
 8005cd4:	0800b980 	.word	0x0800b980
 8005cd8:	fffffc00 	.word	0xfffffc00

08005cdc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d120      	bne.n	8005d32 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d858      	bhi.n	8005daa <DMA_CheckFifoParam+0xce>
 8005cf8:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <DMA_CheckFifoParam+0x24>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d23 	.word	0x08005d23
 8005d08:	08005d11 	.word	0x08005d11
 8005d0c:	08005dab 	.word	0x08005dab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d048      	beq.n	8005dae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d20:	e045      	b.n	8005dae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d2a:	d142      	bne.n	8005db2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d30:	e03f      	b.n	8005db2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d3a:	d123      	bne.n	8005d84 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d838      	bhi.n	8005db6 <DMA_CheckFifoParam+0xda>
 8005d44:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <DMA_CheckFifoParam+0x70>)
 8005d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005d5d 	.word	0x08005d5d
 8005d50:	08005d63 	.word	0x08005d63
 8005d54:	08005d5d 	.word	0x08005d5d
 8005d58:	08005d75 	.word	0x08005d75
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	73fb      	strb	r3, [r7, #15]
        break;
 8005d60:	e030      	b.n	8005dc4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d025      	beq.n	8005dba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d72:	e022      	b.n	8005dba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d7c:	d11f      	bne.n	8005dbe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d82:	e01c      	b.n	8005dbe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d902      	bls.n	8005d92 <DMA_CheckFifoParam+0xb6>
 8005d8c:	2b03      	cmp	r3, #3
 8005d8e:	d003      	beq.n	8005d98 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005d90:	e018      	b.n	8005dc4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	73fb      	strb	r3, [r7, #15]
        break;
 8005d96:	e015      	b.n	8005dc4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00e      	beq.n	8005dc2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	73fb      	strb	r3, [r7, #15]
    break;
 8005da8:	e00b      	b.n	8005dc2 <DMA_CheckFifoParam+0xe6>
        break;
 8005daa:	bf00      	nop
 8005dac:	e00a      	b.n	8005dc4 <DMA_CheckFifoParam+0xe8>
        break;
 8005dae:	bf00      	nop
 8005db0:	e008      	b.n	8005dc4 <DMA_CheckFifoParam+0xe8>
        break;
 8005db2:	bf00      	nop
 8005db4:	e006      	b.n	8005dc4 <DMA_CheckFifoParam+0xe8>
        break;
 8005db6:	bf00      	nop
 8005db8:	e004      	b.n	8005dc4 <DMA_CheckFifoParam+0xe8>
        break;
 8005dba:	bf00      	nop
 8005dbc:	e002      	b.n	8005dc4 <DMA_CheckFifoParam+0xe8>
        break;
 8005dbe:	bf00      	nop
 8005dc0:	e000      	b.n	8005dc4 <DMA_CheckFifoParam+0xe8>
    break;
 8005dc2:	bf00      	nop
    }
  }

  return status;
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop

08005dd4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a38      	ldr	r2, [pc, #224]	; (8005ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d022      	beq.n	8005e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a36      	ldr	r2, [pc, #216]	; (8005ecc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d01d      	beq.n	8005e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a35      	ldr	r2, [pc, #212]	; (8005ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d018      	beq.n	8005e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a33      	ldr	r2, [pc, #204]	; (8005ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d013      	beq.n	8005e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a32      	ldr	r2, [pc, #200]	; (8005ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00e      	beq.n	8005e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a30      	ldr	r2, [pc, #192]	; (8005edc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d009      	beq.n	8005e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a2f      	ldr	r2, [pc, #188]	; (8005ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d004      	beq.n	8005e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a2d      	ldr	r2, [pc, #180]	; (8005ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d101      	bne.n	8005e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e000      	b.n	8005e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005e36:	2300      	movs	r3, #0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d01a      	beq.n	8005e72 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	3b08      	subs	r3, #8
 8005e44:	4a28      	ldr	r2, [pc, #160]	; (8005ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005e46:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4a:	091b      	lsrs	r3, r3, #4
 8005e4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	4b26      	ldr	r3, [pc, #152]	; (8005eec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005e52:	4413      	add	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	461a      	mov	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a24      	ldr	r2, [pc, #144]	; (8005ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005e60:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f003 031f 	and.w	r3, r3, #31
 8005e68:	2201      	movs	r2, #1
 8005e6a:	409a      	lsls	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005e70:	e024      	b.n	8005ebc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	3b10      	subs	r3, #16
 8005e7a:	4a1e      	ldr	r2, [pc, #120]	; (8005ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e80:	091b      	lsrs	r3, r3, #4
 8005e82:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4a1c      	ldr	r2, [pc, #112]	; (8005ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d806      	bhi.n	8005e9a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	4a1b      	ldr	r2, [pc, #108]	; (8005efc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d902      	bls.n	8005e9a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3308      	adds	r3, #8
 8005e98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4b18      	ldr	r3, [pc, #96]	; (8005f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005e9e:	4413      	add	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a16      	ldr	r2, [pc, #88]	; (8005f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005eac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f003 031f 	and.w	r3, r3, #31
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	409a      	lsls	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005ebc:	bf00      	nop
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	58025408 	.word	0x58025408
 8005ecc:	5802541c 	.word	0x5802541c
 8005ed0:	58025430 	.word	0x58025430
 8005ed4:	58025444 	.word	0x58025444
 8005ed8:	58025458 	.word	0x58025458
 8005edc:	5802546c 	.word	0x5802546c
 8005ee0:	58025480 	.word	0x58025480
 8005ee4:	58025494 	.word	0x58025494
 8005ee8:	cccccccd 	.word	0xcccccccd
 8005eec:	16009600 	.word	0x16009600
 8005ef0:	58025880 	.word	0x58025880
 8005ef4:	aaaaaaab 	.word	0xaaaaaaab
 8005ef8:	400204b8 	.word	0x400204b8
 8005efc:	4002040f 	.word	0x4002040f
 8005f00:	10008200 	.word	0x10008200
 8005f04:	40020880 	.word	0x40020880

08005f08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d04a      	beq.n	8005fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d847      	bhi.n	8005fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a25      	ldr	r2, [pc, #148]	; (8005fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d022      	beq.n	8005f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a24      	ldr	r2, [pc, #144]	; (8005fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d01d      	beq.n	8005f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a22      	ldr	r2, [pc, #136]	; (8005fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d018      	beq.n	8005f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a21      	ldr	r2, [pc, #132]	; (8005fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d013      	beq.n	8005f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a1f      	ldr	r2, [pc, #124]	; (8005fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00e      	beq.n	8005f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a1e      	ldr	r2, [pc, #120]	; (8005fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d009      	beq.n	8005f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a1c      	ldr	r2, [pc, #112]	; (8005fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d004      	beq.n	8005f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a1b      	ldr	r2, [pc, #108]	; (8005fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d101      	bne.n	8005f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005f74:	2301      	movs	r3, #1
 8005f76:	e000      	b.n	8005f7a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4b17      	ldr	r3, [pc, #92]	; (8005fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005f82:	4413      	add	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	461a      	mov	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a15      	ldr	r2, [pc, #84]	; (8005fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005f90:	671a      	str	r2, [r3, #112]	; 0x70
 8005f92:	e009      	b.n	8005fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	4b14      	ldr	r3, [pc, #80]	; (8005fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005f98:	4413      	add	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a11      	ldr	r2, [pc, #68]	; (8005fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005fa6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	2201      	movs	r2, #1
 8005fae:	409a      	lsls	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	58025408 	.word	0x58025408
 8005fc4:	5802541c 	.word	0x5802541c
 8005fc8:	58025430 	.word	0x58025430
 8005fcc:	58025444 	.word	0x58025444
 8005fd0:	58025458 	.word	0x58025458
 8005fd4:	5802546c 	.word	0x5802546c
 8005fd8:	58025480 	.word	0x58025480
 8005fdc:	58025494 	.word	0x58025494
 8005fe0:	1600963f 	.word	0x1600963f
 8005fe4:	58025940 	.word	0x58025940
 8005fe8:	1000823f 	.word	0x1000823f
 8005fec:	40020940 	.word	0x40020940

08005ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b089      	sub	sp, #36	; 0x24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005ffe:	4b86      	ldr	r3, [pc, #536]	; (8006218 <HAL_GPIO_Init+0x228>)
 8006000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006002:	e18c      	b.n	800631e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	2101      	movs	r1, #1
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	fa01 f303 	lsl.w	r3, r1, r3
 8006010:	4013      	ands	r3, r2
 8006012:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 817e 	beq.w	8006318 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f003 0303 	and.w	r3, r3, #3
 8006024:	2b01      	cmp	r3, #1
 8006026:	d005      	beq.n	8006034 <HAL_GPIO_Init+0x44>
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f003 0303 	and.w	r3, r3, #3
 8006030:	2b02      	cmp	r3, #2
 8006032:	d130      	bne.n	8006096 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	2203      	movs	r2, #3
 8006040:	fa02 f303 	lsl.w	r3, r2, r3
 8006044:	43db      	mvns	r3, r3
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	4013      	ands	r3, r2
 800604a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	fa02 f303 	lsl.w	r3, r2, r3
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	4313      	orrs	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800606a:	2201      	movs	r2, #1
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	fa02 f303 	lsl.w	r3, r2, r3
 8006072:	43db      	mvns	r3, r3
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	4013      	ands	r3, r2
 8006078:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	091b      	lsrs	r3, r3, #4
 8006080:	f003 0201 	and.w	r2, r3, #1
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	fa02 f303 	lsl.w	r3, r2, r3
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	4313      	orrs	r3, r2
 800608e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d017      	beq.n	80060d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	2203      	movs	r2, #3
 80060ae:	fa02 f303 	lsl.w	r3, r2, r3
 80060b2:	43db      	mvns	r3, r3
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	4013      	ands	r3, r2
 80060b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	689a      	ldr	r2, [r3, #8]
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	fa02 f303 	lsl.w	r3, r2, r3
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d123      	bne.n	8006126 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	08da      	lsrs	r2, r3, #3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	3208      	adds	r2, #8
 80060e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f003 0307 	and.w	r3, r3, #7
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	220f      	movs	r2, #15
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	43db      	mvns	r3, r3
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	4013      	ands	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	691a      	ldr	r2, [r3, #16]
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	fa02 f303 	lsl.w	r3, r2, r3
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	4313      	orrs	r3, r2
 8006116:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	08da      	lsrs	r2, r3, #3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3208      	adds	r2, #8
 8006120:	69b9      	ldr	r1, [r7, #24]
 8006122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	2203      	movs	r2, #3
 8006132:	fa02 f303 	lsl.w	r3, r2, r3
 8006136:	43db      	mvns	r3, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	4013      	ands	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f003 0203 	and.w	r2, r3, #3
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	fa02 f303 	lsl.w	r3, r2, r3
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	4313      	orrs	r3, r2
 8006152:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 80d8 	beq.w	8006318 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006168:	4b2c      	ldr	r3, [pc, #176]	; (800621c <HAL_GPIO_Init+0x22c>)
 800616a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800616e:	4a2b      	ldr	r2, [pc, #172]	; (800621c <HAL_GPIO_Init+0x22c>)
 8006170:	f043 0302 	orr.w	r3, r3, #2
 8006174:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006178:	4b28      	ldr	r3, [pc, #160]	; (800621c <HAL_GPIO_Init+0x22c>)
 800617a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006186:	4a26      	ldr	r2, [pc, #152]	; (8006220 <HAL_GPIO_Init+0x230>)
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	089b      	lsrs	r3, r3, #2
 800618c:	3302      	adds	r3, #2
 800618e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	220f      	movs	r2, #15
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	43db      	mvns	r3, r3
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	4013      	ands	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a1d      	ldr	r2, [pc, #116]	; (8006224 <HAL_GPIO_Init+0x234>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d04a      	beq.n	8006248 <HAL_GPIO_Init+0x258>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a1c      	ldr	r2, [pc, #112]	; (8006228 <HAL_GPIO_Init+0x238>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d02b      	beq.n	8006212 <HAL_GPIO_Init+0x222>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a1b      	ldr	r2, [pc, #108]	; (800622c <HAL_GPIO_Init+0x23c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d025      	beq.n	800620e <HAL_GPIO_Init+0x21e>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a1a      	ldr	r2, [pc, #104]	; (8006230 <HAL_GPIO_Init+0x240>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d01f      	beq.n	800620a <HAL_GPIO_Init+0x21a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a19      	ldr	r2, [pc, #100]	; (8006234 <HAL_GPIO_Init+0x244>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d019      	beq.n	8006206 <HAL_GPIO_Init+0x216>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a18      	ldr	r2, [pc, #96]	; (8006238 <HAL_GPIO_Init+0x248>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <HAL_GPIO_Init+0x212>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a17      	ldr	r2, [pc, #92]	; (800623c <HAL_GPIO_Init+0x24c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00d      	beq.n	80061fe <HAL_GPIO_Init+0x20e>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a16      	ldr	r2, [pc, #88]	; (8006240 <HAL_GPIO_Init+0x250>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d007      	beq.n	80061fa <HAL_GPIO_Init+0x20a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a15      	ldr	r2, [pc, #84]	; (8006244 <HAL_GPIO_Init+0x254>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d101      	bne.n	80061f6 <HAL_GPIO_Init+0x206>
 80061f2:	2309      	movs	r3, #9
 80061f4:	e029      	b.n	800624a <HAL_GPIO_Init+0x25a>
 80061f6:	230a      	movs	r3, #10
 80061f8:	e027      	b.n	800624a <HAL_GPIO_Init+0x25a>
 80061fa:	2307      	movs	r3, #7
 80061fc:	e025      	b.n	800624a <HAL_GPIO_Init+0x25a>
 80061fe:	2306      	movs	r3, #6
 8006200:	e023      	b.n	800624a <HAL_GPIO_Init+0x25a>
 8006202:	2305      	movs	r3, #5
 8006204:	e021      	b.n	800624a <HAL_GPIO_Init+0x25a>
 8006206:	2304      	movs	r3, #4
 8006208:	e01f      	b.n	800624a <HAL_GPIO_Init+0x25a>
 800620a:	2303      	movs	r3, #3
 800620c:	e01d      	b.n	800624a <HAL_GPIO_Init+0x25a>
 800620e:	2302      	movs	r3, #2
 8006210:	e01b      	b.n	800624a <HAL_GPIO_Init+0x25a>
 8006212:	2301      	movs	r3, #1
 8006214:	e019      	b.n	800624a <HAL_GPIO_Init+0x25a>
 8006216:	bf00      	nop
 8006218:	58000080 	.word	0x58000080
 800621c:	58024400 	.word	0x58024400
 8006220:	58000400 	.word	0x58000400
 8006224:	58020000 	.word	0x58020000
 8006228:	58020400 	.word	0x58020400
 800622c:	58020800 	.word	0x58020800
 8006230:	58020c00 	.word	0x58020c00
 8006234:	58021000 	.word	0x58021000
 8006238:	58021400 	.word	0x58021400
 800623c:	58021800 	.word	0x58021800
 8006240:	58021c00 	.word	0x58021c00
 8006244:	58022400 	.word	0x58022400
 8006248:	2300      	movs	r3, #0
 800624a:	69fa      	ldr	r2, [r7, #28]
 800624c:	f002 0203 	and.w	r2, r2, #3
 8006250:	0092      	lsls	r2, r2, #2
 8006252:	4093      	lsls	r3, r2
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	4313      	orrs	r3, r2
 8006258:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800625a:	4938      	ldr	r1, [pc, #224]	; (800633c <HAL_GPIO_Init+0x34c>)
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	089b      	lsrs	r3, r3, #2
 8006260:	3302      	adds	r3, #2
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	43db      	mvns	r3, r3
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	4013      	ands	r3, r2
 8006278:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800628e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	43db      	mvns	r3, r3
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	4013      	ands	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80062bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	43db      	mvns	r3, r3
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	4013      	ands	r3, r2
 80062d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	43db      	mvns	r3, r3
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	4013      	ands	r3, r2
 80062fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	3301      	adds	r3, #1
 800631c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	fa22 f303 	lsr.w	r3, r2, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	f47f ae6b 	bne.w	8006004 <HAL_GPIO_Init+0x14>
  }
}
 800632e:	bf00      	nop
 8006330:	bf00      	nop
 8006332:	3724      	adds	r7, #36	; 0x24
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	58000400 	.word	0x58000400

08006340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	807b      	strh	r3, [r7, #2]
 800634c:	4613      	mov	r3, r2
 800634e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006350:	787b      	ldrb	r3, [r7, #1]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006356:	887a      	ldrh	r2, [r7, #2]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800635c:	e003      	b.n	8006366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800635e:	887b      	ldrh	r3, [r7, #2]
 8006360:	041a      	lsls	r2, r3, #16
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	619a      	str	r2, [r3, #24]
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
	...

08006374 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800637c:	4b19      	ldr	r3, [pc, #100]	; (80063e4 <HAL_PWREx_ConfigSupply+0x70>)
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b04      	cmp	r3, #4
 8006386:	d00a      	beq.n	800639e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006388:	4b16      	ldr	r3, [pc, #88]	; (80063e4 <HAL_PWREx_ConfigSupply+0x70>)
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	429a      	cmp	r2, r3
 8006394:	d001      	beq.n	800639a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e01f      	b.n	80063da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	e01d      	b.n	80063da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800639e:	4b11      	ldr	r3, [pc, #68]	; (80063e4 <HAL_PWREx_ConfigSupply+0x70>)
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f023 0207 	bic.w	r2, r3, #7
 80063a6:	490f      	ldr	r1, [pc, #60]	; (80063e4 <HAL_PWREx_ConfigSupply+0x70>)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80063ae:	f7fa fed7 	bl	8001160 <HAL_GetTick>
 80063b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063b4:	e009      	b.n	80063ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80063b6:	f7fa fed3 	bl	8001160 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063c4:	d901      	bls.n	80063ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e007      	b.n	80063da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063ca:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <HAL_PWREx_ConfigSupply+0x70>)
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063d6:	d1ee      	bne.n	80063b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	58024800 	.word	0x58024800

080063e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b08c      	sub	sp, #48	; 0x30
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e397      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 8087 	beq.w	8006516 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006408:	4b9e      	ldr	r3, [pc, #632]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006410:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006412:	4b9c      	ldr	r3, [pc, #624]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 8006414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006416:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641a:	2b10      	cmp	r3, #16
 800641c:	d007      	beq.n	800642e <HAL_RCC_OscConfig+0x46>
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	2b18      	cmp	r3, #24
 8006422:	d110      	bne.n	8006446 <HAL_RCC_OscConfig+0x5e>
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	f003 0303 	and.w	r3, r3, #3
 800642a:	2b02      	cmp	r3, #2
 800642c:	d10b      	bne.n	8006446 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800642e:	4b95      	ldr	r3, [pc, #596]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d06c      	beq.n	8006514 <HAL_RCC_OscConfig+0x12c>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d168      	bne.n	8006514 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e371      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800644e:	d106      	bne.n	800645e <HAL_RCC_OscConfig+0x76>
 8006450:	4b8c      	ldr	r3, [pc, #560]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a8b      	ldr	r2, [pc, #556]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 8006456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800645a:	6013      	str	r3, [r2, #0]
 800645c:	e02e      	b.n	80064bc <HAL_RCC_OscConfig+0xd4>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10c      	bne.n	8006480 <HAL_RCC_OscConfig+0x98>
 8006466:	4b87      	ldr	r3, [pc, #540]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a86      	ldr	r2, [pc, #536]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 800646c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	4b84      	ldr	r3, [pc, #528]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a83      	ldr	r2, [pc, #524]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 8006478:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	e01d      	b.n	80064bc <HAL_RCC_OscConfig+0xd4>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006488:	d10c      	bne.n	80064a4 <HAL_RCC_OscConfig+0xbc>
 800648a:	4b7e      	ldr	r3, [pc, #504]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a7d      	ldr	r2, [pc, #500]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 8006490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	4b7b      	ldr	r3, [pc, #492]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a7a      	ldr	r2, [pc, #488]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 800649c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	e00b      	b.n	80064bc <HAL_RCC_OscConfig+0xd4>
 80064a4:	4b77      	ldr	r3, [pc, #476]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a76      	ldr	r2, [pc, #472]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 80064aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ae:	6013      	str	r3, [r2, #0]
 80064b0:	4b74      	ldr	r3, [pc, #464]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a73      	ldr	r2, [pc, #460]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 80064b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d013      	beq.n	80064ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c4:	f7fa fe4c 	bl	8001160 <HAL_GetTick>
 80064c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064ca:	e008      	b.n	80064de <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064cc:	f7fa fe48 	bl	8001160 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b64      	cmp	r3, #100	; 0x64
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e325      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064de:	4b69      	ldr	r3, [pc, #420]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d0f0      	beq.n	80064cc <HAL_RCC_OscConfig+0xe4>
 80064ea:	e014      	b.n	8006516 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ec:	f7fa fe38 	bl	8001160 <HAL_GetTick>
 80064f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064f4:	f7fa fe34 	bl	8001160 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b64      	cmp	r3, #100	; 0x64
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e311      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006506:	4b5f      	ldr	r3, [pc, #380]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1f0      	bne.n	80064f4 <HAL_RCC_OscConfig+0x10c>
 8006512:	e000      	b.n	8006516 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	f000 808a 	beq.w	8006638 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006524:	4b57      	ldr	r3, [pc, #348]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800652c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800652e:	4b55      	ldr	r3, [pc, #340]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 8006530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006532:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d007      	beq.n	800654a <HAL_RCC_OscConfig+0x162>
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	2b18      	cmp	r3, #24
 800653e:	d137      	bne.n	80065b0 <HAL_RCC_OscConfig+0x1c8>
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	f003 0303 	and.w	r3, r3, #3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d132      	bne.n	80065b0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800654a:	4b4e      	ldr	r3, [pc, #312]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0304 	and.w	r3, r3, #4
 8006552:	2b00      	cmp	r3, #0
 8006554:	d005      	beq.n	8006562 <HAL_RCC_OscConfig+0x17a>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e2e3      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006562:	4b48      	ldr	r3, [pc, #288]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f023 0219 	bic.w	r2, r3, #25
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	4945      	ldr	r1, [pc, #276]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 8006570:	4313      	orrs	r3, r2
 8006572:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006574:	f7fa fdf4 	bl	8001160 <HAL_GetTick>
 8006578:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800657a:	e008      	b.n	800658e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800657c:	f7fa fdf0 	bl	8001160 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b02      	cmp	r3, #2
 8006588:	d901      	bls.n	800658e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e2cd      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800658e:	4b3d      	ldr	r3, [pc, #244]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0304 	and.w	r3, r3, #4
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0f0      	beq.n	800657c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800659a:	4b3a      	ldr	r3, [pc, #232]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	061b      	lsls	r3, r3, #24
 80065a8:	4936      	ldr	r1, [pc, #216]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065ae:	e043      	b.n	8006638 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d026      	beq.n	8006606 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065b8:	4b32      	ldr	r3, [pc, #200]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f023 0219 	bic.w	r2, r3, #25
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	492f      	ldr	r1, [pc, #188]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ca:	f7fa fdc9 	bl	8001160 <HAL_GetTick>
 80065ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065d0:	e008      	b.n	80065e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065d2:	f7fa fdc5 	bl	8001160 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d901      	bls.n	80065e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e2a2      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065e4:	4b27      	ldr	r3, [pc, #156]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0f0      	beq.n	80065d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065f0:	4b24      	ldr	r3, [pc, #144]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	061b      	lsls	r3, r3, #24
 80065fe:	4921      	ldr	r1, [pc, #132]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 8006600:	4313      	orrs	r3, r2
 8006602:	604b      	str	r3, [r1, #4]
 8006604:	e018      	b.n	8006638 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006606:	4b1f      	ldr	r3, [pc, #124]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a1e      	ldr	r2, [pc, #120]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 800660c:	f023 0301 	bic.w	r3, r3, #1
 8006610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006612:	f7fa fda5 	bl	8001160 <HAL_GetTick>
 8006616:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006618:	e008      	b.n	800662c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800661a:	f7fa fda1 	bl	8001160 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	2b02      	cmp	r3, #2
 8006626:	d901      	bls.n	800662c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e27e      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800662c:	4b15      	ldr	r3, [pc, #84]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1f0      	bne.n	800661a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0310 	and.w	r3, r3, #16
 8006640:	2b00      	cmp	r3, #0
 8006642:	d06d      	beq.n	8006720 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006644:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800664c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800664e:	4b0d      	ldr	r3, [pc, #52]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 8006650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006652:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	2b08      	cmp	r3, #8
 8006658:	d007      	beq.n	800666a <HAL_RCC_OscConfig+0x282>
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	2b18      	cmp	r3, #24
 800665e:	d11e      	bne.n	800669e <HAL_RCC_OscConfig+0x2b6>
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f003 0303 	and.w	r3, r3, #3
 8006666:	2b01      	cmp	r3, #1
 8006668:	d119      	bne.n	800669e <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800666a:	4b06      	ldr	r3, [pc, #24]	; (8006684 <HAL_RCC_OscConfig+0x29c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006672:	2b00      	cmp	r3, #0
 8006674:	d008      	beq.n	8006688 <HAL_RCC_OscConfig+0x2a0>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	2b80      	cmp	r3, #128	; 0x80
 800667c:	d004      	beq.n	8006688 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e253      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
 8006682:	bf00      	nop
 8006684:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006688:	4ba3      	ldr	r3, [pc, #652]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	061b      	lsls	r3, r3, #24
 8006696:	49a0      	ldr	r1, [pc, #640]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 8006698:	4313      	orrs	r3, r2
 800669a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800669c:	e040      	b.n	8006720 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d023      	beq.n	80066ee <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80066a6:	4b9c      	ldr	r3, [pc, #624]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a9b      	ldr	r2, [pc, #620]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 80066ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b2:	f7fa fd55 	bl	8001160 <HAL_GetTick>
 80066b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066b8:	e008      	b.n	80066cc <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80066ba:	f7fa fd51 	bl	8001160 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e22e      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066cc:	4b92      	ldr	r3, [pc, #584]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d0f0      	beq.n	80066ba <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066d8:	4b8f      	ldr	r3, [pc, #572]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	061b      	lsls	r3, r3, #24
 80066e6:	498c      	ldr	r1, [pc, #560]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	60cb      	str	r3, [r1, #12]
 80066ec:	e018      	b.n	8006720 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80066ee:	4b8a      	ldr	r3, [pc, #552]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a89      	ldr	r2, [pc, #548]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 80066f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fa:	f7fa fd31 	bl	8001160 <HAL_GetTick>
 80066fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006702:	f7fa fd2d 	bl	8001160 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e20a      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006714:	4b80      	ldr	r3, [pc, #512]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1f0      	bne.n	8006702 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0308 	and.w	r3, r3, #8
 8006728:	2b00      	cmp	r3, #0
 800672a:	d036      	beq.n	800679a <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d019      	beq.n	8006768 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006734:	4b78      	ldr	r3, [pc, #480]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 8006736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006738:	4a77      	ldr	r2, [pc, #476]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 800673a:	f043 0301 	orr.w	r3, r3, #1
 800673e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006740:	f7fa fd0e 	bl	8001160 <HAL_GetTick>
 8006744:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006748:	f7fa fd0a 	bl	8001160 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b02      	cmp	r3, #2
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e1e7      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800675a:	4b6f      	ldr	r3, [pc, #444]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 800675c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0f0      	beq.n	8006748 <HAL_RCC_OscConfig+0x360>
 8006766:	e018      	b.n	800679a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006768:	4b6b      	ldr	r3, [pc, #428]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 800676a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800676c:	4a6a      	ldr	r2, [pc, #424]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 800676e:	f023 0301 	bic.w	r3, r3, #1
 8006772:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006774:	f7fa fcf4 	bl	8001160 <HAL_GetTick>
 8006778:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800677c:	f7fa fcf0 	bl	8001160 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e1cd      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800678e:	4b62      	ldr	r3, [pc, #392]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 8006790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1f0      	bne.n	800677c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0320 	and.w	r3, r3, #32
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d036      	beq.n	8006814 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d019      	beq.n	80067e2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80067ae:	4b5a      	ldr	r3, [pc, #360]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a59      	ldr	r2, [pc, #356]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 80067b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80067b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80067ba:	f7fa fcd1 	bl	8001160 <HAL_GetTick>
 80067be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80067c0:	e008      	b.n	80067d4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80067c2:	f7fa fccd 	bl	8001160 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e1aa      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80067d4:	4b50      	ldr	r3, [pc, #320]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0f0      	beq.n	80067c2 <HAL_RCC_OscConfig+0x3da>
 80067e0:	e018      	b.n	8006814 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80067e2:	4b4d      	ldr	r3, [pc, #308]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a4c      	ldr	r2, [pc, #304]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 80067e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80067ee:	f7fa fcb7 	bl	8001160 <HAL_GetTick>
 80067f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80067f4:	e008      	b.n	8006808 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80067f6:	f7fa fcb3 	bl	8001160 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d901      	bls.n	8006808 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e190      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006808:	4b43      	ldr	r3, [pc, #268]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1f0      	bne.n	80067f6 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 8085 	beq.w	800692c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006822:	4b3e      	ldr	r3, [pc, #248]	; (800691c <HAL_RCC_OscConfig+0x534>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a3d      	ldr	r2, [pc, #244]	; (800691c <HAL_RCC_OscConfig+0x534>)
 8006828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800682c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800682e:	f7fa fc97 	bl	8001160 <HAL_GetTick>
 8006832:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006834:	e008      	b.n	8006848 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006836:	f7fa fc93 	bl	8001160 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b64      	cmp	r3, #100	; 0x64
 8006842:	d901      	bls.n	8006848 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e170      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006848:	4b34      	ldr	r3, [pc, #208]	; (800691c <HAL_RCC_OscConfig+0x534>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0f0      	beq.n	8006836 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d106      	bne.n	800686a <HAL_RCC_OscConfig+0x482>
 800685c:	4b2e      	ldr	r3, [pc, #184]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 800685e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006860:	4a2d      	ldr	r2, [pc, #180]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 8006862:	f043 0301 	orr.w	r3, r3, #1
 8006866:	6713      	str	r3, [r2, #112]	; 0x70
 8006868:	e02d      	b.n	80068c6 <HAL_RCC_OscConfig+0x4de>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10c      	bne.n	800688c <HAL_RCC_OscConfig+0x4a4>
 8006872:	4b29      	ldr	r3, [pc, #164]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 8006874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006876:	4a28      	ldr	r2, [pc, #160]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 8006878:	f023 0301 	bic.w	r3, r3, #1
 800687c:	6713      	str	r3, [r2, #112]	; 0x70
 800687e:	4b26      	ldr	r3, [pc, #152]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 8006880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006882:	4a25      	ldr	r2, [pc, #148]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 8006884:	f023 0304 	bic.w	r3, r3, #4
 8006888:	6713      	str	r3, [r2, #112]	; 0x70
 800688a:	e01c      	b.n	80068c6 <HAL_RCC_OscConfig+0x4de>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	2b05      	cmp	r3, #5
 8006892:	d10c      	bne.n	80068ae <HAL_RCC_OscConfig+0x4c6>
 8006894:	4b20      	ldr	r3, [pc, #128]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 8006896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006898:	4a1f      	ldr	r2, [pc, #124]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 800689a:	f043 0304 	orr.w	r3, r3, #4
 800689e:	6713      	str	r3, [r2, #112]	; 0x70
 80068a0:	4b1d      	ldr	r3, [pc, #116]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 80068a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a4:	4a1c      	ldr	r2, [pc, #112]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 80068a6:	f043 0301 	orr.w	r3, r3, #1
 80068aa:	6713      	str	r3, [r2, #112]	; 0x70
 80068ac:	e00b      	b.n	80068c6 <HAL_RCC_OscConfig+0x4de>
 80068ae:	4b1a      	ldr	r3, [pc, #104]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 80068b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b2:	4a19      	ldr	r2, [pc, #100]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 80068b4:	f023 0301 	bic.w	r3, r3, #1
 80068b8:	6713      	str	r3, [r2, #112]	; 0x70
 80068ba:	4b17      	ldr	r3, [pc, #92]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 80068bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068be:	4a16      	ldr	r2, [pc, #88]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 80068c0:	f023 0304 	bic.w	r3, r3, #4
 80068c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d015      	beq.n	80068fa <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ce:	f7fa fc47 	bl	8001160 <HAL_GetTick>
 80068d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068d4:	e00a      	b.n	80068ec <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068d6:	f7fa fc43 	bl	8001160 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d901      	bls.n	80068ec <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e11e      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068ec:	4b0a      	ldr	r3, [pc, #40]	; (8006918 <HAL_RCC_OscConfig+0x530>)
 80068ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0ee      	beq.n	80068d6 <HAL_RCC_OscConfig+0x4ee>
 80068f8:	e018      	b.n	800692c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068fa:	f7fa fc31 	bl	8001160 <HAL_GetTick>
 80068fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006900:	e00e      	b.n	8006920 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006902:	f7fa fc2d 	bl	8001160 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006910:	4293      	cmp	r3, r2
 8006912:	d905      	bls.n	8006920 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e108      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
 8006918:	58024400 	.word	0x58024400
 800691c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006920:	4b84      	ldr	r3, [pc, #528]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1ea      	bne.n	8006902 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 80f9 	beq.w	8006b28 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006936:	4b7f      	ldr	r3, [pc, #508]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800693e:	2b18      	cmp	r3, #24
 8006940:	f000 80b4 	beq.w	8006aac <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	2b02      	cmp	r3, #2
 800694a:	f040 8095 	bne.w	8006a78 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800694e:	4b79      	ldr	r3, [pc, #484]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a78      	ldr	r2, [pc, #480]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006954:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695a:	f7fa fc01 	bl	8001160 <HAL_GetTick>
 800695e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006960:	e008      	b.n	8006974 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006962:	f7fa fbfd 	bl	8001160 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d901      	bls.n	8006974 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e0da      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006974:	4b6f      	ldr	r3, [pc, #444]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1f0      	bne.n	8006962 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006980:	4b6c      	ldr	r3, [pc, #432]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006984:	4b6c      	ldr	r3, [pc, #432]	; (8006b38 <HAL_RCC_OscConfig+0x750>)
 8006986:	4013      	ands	r3, r2
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006990:	0112      	lsls	r2, r2, #4
 8006992:	430a      	orrs	r2, r1
 8006994:	4967      	ldr	r1, [pc, #412]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006996:	4313      	orrs	r3, r2
 8006998:	628b      	str	r3, [r1, #40]	; 0x28
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699e:	3b01      	subs	r3, #1
 80069a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a8:	3b01      	subs	r3, #1
 80069aa:	025b      	lsls	r3, r3, #9
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	431a      	orrs	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b4:	3b01      	subs	r3, #1
 80069b6:	041b      	lsls	r3, r3, #16
 80069b8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80069bc:	431a      	orrs	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c2:	3b01      	subs	r3, #1
 80069c4:	061b      	lsls	r3, r3, #24
 80069c6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80069ca:	495a      	ldr	r1, [pc, #360]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80069d0:	4b58      	ldr	r3, [pc, #352]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	4a57      	ldr	r2, [pc, #348]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 80069d6:	f023 0301 	bic.w	r3, r3, #1
 80069da:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80069dc:	4b55      	ldr	r3, [pc, #340]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 80069de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069e0:	4b56      	ldr	r3, [pc, #344]	; (8006b3c <HAL_RCC_OscConfig+0x754>)
 80069e2:	4013      	ands	r3, r2
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80069e8:	00d2      	lsls	r2, r2, #3
 80069ea:	4952      	ldr	r1, [pc, #328]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80069f0:	4b50      	ldr	r3, [pc, #320]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 80069f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f4:	f023 020c 	bic.w	r2, r3, #12
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fc:	494d      	ldr	r1, [pc, #308]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a02:	4b4c      	ldr	r3, [pc, #304]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a06:	f023 0202 	bic.w	r2, r3, #2
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a0e:	4949      	ldr	r1, [pc, #292]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a14:	4b47      	ldr	r3, [pc, #284]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a18:	4a46      	ldr	r2, [pc, #280]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a20:	4b44      	ldr	r3, [pc, #272]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a24:	4a43      	ldr	r2, [pc, #268]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006a2c:	4b41      	ldr	r3, [pc, #260]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a30:	4a40      	ldr	r2, [pc, #256]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006a32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006a38:	4b3e      	ldr	r3, [pc, #248]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3c:	4a3d      	ldr	r2, [pc, #244]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006a3e:	f043 0301 	orr.w	r3, r3, #1
 8006a42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a44:	4b3b      	ldr	r3, [pc, #236]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a3a      	ldr	r2, [pc, #232]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a50:	f7fa fb86 	bl	8001160 <HAL_GetTick>
 8006a54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a58:	f7fa fb82 	bl	8001160 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e05f      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a6a:	4b32      	ldr	r3, [pc, #200]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0f0      	beq.n	8006a58 <HAL_RCC_OscConfig+0x670>
 8006a76:	e057      	b.n	8006b28 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a78:	4b2e      	ldr	r3, [pc, #184]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a2d      	ldr	r2, [pc, #180]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a84:	f7fa fb6c 	bl	8001160 <HAL_GetTick>
 8006a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a8c:	f7fa fb68 	bl	8001160 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e045      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a9e:	4b25      	ldr	r3, [pc, #148]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1f0      	bne.n	8006a8c <HAL_RCC_OscConfig+0x6a4>
 8006aaa:	e03d      	b.n	8006b28 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006aac:	4b21      	ldr	r3, [pc, #132]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006ab2:	4b20      	ldr	r3, [pc, #128]	; (8006b34 <HAL_RCC_OscConfig+0x74c>)
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d031      	beq.n	8006b24 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f003 0203 	and.w	r2, r3, #3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d12a      	bne.n	8006b24 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	091b      	lsrs	r3, r3, #4
 8006ad2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d122      	bne.n	8006b24 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d11a      	bne.n	8006b24 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	0a5b      	lsrs	r3, r3, #9
 8006af2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006afa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d111      	bne.n	8006b24 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	0c1b      	lsrs	r3, r3, #16
 8006b04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d108      	bne.n	8006b24 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	0e1b      	lsrs	r3, r3, #24
 8006b16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d001      	beq.n	8006b28 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e000      	b.n	8006b2a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3730      	adds	r7, #48	; 0x30
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	58024400 	.word	0x58024400
 8006b38:	fffffc0c 	.word	0xfffffc0c
 8006b3c:	ffff0007 	.word	0xffff0007

08006b40 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e19c      	b.n	8006e8e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b54:	4b8a      	ldr	r3, [pc, #552]	; (8006d80 <HAL_RCC_ClockConfig+0x240>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 030f 	and.w	r3, r3, #15
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d910      	bls.n	8006b84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b62:	4b87      	ldr	r3, [pc, #540]	; (8006d80 <HAL_RCC_ClockConfig+0x240>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f023 020f 	bic.w	r2, r3, #15
 8006b6a:	4985      	ldr	r1, [pc, #532]	; (8006d80 <HAL_RCC_ClockConfig+0x240>)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b72:	4b83      	ldr	r3, [pc, #524]	; (8006d80 <HAL_RCC_ClockConfig+0x240>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d001      	beq.n	8006b84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e184      	b.n	8006e8e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0304 	and.w	r3, r3, #4
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d010      	beq.n	8006bb2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	691a      	ldr	r2, [r3, #16]
 8006b94:	4b7b      	ldr	r3, [pc, #492]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d908      	bls.n	8006bb2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ba0:	4b78      	ldr	r3, [pc, #480]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	4975      	ldr	r1, [pc, #468]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d010      	beq.n	8006be0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	695a      	ldr	r2, [r3, #20]
 8006bc2:	4b70      	ldr	r3, [pc, #448]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d908      	bls.n	8006be0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006bce:	4b6d      	ldr	r3, [pc, #436]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	496a      	ldr	r1, [pc, #424]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0310 	and.w	r3, r3, #16
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d010      	beq.n	8006c0e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	699a      	ldr	r2, [r3, #24]
 8006bf0:	4b64      	ldr	r3, [pc, #400]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d908      	bls.n	8006c0e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006bfc:	4b61      	ldr	r3, [pc, #388]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	495e      	ldr	r1, [pc, #376]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d010      	beq.n	8006c3c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	69da      	ldr	r2, [r3, #28]
 8006c1e:	4b59      	ldr	r3, [pc, #356]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d908      	bls.n	8006c3c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006c2a:	4b56      	ldr	r3, [pc, #344]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	4953      	ldr	r1, [pc, #332]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d010      	beq.n	8006c6a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	4b4d      	ldr	r3, [pc, #308]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	f003 030f 	and.w	r3, r3, #15
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d908      	bls.n	8006c6a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c58:	4b4a      	ldr	r3, [pc, #296]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	f023 020f 	bic.w	r2, r3, #15
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	4947      	ldr	r1, [pc, #284]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d055      	beq.n	8006d22 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006c76:	4b43      	ldr	r3, [pc, #268]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	4940      	ldr	r1, [pc, #256]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d107      	bne.n	8006ca0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c90:	4b3c      	ldr	r3, [pc, #240]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d121      	bne.n	8006ce0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e0f6      	b.n	8006e8e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d107      	bne.n	8006cb8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ca8:	4b36      	ldr	r3, [pc, #216]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d115      	bne.n	8006ce0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e0ea      	b.n	8006e8e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d107      	bne.n	8006cd0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006cc0:	4b30      	ldr	r3, [pc, #192]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d109      	bne.n	8006ce0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e0de      	b.n	8006e8e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cd0:	4b2c      	ldr	r3, [pc, #176]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e0d6      	b.n	8006e8e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ce0:	4b28      	ldr	r3, [pc, #160]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	f023 0207 	bic.w	r2, r3, #7
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	4925      	ldr	r1, [pc, #148]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf2:	f7fa fa35 	bl	8001160 <HAL_GetTick>
 8006cf6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cf8:	e00a      	b.n	8006d10 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cfa:	f7fa fa31 	bl	8001160 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e0be      	b.n	8006e8e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d10:	4b1c      	ldr	r3, [pc, #112]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	00db      	lsls	r3, r3, #3
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d1eb      	bne.n	8006cfa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d010      	beq.n	8006d50 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68da      	ldr	r2, [r3, #12]
 8006d32:	4b14      	ldr	r3, [pc, #80]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d208      	bcs.n	8006d50 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d3e:	4b11      	ldr	r3, [pc, #68]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	f023 020f 	bic.w	r2, r3, #15
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	490e      	ldr	r1, [pc, #56]	; (8006d84 <HAL_RCC_ClockConfig+0x244>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d50:	4b0b      	ldr	r3, [pc, #44]	; (8006d80 <HAL_RCC_ClockConfig+0x240>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 030f 	and.w	r3, r3, #15
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d214      	bcs.n	8006d88 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d5e:	4b08      	ldr	r3, [pc, #32]	; (8006d80 <HAL_RCC_ClockConfig+0x240>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f023 020f 	bic.w	r2, r3, #15
 8006d66:	4906      	ldr	r1, [pc, #24]	; (8006d80 <HAL_RCC_ClockConfig+0x240>)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d6e:	4b04      	ldr	r3, [pc, #16]	; (8006d80 <HAL_RCC_ClockConfig+0x240>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 030f 	and.w	r3, r3, #15
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d005      	beq.n	8006d88 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e086      	b.n	8006e8e <HAL_RCC_ClockConfig+0x34e>
 8006d80:	52002000 	.word	0x52002000
 8006d84:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d010      	beq.n	8006db6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	691a      	ldr	r2, [r3, #16]
 8006d98:	4b3f      	ldr	r3, [pc, #252]	; (8006e98 <HAL_RCC_ClockConfig+0x358>)
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d208      	bcs.n	8006db6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006da4:	4b3c      	ldr	r3, [pc, #240]	; (8006e98 <HAL_RCC_ClockConfig+0x358>)
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	4939      	ldr	r1, [pc, #228]	; (8006e98 <HAL_RCC_ClockConfig+0x358>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0308 	and.w	r3, r3, #8
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d010      	beq.n	8006de4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	695a      	ldr	r2, [r3, #20]
 8006dc6:	4b34      	ldr	r3, [pc, #208]	; (8006e98 <HAL_RCC_ClockConfig+0x358>)
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d208      	bcs.n	8006de4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006dd2:	4b31      	ldr	r3, [pc, #196]	; (8006e98 <HAL_RCC_ClockConfig+0x358>)
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	492e      	ldr	r1, [pc, #184]	; (8006e98 <HAL_RCC_ClockConfig+0x358>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0310 	and.w	r3, r3, #16
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d010      	beq.n	8006e12 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	699a      	ldr	r2, [r3, #24]
 8006df4:	4b28      	ldr	r3, [pc, #160]	; (8006e98 <HAL_RCC_ClockConfig+0x358>)
 8006df6:	69db      	ldr	r3, [r3, #28]
 8006df8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d208      	bcs.n	8006e12 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e00:	4b25      	ldr	r3, [pc, #148]	; (8006e98 <HAL_RCC_ClockConfig+0x358>)
 8006e02:	69db      	ldr	r3, [r3, #28]
 8006e04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	4922      	ldr	r1, [pc, #136]	; (8006e98 <HAL_RCC_ClockConfig+0x358>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0320 	and.w	r3, r3, #32
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d010      	beq.n	8006e40 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	69da      	ldr	r2, [r3, #28]
 8006e22:	4b1d      	ldr	r3, [pc, #116]	; (8006e98 <HAL_RCC_ClockConfig+0x358>)
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d208      	bcs.n	8006e40 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006e2e:	4b1a      	ldr	r3, [pc, #104]	; (8006e98 <HAL_RCC_ClockConfig+0x358>)
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	4917      	ldr	r1, [pc, #92]	; (8006e98 <HAL_RCC_ClockConfig+0x358>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006e40:	f000 f834 	bl	8006eac <HAL_RCC_GetSysClockFreq>
 8006e44:	4602      	mov	r2, r0
 8006e46:	4b14      	ldr	r3, [pc, #80]	; (8006e98 <HAL_RCC_ClockConfig+0x358>)
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	0a1b      	lsrs	r3, r3, #8
 8006e4c:	f003 030f 	and.w	r3, r3, #15
 8006e50:	4912      	ldr	r1, [pc, #72]	; (8006e9c <HAL_RCC_ClockConfig+0x35c>)
 8006e52:	5ccb      	ldrb	r3, [r1, r3]
 8006e54:	f003 031f 	and.w	r3, r3, #31
 8006e58:	fa22 f303 	lsr.w	r3, r2, r3
 8006e5c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e5e:	4b0e      	ldr	r3, [pc, #56]	; (8006e98 <HAL_RCC_ClockConfig+0x358>)
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	4a0d      	ldr	r2, [pc, #52]	; (8006e9c <HAL_RCC_ClockConfig+0x35c>)
 8006e68:	5cd3      	ldrb	r3, [r2, r3]
 8006e6a:	f003 031f 	and.w	r3, r3, #31
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	fa22 f303 	lsr.w	r3, r2, r3
 8006e74:	4a0a      	ldr	r2, [pc, #40]	; (8006ea0 <HAL_RCC_ClockConfig+0x360>)
 8006e76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e78:	4a0a      	ldr	r2, [pc, #40]	; (8006ea4 <HAL_RCC_ClockConfig+0x364>)
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006e7e:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <HAL_RCC_ClockConfig+0x368>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fa f922 	bl	80010cc <HAL_InitTick>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	58024400 	.word	0x58024400
 8006e9c:	0800b970 	.word	0x0800b970
 8006ea0:	24000004 	.word	0x24000004
 8006ea4:	24000000 	.word	0x24000000
 8006ea8:	24000008 	.word	0x24000008

08006eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b089      	sub	sp, #36	; 0x24
 8006eb0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eb2:	4bb3      	ldr	r3, [pc, #716]	; (8007180 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006eba:	2b18      	cmp	r3, #24
 8006ebc:	f200 8155 	bhi.w	800716a <HAL_RCC_GetSysClockFreq+0x2be>
 8006ec0:	a201      	add	r2, pc, #4	; (adr r2, 8006ec8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec6:	bf00      	nop
 8006ec8:	08006f2d 	.word	0x08006f2d
 8006ecc:	0800716b 	.word	0x0800716b
 8006ed0:	0800716b 	.word	0x0800716b
 8006ed4:	0800716b 	.word	0x0800716b
 8006ed8:	0800716b 	.word	0x0800716b
 8006edc:	0800716b 	.word	0x0800716b
 8006ee0:	0800716b 	.word	0x0800716b
 8006ee4:	0800716b 	.word	0x0800716b
 8006ee8:	08006f53 	.word	0x08006f53
 8006eec:	0800716b 	.word	0x0800716b
 8006ef0:	0800716b 	.word	0x0800716b
 8006ef4:	0800716b 	.word	0x0800716b
 8006ef8:	0800716b 	.word	0x0800716b
 8006efc:	0800716b 	.word	0x0800716b
 8006f00:	0800716b 	.word	0x0800716b
 8006f04:	0800716b 	.word	0x0800716b
 8006f08:	08006f59 	.word	0x08006f59
 8006f0c:	0800716b 	.word	0x0800716b
 8006f10:	0800716b 	.word	0x0800716b
 8006f14:	0800716b 	.word	0x0800716b
 8006f18:	0800716b 	.word	0x0800716b
 8006f1c:	0800716b 	.word	0x0800716b
 8006f20:	0800716b 	.word	0x0800716b
 8006f24:	0800716b 	.word	0x0800716b
 8006f28:	08006f5f 	.word	0x08006f5f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f2c:	4b94      	ldr	r3, [pc, #592]	; (8007180 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0320 	and.w	r3, r3, #32
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d009      	beq.n	8006f4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f38:	4b91      	ldr	r3, [pc, #580]	; (8007180 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	08db      	lsrs	r3, r3, #3
 8006f3e:	f003 0303 	and.w	r3, r3, #3
 8006f42:	4a90      	ldr	r2, [pc, #576]	; (8007184 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f44:	fa22 f303 	lsr.w	r3, r2, r3
 8006f48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006f4a:	e111      	b.n	8007170 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006f4c:	4b8d      	ldr	r3, [pc, #564]	; (8007184 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f4e:	61bb      	str	r3, [r7, #24]
    break;
 8006f50:	e10e      	b.n	8007170 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006f52:	4b8d      	ldr	r3, [pc, #564]	; (8007188 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f54:	61bb      	str	r3, [r7, #24]
    break;
 8006f56:	e10b      	b.n	8007170 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006f58:	4b8c      	ldr	r3, [pc, #560]	; (800718c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006f5a:	61bb      	str	r3, [r7, #24]
    break;
 8006f5c:	e108      	b.n	8007170 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f5e:	4b88      	ldr	r3, [pc, #544]	; (8007180 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f62:	f003 0303 	and.w	r3, r3, #3
 8006f66:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006f68:	4b85      	ldr	r3, [pc, #532]	; (8007180 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6c:	091b      	lsrs	r3, r3, #4
 8006f6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f72:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f74:	4b82      	ldr	r3, [pc, #520]	; (8007180 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006f7e:	4b80      	ldr	r3, [pc, #512]	; (8007180 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f82:	08db      	lsrs	r3, r3, #3
 8006f84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	fb02 f303 	mul.w	r3, r2, r3
 8006f8e:	ee07 3a90 	vmov	s15, r3
 8006f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f96:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 80e1 	beq.w	8007164 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	f000 8083 	beq.w	80070b0 <HAL_RCC_GetSysClockFreq+0x204>
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	f200 80a1 	bhi.w	80070f4 <HAL_RCC_GetSysClockFreq+0x248>
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <HAL_RCC_GetSysClockFreq+0x114>
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d056      	beq.n	800706c <HAL_RCC_GetSysClockFreq+0x1c0>
 8006fbe:	e099      	b.n	80070f4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fc0:	4b6f      	ldr	r3, [pc, #444]	; (8007180 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0320 	and.w	r3, r3, #32
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d02d      	beq.n	8007028 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fcc:	4b6c      	ldr	r3, [pc, #432]	; (8007180 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	08db      	lsrs	r3, r3, #3
 8006fd2:	f003 0303 	and.w	r3, r3, #3
 8006fd6:	4a6b      	ldr	r2, [pc, #428]	; (8007184 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fdc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	ee07 3a90 	vmov	s15, r3
 8006fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff6:	4b62      	ldr	r3, [pc, #392]	; (8007180 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffe:	ee07 3a90 	vmov	s15, r3
 8007002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007006:	ed97 6a02 	vldr	s12, [r7, #8]
 800700a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007190 <HAL_RCC_GetSysClockFreq+0x2e4>
 800700e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800701a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800701e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007022:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007026:	e087      	b.n	8007138 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	ee07 3a90 	vmov	s15, r3
 800702e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007032:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007194 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800703a:	4b51      	ldr	r3, [pc, #324]	; (8007180 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800703c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007042:	ee07 3a90 	vmov	s15, r3
 8007046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800704a:	ed97 6a02 	vldr	s12, [r7, #8]
 800704e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007190 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800705a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800705e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800706a:	e065      	b.n	8007138 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	ee07 3a90 	vmov	s15, r3
 8007072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007076:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007198 <HAL_RCC_GetSysClockFreq+0x2ec>
 800707a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800707e:	4b40      	ldr	r3, [pc, #256]	; (8007180 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007086:	ee07 3a90 	vmov	s15, r3
 800708a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800708e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007092:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007190 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800709a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800709e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070ae:	e043      	b.n	8007138 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ba:	eddf 6a38 	vldr	s13, [pc, #224]	; 800719c <HAL_RCC_GetSysClockFreq+0x2f0>
 80070be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c2:	4b2f      	ldr	r3, [pc, #188]	; (8007180 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80070d6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007190 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070f2:	e021      	b.n	8007138 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007198 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007106:	4b1e      	ldr	r3, [pc, #120]	; (8007180 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007116:	ed97 6a02 	vldr	s12, [r7, #8]
 800711a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007190 <HAL_RCC_GetSysClockFreq+0x2e4>
 800711e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800712a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800712e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007136:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007138:	4b11      	ldr	r3, [pc, #68]	; (8007180 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800713a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713c:	0a5b      	lsrs	r3, r3, #9
 800713e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007142:	3301      	adds	r3, #1
 8007144:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	ee07 3a90 	vmov	s15, r3
 800714c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007150:	edd7 6a07 	vldr	s13, [r7, #28]
 8007154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007158:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800715c:	ee17 3a90 	vmov	r3, s15
 8007160:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007162:	e005      	b.n	8007170 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007164:	2300      	movs	r3, #0
 8007166:	61bb      	str	r3, [r7, #24]
    break;
 8007168:	e002      	b.n	8007170 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800716a:	4b07      	ldr	r3, [pc, #28]	; (8007188 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800716c:	61bb      	str	r3, [r7, #24]
    break;
 800716e:	bf00      	nop
  }

  return sysclockfreq;
 8007170:	69bb      	ldr	r3, [r7, #24]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3724      	adds	r7, #36	; 0x24
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	58024400 	.word	0x58024400
 8007184:	03d09000 	.word	0x03d09000
 8007188:	003d0900 	.word	0x003d0900
 800718c:	007a1200 	.word	0x007a1200
 8007190:	46000000 	.word	0x46000000
 8007194:	4c742400 	.word	0x4c742400
 8007198:	4a742400 	.word	0x4a742400
 800719c:	4af42400 	.word	0x4af42400

080071a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80071a6:	f7ff fe81 	bl	8006eac <HAL_RCC_GetSysClockFreq>
 80071aa:	4602      	mov	r2, r0
 80071ac:	4b10      	ldr	r3, [pc, #64]	; (80071f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	0a1b      	lsrs	r3, r3, #8
 80071b2:	f003 030f 	and.w	r3, r3, #15
 80071b6:	490f      	ldr	r1, [pc, #60]	; (80071f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80071b8:	5ccb      	ldrb	r3, [r1, r3]
 80071ba:	f003 031f 	and.w	r3, r3, #31
 80071be:	fa22 f303 	lsr.w	r3, r2, r3
 80071c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80071c4:	4b0a      	ldr	r3, [pc, #40]	; (80071f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	f003 030f 	and.w	r3, r3, #15
 80071cc:	4a09      	ldr	r2, [pc, #36]	; (80071f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80071ce:	5cd3      	ldrb	r3, [r2, r3]
 80071d0:	f003 031f 	and.w	r3, r3, #31
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	fa22 f303 	lsr.w	r3, r2, r3
 80071da:	4a07      	ldr	r2, [pc, #28]	; (80071f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80071dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80071de:	4a07      	ldr	r2, [pc, #28]	; (80071fc <HAL_RCC_GetHCLKFreq+0x5c>)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80071e4:	4b04      	ldr	r3, [pc, #16]	; (80071f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80071e6:	681b      	ldr	r3, [r3, #0]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	58024400 	.word	0x58024400
 80071f4:	0800b970 	.word	0x0800b970
 80071f8:	24000004 	.word	0x24000004
 80071fc:	24000000 	.word	0x24000000

08007200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007204:	f7ff ffcc 	bl	80071a0 <HAL_RCC_GetHCLKFreq>
 8007208:	4602      	mov	r2, r0
 800720a:	4b06      	ldr	r3, [pc, #24]	; (8007224 <HAL_RCC_GetPCLK1Freq+0x24>)
 800720c:	69db      	ldr	r3, [r3, #28]
 800720e:	091b      	lsrs	r3, r3, #4
 8007210:	f003 0307 	and.w	r3, r3, #7
 8007214:	4904      	ldr	r1, [pc, #16]	; (8007228 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007216:	5ccb      	ldrb	r3, [r1, r3]
 8007218:	f003 031f 	and.w	r3, r3, #31
 800721c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007220:	4618      	mov	r0, r3
 8007222:	bd80      	pop	{r7, pc}
 8007224:	58024400 	.word	0x58024400
 8007228:	0800b970 	.word	0x0800b970

0800722c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007230:	f7ff ffb6 	bl	80071a0 <HAL_RCC_GetHCLKFreq>
 8007234:	4602      	mov	r2, r0
 8007236:	4b06      	ldr	r3, [pc, #24]	; (8007250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	0a1b      	lsrs	r3, r3, #8
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	4904      	ldr	r1, [pc, #16]	; (8007254 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007242:	5ccb      	ldrb	r3, [r1, r3]
 8007244:	f003 031f 	and.w	r3, r3, #31
 8007248:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800724c:	4618      	mov	r0, r3
 800724e:	bd80      	pop	{r7, pc}
 8007250:	58024400 	.word	0x58024400
 8007254:	0800b970 	.word	0x0800b970

08007258 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007260:	2300      	movs	r3, #0
 8007262:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007264:	2300      	movs	r3, #0
 8007266:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d03f      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007278:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800727c:	d02a      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800727e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007282:	d824      	bhi.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007284:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007288:	d018      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800728a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800728e:	d81e      	bhi.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007294:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007298:	d007      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 800729a:	e018      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800729c:	4bab      	ldr	r3, [pc, #684]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	4aaa      	ldr	r2, [pc, #680]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80072a8:	e015      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	3304      	adds	r3, #4
 80072ae:	2102      	movs	r1, #2
 80072b0:	4618      	mov	r0, r3
 80072b2:	f001 feff 	bl	80090b4 <RCCEx_PLL2_Config>
 80072b6:	4603      	mov	r3, r0
 80072b8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80072ba:	e00c      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3324      	adds	r3, #36	; 0x24
 80072c0:	2102      	movs	r1, #2
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 ffa8 	bl	8009218 <RCCEx_PLL3_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80072cc:	e003      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	75fb      	strb	r3, [r7, #23]
      break;
 80072d2:	e000      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80072d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072d6:	7dfb      	ldrb	r3, [r7, #23]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d109      	bne.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80072dc:	4b9b      	ldr	r3, [pc, #620]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072e8:	4998      	ldr	r1, [pc, #608]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	650b      	str	r3, [r1, #80]	; 0x50
 80072ee:	e001      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
 80072f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d03d      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007304:	2b04      	cmp	r3, #4
 8007306:	d826      	bhi.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007308:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800730a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730e:	bf00      	nop
 8007310:	08007325 	.word	0x08007325
 8007314:	08007333 	.word	0x08007333
 8007318:	08007345 	.word	0x08007345
 800731c:	0800735d 	.word	0x0800735d
 8007320:	0800735d 	.word	0x0800735d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007324:	4b89      	ldr	r3, [pc, #548]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	4a88      	ldr	r2, [pc, #544]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800732a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800732e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007330:	e015      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3304      	adds	r3, #4
 8007336:	2100      	movs	r1, #0
 8007338:	4618      	mov	r0, r3
 800733a:	f001 febb 	bl	80090b4 <RCCEx_PLL2_Config>
 800733e:	4603      	mov	r3, r0
 8007340:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007342:	e00c      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	3324      	adds	r3, #36	; 0x24
 8007348:	2100      	movs	r1, #0
 800734a:	4618      	mov	r0, r3
 800734c:	f001 ff64 	bl	8009218 <RCCEx_PLL3_Config>
 8007350:	4603      	mov	r3, r0
 8007352:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007354:	e003      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	75fb      	strb	r3, [r7, #23]
      break;
 800735a:	e000      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800735c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800735e:	7dfb      	ldrb	r3, [r7, #23]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d109      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007364:	4b79      	ldr	r3, [pc, #484]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007368:	f023 0207 	bic.w	r2, r3, #7
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007370:	4976      	ldr	r1, [pc, #472]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007372:	4313      	orrs	r3, r2
 8007374:	650b      	str	r3, [r1, #80]	; 0x50
 8007376:	e001      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007378:	7dfb      	ldrb	r3, [r7, #23]
 800737a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007384:	2b00      	cmp	r3, #0
 8007386:	d051      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800738e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007392:	d036      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007394:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007398:	d830      	bhi.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800739a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800739e:	d032      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80073a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073a4:	d82a      	bhi.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80073a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80073aa:	d02e      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80073ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80073b0:	d824      	bhi.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80073b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073b6:	d018      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x192>
 80073b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073bc:	d81e      	bhi.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x172>
 80073c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073c6:	d007      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80073c8:	e018      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073ca:	4b60      	ldr	r3, [pc, #384]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ce:	4a5f      	ldr	r2, [pc, #380]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073d6:	e019      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	3304      	adds	r3, #4
 80073dc:	2100      	movs	r1, #0
 80073de:	4618      	mov	r0, r3
 80073e0:	f001 fe68 	bl	80090b4 <RCCEx_PLL2_Config>
 80073e4:	4603      	mov	r3, r0
 80073e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80073e8:	e010      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3324      	adds	r3, #36	; 0x24
 80073ee:	2100      	movs	r1, #0
 80073f0:	4618      	mov	r0, r3
 80073f2:	f001 ff11 	bl	8009218 <RCCEx_PLL3_Config>
 80073f6:	4603      	mov	r3, r0
 80073f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073fa:	e007      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007400:	e004      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007402:	bf00      	nop
 8007404:	e002      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007406:	bf00      	nop
 8007408:	e000      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800740a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800740c:	7dfb      	ldrb	r3, [r7, #23]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10a      	bne.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007412:	4b4e      	ldr	r3, [pc, #312]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007416:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007420:	494a      	ldr	r1, [pc, #296]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007422:	4313      	orrs	r3, r2
 8007424:	658b      	str	r3, [r1, #88]	; 0x58
 8007426:	e001      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007428:	7dfb      	ldrb	r3, [r7, #23]
 800742a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007434:	2b00      	cmp	r3, #0
 8007436:	d051      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800743e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007442:	d036      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007444:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007448:	d830      	bhi.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 800744a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800744e:	d032      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8007450:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007454:	d82a      	bhi.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007456:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800745a:	d02e      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x262>
 800745c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007460:	d824      	bhi.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007462:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007466:	d018      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8007468:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800746c:	d81e      	bhi.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8007472:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007476:	d007      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007478:	e018      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800747a:	4b34      	ldr	r3, [pc, #208]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800747c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747e:	4a33      	ldr	r2, [pc, #204]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007484:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007486:	e019      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3304      	adds	r3, #4
 800748c:	2100      	movs	r1, #0
 800748e:	4618      	mov	r0, r3
 8007490:	f001 fe10 	bl	80090b4 <RCCEx_PLL2_Config>
 8007494:	4603      	mov	r3, r0
 8007496:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007498:	e010      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3324      	adds	r3, #36	; 0x24
 800749e:	2100      	movs	r1, #0
 80074a0:	4618      	mov	r0, r3
 80074a2:	f001 feb9 	bl	8009218 <RCCEx_PLL3_Config>
 80074a6:	4603      	mov	r3, r0
 80074a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074aa:	e007      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	75fb      	strb	r3, [r7, #23]
      break;
 80074b0:	e004      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80074b2:	bf00      	nop
 80074b4:	e002      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80074b6:	bf00      	nop
 80074b8:	e000      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80074ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10a      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80074c2:	4b22      	ldr	r3, [pc, #136]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074c6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80074d0:	491e      	ldr	r1, [pc, #120]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	658b      	str	r3, [r1, #88]	; 0x58
 80074d6:	e001      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d8:	7dfb      	ldrb	r3, [r7, #23]
 80074da:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d035      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ec:	2b30      	cmp	r3, #48	; 0x30
 80074ee:	d01c      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80074f0:	2b30      	cmp	r3, #48	; 0x30
 80074f2:	d817      	bhi.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80074f4:	2b20      	cmp	r3, #32
 80074f6:	d00c      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80074f8:	2b20      	cmp	r3, #32
 80074fa:	d813      	bhi.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d016      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8007500:	2b10      	cmp	r3, #16
 8007502:	d10f      	bne.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007504:	4b11      	ldr	r3, [pc, #68]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007508:	4a10      	ldr	r2, [pc, #64]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800750a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800750e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007510:	e00e      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3304      	adds	r3, #4
 8007516:	2102      	movs	r1, #2
 8007518:	4618      	mov	r0, r3
 800751a:	f001 fdcb 	bl	80090b4 <RCCEx_PLL2_Config>
 800751e:	4603      	mov	r3, r0
 8007520:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007522:	e005      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	75fb      	strb	r3, [r7, #23]
      break;
 8007528:	e002      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800752a:	bf00      	nop
 800752c:	e000      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800752e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007530:	7dfb      	ldrb	r3, [r7, #23]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10c      	bne.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007536:	4b05      	ldr	r3, [pc, #20]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800753a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007542:	4902      	ldr	r1, [pc, #8]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007544:	4313      	orrs	r3, r2
 8007546:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007548:	e004      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800754a:	bf00      	nop
 800754c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007550:	7dfb      	ldrb	r3, [r7, #23]
 8007552:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d047      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007568:	d030      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x374>
 800756a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800756e:	d82a      	bhi.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007570:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007574:	d02c      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007576:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800757a:	d824      	bhi.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800757c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007580:	d018      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007586:	d81e      	bhi.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800758c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007590:	d007      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007592:	e018      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007594:	4bac      	ldr	r3, [pc, #688]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007598:	4aab      	ldr	r2, [pc, #684]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800759a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800759e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80075a0:	e017      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	3304      	adds	r3, #4
 80075a6:	2100      	movs	r1, #0
 80075a8:	4618      	mov	r0, r3
 80075aa:	f001 fd83 	bl	80090b4 <RCCEx_PLL2_Config>
 80075ae:	4603      	mov	r3, r0
 80075b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80075b2:	e00e      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	3324      	adds	r3, #36	; 0x24
 80075b8:	2100      	movs	r1, #0
 80075ba:	4618      	mov	r0, r3
 80075bc:	f001 fe2c 	bl	8009218 <RCCEx_PLL3_Config>
 80075c0:	4603      	mov	r3, r0
 80075c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80075c4:	e005      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	75fb      	strb	r3, [r7, #23]
      break;
 80075ca:	e002      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80075cc:	bf00      	nop
 80075ce:	e000      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80075d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075d2:	7dfb      	ldrb	r3, [r7, #23]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d109      	bne.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80075d8:	4b9b      	ldr	r3, [pc, #620]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80075da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e4:	4998      	ldr	r1, [pc, #608]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	650b      	str	r3, [r1, #80]	; 0x50
 80075ea:	e001      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d049      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007604:	d02e      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8007606:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800760a:	d828      	bhi.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800760c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007610:	d02a      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007612:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007616:	d822      	bhi.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007618:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800761c:	d026      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800761e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007622:	d81c      	bhi.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007624:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007628:	d010      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800762a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800762e:	d816      	bhi.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007630:	2b00      	cmp	r3, #0
 8007632:	d01d      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007638:	d111      	bne.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	3304      	adds	r3, #4
 800763e:	2101      	movs	r1, #1
 8007640:	4618      	mov	r0, r3
 8007642:	f001 fd37 	bl	80090b4 <RCCEx_PLL2_Config>
 8007646:	4603      	mov	r3, r0
 8007648:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800764a:	e012      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3324      	adds	r3, #36	; 0x24
 8007650:	2101      	movs	r1, #1
 8007652:	4618      	mov	r0, r3
 8007654:	f001 fde0 	bl	8009218 <RCCEx_PLL3_Config>
 8007658:	4603      	mov	r3, r0
 800765a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800765c:	e009      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	75fb      	strb	r3, [r7, #23]
      break;
 8007662:	e006      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007664:	bf00      	nop
 8007666:	e004      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007668:	bf00      	nop
 800766a:	e002      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800766c:	bf00      	nop
 800766e:	e000      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007670:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007672:	7dfb      	ldrb	r3, [r7, #23]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d109      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007678:	4b73      	ldr	r3, [pc, #460]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800767a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007684:	4970      	ldr	r1, [pc, #448]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007686:	4313      	orrs	r3, r2
 8007688:	650b      	str	r3, [r1, #80]	; 0x50
 800768a:	e001      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768c:	7dfb      	ldrb	r3, [r7, #23]
 800768e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d04b      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80076a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076a6:	d02e      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80076a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076ac:	d828      	bhi.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80076ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b2:	d02a      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80076b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b8:	d822      	bhi.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80076ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076be:	d026      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80076c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076c4:	d81c      	bhi.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80076c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076ca:	d010      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x496>
 80076cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076d0:	d816      	bhi.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d01d      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80076d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076da:	d111      	bne.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	3304      	adds	r3, #4
 80076e0:	2101      	movs	r1, #1
 80076e2:	4618      	mov	r0, r3
 80076e4:	f001 fce6 	bl	80090b4 <RCCEx_PLL2_Config>
 80076e8:	4603      	mov	r3, r0
 80076ea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80076ec:	e012      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	3324      	adds	r3, #36	; 0x24
 80076f2:	2101      	movs	r1, #1
 80076f4:	4618      	mov	r0, r3
 80076f6:	f001 fd8f 	bl	8009218 <RCCEx_PLL3_Config>
 80076fa:	4603      	mov	r3, r0
 80076fc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80076fe:	e009      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	75fb      	strb	r3, [r7, #23]
      break;
 8007704:	e006      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007706:	bf00      	nop
 8007708:	e004      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800770a:	bf00      	nop
 800770c:	e002      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800770e:	bf00      	nop
 8007710:	e000      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007714:	7dfb      	ldrb	r3, [r7, #23]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10a      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800771a:	4b4b      	ldr	r3, [pc, #300]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800771c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800771e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007728:	4947      	ldr	r1, [pc, #284]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800772a:	4313      	orrs	r3, r2
 800772c:	658b      	str	r3, [r1, #88]	; 0x58
 800772e:	e001      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d02f      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007748:	d00e      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800774a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800774e:	d814      	bhi.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007750:	2b00      	cmp	r3, #0
 8007752:	d015      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007754:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007758:	d10f      	bne.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800775a:	4b3b      	ldr	r3, [pc, #236]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800775c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775e:	4a3a      	ldr	r2, [pc, #232]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007764:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007766:	e00c      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	3304      	adds	r3, #4
 800776c:	2101      	movs	r1, #1
 800776e:	4618      	mov	r0, r3
 8007770:	f001 fca0 	bl	80090b4 <RCCEx_PLL2_Config>
 8007774:	4603      	mov	r3, r0
 8007776:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007778:	e003      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	75fb      	strb	r3, [r7, #23]
      break;
 800777e:	e000      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8007780:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007782:	7dfb      	ldrb	r3, [r7, #23]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d109      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007788:	4b2f      	ldr	r3, [pc, #188]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800778a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800778c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007794:	492c      	ldr	r1, [pc, #176]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007796:	4313      	orrs	r3, r2
 8007798:	650b      	str	r3, [r1, #80]	; 0x50
 800779a:	e001      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d032      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d81b      	bhi.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x594>
 80077b4:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80077b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ba:	bf00      	nop
 80077bc:	080077f3 	.word	0x080077f3
 80077c0:	080077cd 	.word	0x080077cd
 80077c4:	080077db 	.word	0x080077db
 80077c8:	080077f3 	.word	0x080077f3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077cc:	4b1e      	ldr	r3, [pc, #120]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80077ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d0:	4a1d      	ldr	r2, [pc, #116]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80077d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80077d8:	e00c      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	3304      	adds	r3, #4
 80077de:	2102      	movs	r1, #2
 80077e0:	4618      	mov	r0, r3
 80077e2:	f001 fc67 	bl	80090b4 <RCCEx_PLL2_Config>
 80077e6:	4603      	mov	r3, r0
 80077e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80077ea:	e003      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	75fb      	strb	r3, [r7, #23]
      break;
 80077f0:	e000      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80077f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077f4:	7dfb      	ldrb	r3, [r7, #23]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d109      	bne.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80077fa:	4b13      	ldr	r3, [pc, #76]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80077fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077fe:	f023 0203 	bic.w	r2, r3, #3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007806:	4910      	ldr	r1, [pc, #64]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007808:	4313      	orrs	r3, r2
 800780a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800780c:	e001      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780e:	7dfb      	ldrb	r3, [r7, #23]
 8007810:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 808a 	beq.w	8007934 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007820:	4b0a      	ldr	r3, [pc, #40]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a09      	ldr	r2, [pc, #36]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800782a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800782c:	f7f9 fc98 	bl	8001160 <HAL_GetTick>
 8007830:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007832:	e00d      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007834:	f7f9 fc94 	bl	8001160 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	2b64      	cmp	r3, #100	; 0x64
 8007840:	d906      	bls.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	75fb      	strb	r3, [r7, #23]
        break;
 8007846:	e009      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007848:	58024400 	.word	0x58024400
 800784c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007850:	4bb9      	ldr	r3, [pc, #740]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007858:	2b00      	cmp	r3, #0
 800785a:	d0eb      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800785c:	7dfb      	ldrb	r3, [r7, #23]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d166      	bne.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007862:	4bb6      	ldr	r3, [pc, #728]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007864:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800786c:	4053      	eors	r3, r2
 800786e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007872:	2b00      	cmp	r3, #0
 8007874:	d013      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007876:	4bb1      	ldr	r3, [pc, #708]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800787e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007880:	4bae      	ldr	r3, [pc, #696]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007884:	4aad      	ldr	r2, [pc, #692]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800788a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800788c:	4bab      	ldr	r3, [pc, #684]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800788e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007890:	4aaa      	ldr	r2, [pc, #680]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007896:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007898:	4aa8      	ldr	r2, [pc, #672]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80078a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078a8:	d115      	bne.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078aa:	f7f9 fc59 	bl	8001160 <HAL_GetTick>
 80078ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078b0:	e00b      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078b2:	f7f9 fc55 	bl	8001160 <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d902      	bls.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	75fb      	strb	r3, [r7, #23]
            break;
 80078c8:	e005      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078ca:	4b9c      	ldr	r3, [pc, #624]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80078cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d0ed      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d126      	bne.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80078e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078ea:	d10d      	bne.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80078ec:	4b93      	ldr	r3, [pc, #588]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80078fa:	0919      	lsrs	r1, r3, #4
 80078fc:	4b90      	ldr	r3, [pc, #576]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80078fe:	400b      	ands	r3, r1
 8007900:	498e      	ldr	r1, [pc, #568]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007902:	4313      	orrs	r3, r2
 8007904:	610b      	str	r3, [r1, #16]
 8007906:	e005      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8007908:	4b8c      	ldr	r3, [pc, #560]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	4a8b      	ldr	r2, [pc, #556]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800790e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007912:	6113      	str	r3, [r2, #16]
 8007914:	4b89      	ldr	r3, [pc, #548]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007916:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800791e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007922:	4986      	ldr	r1, [pc, #536]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007924:	4313      	orrs	r3, r2
 8007926:	670b      	str	r3, [r1, #112]	; 0x70
 8007928:	e004      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800792a:	7dfb      	ldrb	r3, [r7, #23]
 800792c:	75bb      	strb	r3, [r7, #22]
 800792e:	e001      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007930:	7dfb      	ldrb	r3, [r7, #23]
 8007932:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	2b00      	cmp	r3, #0
 800793e:	d07e      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007944:	2b28      	cmp	r3, #40	; 0x28
 8007946:	d867      	bhi.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8007948:	a201      	add	r2, pc, #4	; (adr r2, 8007950 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800794a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794e:	bf00      	nop
 8007950:	08007a1f 	.word	0x08007a1f
 8007954:	08007a19 	.word	0x08007a19
 8007958:	08007a19 	.word	0x08007a19
 800795c:	08007a19 	.word	0x08007a19
 8007960:	08007a19 	.word	0x08007a19
 8007964:	08007a19 	.word	0x08007a19
 8007968:	08007a19 	.word	0x08007a19
 800796c:	08007a19 	.word	0x08007a19
 8007970:	080079f5 	.word	0x080079f5
 8007974:	08007a19 	.word	0x08007a19
 8007978:	08007a19 	.word	0x08007a19
 800797c:	08007a19 	.word	0x08007a19
 8007980:	08007a19 	.word	0x08007a19
 8007984:	08007a19 	.word	0x08007a19
 8007988:	08007a19 	.word	0x08007a19
 800798c:	08007a19 	.word	0x08007a19
 8007990:	08007a07 	.word	0x08007a07
 8007994:	08007a19 	.word	0x08007a19
 8007998:	08007a19 	.word	0x08007a19
 800799c:	08007a19 	.word	0x08007a19
 80079a0:	08007a19 	.word	0x08007a19
 80079a4:	08007a19 	.word	0x08007a19
 80079a8:	08007a19 	.word	0x08007a19
 80079ac:	08007a19 	.word	0x08007a19
 80079b0:	08007a1f 	.word	0x08007a1f
 80079b4:	08007a19 	.word	0x08007a19
 80079b8:	08007a19 	.word	0x08007a19
 80079bc:	08007a19 	.word	0x08007a19
 80079c0:	08007a19 	.word	0x08007a19
 80079c4:	08007a19 	.word	0x08007a19
 80079c8:	08007a19 	.word	0x08007a19
 80079cc:	08007a19 	.word	0x08007a19
 80079d0:	08007a1f 	.word	0x08007a1f
 80079d4:	08007a19 	.word	0x08007a19
 80079d8:	08007a19 	.word	0x08007a19
 80079dc:	08007a19 	.word	0x08007a19
 80079e0:	08007a19 	.word	0x08007a19
 80079e4:	08007a19 	.word	0x08007a19
 80079e8:	08007a19 	.word	0x08007a19
 80079ec:	08007a19 	.word	0x08007a19
 80079f0:	08007a1f 	.word	0x08007a1f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	3304      	adds	r3, #4
 80079f8:	2101      	movs	r1, #1
 80079fa:	4618      	mov	r0, r3
 80079fc:	f001 fb5a 	bl	80090b4 <RCCEx_PLL2_Config>
 8007a00:	4603      	mov	r3, r0
 8007a02:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007a04:	e00c      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	3324      	adds	r3, #36	; 0x24
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f001 fc03 	bl	8009218 <RCCEx_PLL3_Config>
 8007a12:	4603      	mov	r3, r0
 8007a14:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007a16:	e003      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a1c:	e000      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8007a1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a20:	7dfb      	ldrb	r3, [r7, #23]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d109      	bne.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007a26:	4b45      	ldr	r3, [pc, #276]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a32:	4942      	ldr	r1, [pc, #264]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007a34:	4313      	orrs	r3, r2
 8007a36:	654b      	str	r3, [r1, #84]	; 0x54
 8007a38:	e001      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a3a:	7dfb      	ldrb	r3, [r7, #23]
 8007a3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d037      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4e:	2b05      	cmp	r3, #5
 8007a50:	d820      	bhi.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007a52:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a58:	08007a9b 	.word	0x08007a9b
 8007a5c:	08007a71 	.word	0x08007a71
 8007a60:	08007a83 	.word	0x08007a83
 8007a64:	08007a9b 	.word	0x08007a9b
 8007a68:	08007a9b 	.word	0x08007a9b
 8007a6c:	08007a9b 	.word	0x08007a9b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	3304      	adds	r3, #4
 8007a74:	2101      	movs	r1, #1
 8007a76:	4618      	mov	r0, r3
 8007a78:	f001 fb1c 	bl	80090b4 <RCCEx_PLL2_Config>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007a80:	e00c      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	3324      	adds	r3, #36	; 0x24
 8007a86:	2101      	movs	r1, #1
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 fbc5 	bl	8009218 <RCCEx_PLL3_Config>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007a92:	e003      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	75fb      	strb	r3, [r7, #23]
      break;
 8007a98:	e000      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8007a9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d109      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007aa2:	4b26      	ldr	r3, [pc, #152]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa6:	f023 0207 	bic.w	r2, r3, #7
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aae:	4923      	ldr	r1, [pc, #140]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	654b      	str	r3, [r1, #84]	; 0x54
 8007ab4:	e001      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
 8007ab8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0304 	and.w	r3, r3, #4
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d040      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007acc:	2b05      	cmp	r3, #5
 8007ace:	d821      	bhi.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007ad0:	a201      	add	r2, pc, #4	; (adr r2, 8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8007ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad6:	bf00      	nop
 8007ad8:	08007b1b 	.word	0x08007b1b
 8007adc:	08007af1 	.word	0x08007af1
 8007ae0:	08007b03 	.word	0x08007b03
 8007ae4:	08007b1b 	.word	0x08007b1b
 8007ae8:	08007b1b 	.word	0x08007b1b
 8007aec:	08007b1b 	.word	0x08007b1b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3304      	adds	r3, #4
 8007af4:	2101      	movs	r1, #1
 8007af6:	4618      	mov	r0, r3
 8007af8:	f001 fadc 	bl	80090b4 <RCCEx_PLL2_Config>
 8007afc:	4603      	mov	r3, r0
 8007afe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007b00:	e00c      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	3324      	adds	r3, #36	; 0x24
 8007b06:	2101      	movs	r1, #1
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f001 fb85 	bl	8009218 <RCCEx_PLL3_Config>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007b12:	e003      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	75fb      	strb	r3, [r7, #23]
      break;
 8007b18:	e000      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8007b1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b1c:	7dfb      	ldrb	r3, [r7, #23]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d110      	bne.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b22:	4b06      	ldr	r3, [pc, #24]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b26:	f023 0207 	bic.w	r2, r3, #7
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b30:	4902      	ldr	r1, [pc, #8]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	658b      	str	r3, [r1, #88]	; 0x58
 8007b36:	e007      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8007b38:	58024800 	.word	0x58024800
 8007b3c:	58024400 	.word	0x58024400
 8007b40:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
 8007b46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0320 	and.w	r3, r3, #32
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d04b      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b5e:	d02e      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b64:	d828      	bhi.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b6a:	d02a      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b70:	d822      	bhi.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007b72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b76:	d026      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007b78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b7c:	d81c      	bhi.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b82:	d010      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8007b84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b88:	d816      	bhi.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d01d      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x972>
 8007b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b92:	d111      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	3304      	adds	r3, #4
 8007b98:	2100      	movs	r1, #0
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f001 fa8a 	bl	80090b4 <RCCEx_PLL2_Config>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007ba4:	e012      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	3324      	adds	r3, #36	; 0x24
 8007baa:	2102      	movs	r1, #2
 8007bac:	4618      	mov	r0, r3
 8007bae:	f001 fb33 	bl	8009218 <RCCEx_PLL3_Config>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007bb6:	e009      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	75fb      	strb	r3, [r7, #23]
      break;
 8007bbc:	e006      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007bbe:	bf00      	nop
 8007bc0:	e004      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007bc2:	bf00      	nop
 8007bc4:	e002      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007bc6:	bf00      	nop
 8007bc8:	e000      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bcc:	7dfb      	ldrb	r3, [r7, #23]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10a      	bne.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007bd2:	4bb2      	ldr	r3, [pc, #712]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be0:	49ae      	ldr	r1, [pc, #696]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	654b      	str	r3, [r1, #84]	; 0x54
 8007be6:	e001      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d04b      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bfe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007c02:	d02e      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007c04:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007c08:	d828      	bhi.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c0e:	d02a      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8007c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c14:	d822      	bhi.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007c16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c1a:	d026      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007c1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c20:	d81c      	bhi.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c26:	d010      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8007c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c2c:	d816      	bhi.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d01d      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c36:	d111      	bne.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f001 fa38 	bl	80090b4 <RCCEx_PLL2_Config>
 8007c44:	4603      	mov	r3, r0
 8007c46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007c48:	e012      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	3324      	adds	r3, #36	; 0x24
 8007c4e:	2102      	movs	r1, #2
 8007c50:	4618      	mov	r0, r3
 8007c52:	f001 fae1 	bl	8009218 <RCCEx_PLL3_Config>
 8007c56:	4603      	mov	r3, r0
 8007c58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007c5a:	e009      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c60:	e006      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007c62:	bf00      	nop
 8007c64:	e004      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007c66:	bf00      	nop
 8007c68:	e002      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007c6a:	bf00      	nop
 8007c6c:	e000      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007c6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10a      	bne.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c76:	4b89      	ldr	r3, [pc, #548]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c7a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c84:	4985      	ldr	r1, [pc, #532]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	658b      	str	r3, [r1, #88]	; 0x58
 8007c8a:	e001      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
 8007c8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d04b      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ca2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007ca6:	d02e      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007ca8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007cac:	d828      	bhi.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cb2:	d02a      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8007cb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cb8:	d822      	bhi.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007cba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007cbe:	d026      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8007cc0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007cc4:	d81c      	bhi.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007cc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cca:	d010      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8007ccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cd0:	d816      	bhi.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d01d      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8007cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cda:	d111      	bne.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	3304      	adds	r3, #4
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f001 f9e6 	bl	80090b4 <RCCEx_PLL2_Config>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007cec:	e012      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3324      	adds	r3, #36	; 0x24
 8007cf2:	2102      	movs	r1, #2
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f001 fa8f 	bl	8009218 <RCCEx_PLL3_Config>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007cfe:	e009      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	75fb      	strb	r3, [r7, #23]
      break;
 8007d04:	e006      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007d06:	bf00      	nop
 8007d08:	e004      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007d0a:	bf00      	nop
 8007d0c:	e002      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007d0e:	bf00      	nop
 8007d10:	e000      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007d12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10a      	bne.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007d1a:	4b60      	ldr	r3, [pc, #384]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d28:	495c      	ldr	r1, [pc, #368]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	658b      	str	r3, [r1, #88]	; 0x58
 8007d2e:	e001      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d30:	7dfb      	ldrb	r3, [r7, #23]
 8007d32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0308 	and.w	r3, r3, #8
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d018      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d48:	d10a      	bne.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	3324      	adds	r3, #36	; 0x24
 8007d4e:	2102      	movs	r1, #2
 8007d50:	4618      	mov	r0, r3
 8007d52:	f001 fa61 	bl	8009218 <RCCEx_PLL3_Config>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007d60:	4b4e      	ldr	r3, [pc, #312]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d6c:	494b      	ldr	r1, [pc, #300]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0310 	and.w	r3, r3, #16
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d01a      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d88:	d10a      	bne.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3324      	adds	r3, #36	; 0x24
 8007d8e:	2102      	movs	r1, #2
 8007d90:	4618      	mov	r0, r3
 8007d92:	f001 fa41 	bl	8009218 <RCCEx_PLL3_Config>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007da0:	4b3e      	ldr	r3, [pc, #248]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dae:	493b      	ldr	r1, [pc, #236]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d034      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dca:	d01d      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007dcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dd0:	d817      	bhi.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d003      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dda:	d009      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007ddc:	e011      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	3304      	adds	r3, #4
 8007de2:	2100      	movs	r1, #0
 8007de4:	4618      	mov	r0, r3
 8007de6:	f001 f965 	bl	80090b4 <RCCEx_PLL2_Config>
 8007dea:	4603      	mov	r3, r0
 8007dec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007dee:	e00c      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3324      	adds	r3, #36	; 0x24
 8007df4:	2102      	movs	r1, #2
 8007df6:	4618      	mov	r0, r3
 8007df8:	f001 fa0e 	bl	8009218 <RCCEx_PLL3_Config>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007e00:	e003      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	75fb      	strb	r3, [r7, #23]
      break;
 8007e06:	e000      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8007e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e0a:	7dfb      	ldrb	r3, [r7, #23]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10a      	bne.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e10:	4b22      	ldr	r3, [pc, #136]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e1e:	491f      	ldr	r1, [pc, #124]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007e20:	4313      	orrs	r3, r2
 8007e22:	658b      	str	r3, [r1, #88]	; 0x58
 8007e24:	e001      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d036      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e40:	d01c      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007e42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e46:	d816      	bhi.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007e48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e4c:	d003      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007e4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e52:	d007      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8007e54:	e00f      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e56:	4b11      	ldr	r3, [pc, #68]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5a:	4a10      	ldr	r2, [pc, #64]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007e62:	e00c      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3324      	adds	r3, #36	; 0x24
 8007e68:	2101      	movs	r1, #1
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f001 f9d4 	bl	8009218 <RCCEx_PLL3_Config>
 8007e70:	4603      	mov	r3, r0
 8007e72:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007e74:	e003      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	75fb      	strb	r3, [r7, #23]
      break;
 8007e7a:	e000      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8007e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e7e:	7dfb      	ldrb	r3, [r7, #23]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10d      	bne.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e84:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e92:	4902      	ldr	r1, [pc, #8]	; (8007e9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	654b      	str	r3, [r1, #84]	; 0x54
 8007e98:	e004      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8007e9a:	bf00      	nop
 8007e9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ea0:	7dfb      	ldrb	r3, [r7, #23]
 8007ea2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d029      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d003      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ebc:	d007      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007ebe:	e00f      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ec0:	4b61      	ldr	r3, [pc, #388]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec4:	4a60      	ldr	r2, [pc, #384]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007eca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007ecc:	e00b      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	2102      	movs	r1, #2
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f001 f8ed 	bl	80090b4 <RCCEx_PLL2_Config>
 8007eda:	4603      	mov	r3, r0
 8007edc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007ede:	e002      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ee6:	7dfb      	ldrb	r3, [r7, #23]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d109      	bne.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007eec:	4b56      	ldr	r3, [pc, #344]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ef0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ef8:	4953      	ldr	r1, [pc, #332]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007efa:	4313      	orrs	r3, r2
 8007efc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007efe:	e001      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f00:	7dfb      	ldrb	r3, [r7, #23]
 8007f02:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00a      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	3324      	adds	r3, #36	; 0x24
 8007f14:	2102      	movs	r1, #2
 8007f16:	4618      	mov	r0, r3
 8007f18:	f001 f97e 	bl	8009218 <RCCEx_PLL3_Config>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d030      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f3a:	d017      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f40:	d811      	bhi.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f46:	d013      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8007f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f4c:	d80b      	bhi.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d010      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8007f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f56:	d106      	bne.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f58:	4b3b      	ldr	r3, [pc, #236]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5c:	4a3a      	ldr	r2, [pc, #232]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007f64:	e007      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	75fb      	strb	r3, [r7, #23]
      break;
 8007f6a:	e004      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007f6c:	bf00      	nop
 8007f6e:	e002      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007f70:	bf00      	nop
 8007f72:	e000      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f76:	7dfb      	ldrb	r3, [r7, #23]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d109      	bne.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f7c:	4b32      	ldr	r3, [pc, #200]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f88:	492f      	ldr	r1, [pc, #188]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	654b      	str	r3, [r1, #84]	; 0x54
 8007f8e:	e001      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f90:	7dfb      	ldrb	r3, [r7, #23]
 8007f92:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d008      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007fa0:	4b29      	ldr	r3, [pc, #164]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fa4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fac:	4926      	ldr	r1, [pc, #152]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d008      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007fbe:	4b22      	ldr	r3, [pc, #136]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fc2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fca:	491f      	ldr	r1, [pc, #124]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00d      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007fdc:	4b1a      	ldr	r3, [pc, #104]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	4a19      	ldr	r2, [pc, #100]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007fe2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fe6:	6113      	str	r3, [r2, #16]
 8007fe8:	4b17      	ldr	r3, [pc, #92]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007fea:	691a      	ldr	r2, [r3, #16]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ff2:	4915      	ldr	r1, [pc, #84]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	da08      	bge.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008000:	4b11      	ldr	r3, [pc, #68]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008004:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800800c:	490e      	ldr	r1, [pc, #56]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800800e:	4313      	orrs	r3, r2
 8008010:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d009      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800801e:	4b0a      	ldr	r3, [pc, #40]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008022:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800802c:	4906      	ldr	r1, [pc, #24]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800802e:	4313      	orrs	r3, r2
 8008030:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008032:	7dbb      	ldrb	r3, [r7, #22]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d101      	bne.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	e000      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
}
 800803e:	4618      	mov	r0, r3
 8008040:	3718      	adds	r7, #24
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	58024400 	.word	0x58024400

0800804c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b090      	sub	sp, #64	; 0x40
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800805a:	f040 8089 	bne.w	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800805e:	4b95      	ldr	r3, [pc, #596]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008062:	f003 0307 	and.w	r3, r3, #7
 8008066:	633b      	str	r3, [r7, #48]	; 0x30
 8008068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806a:	2b04      	cmp	r3, #4
 800806c:	d87d      	bhi.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800806e:	a201      	add	r2, pc, #4	; (adr r2, 8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008074:	08008089 	.word	0x08008089
 8008078:	080080ad 	.word	0x080080ad
 800807c:	080080d1 	.word	0x080080d1
 8008080:	08008165 	.word	0x08008165
 8008084:	080080f5 	.word	0x080080f5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008088:	4b8a      	ldr	r3, [pc, #552]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008090:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008094:	d107      	bne.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800809a:	4618      	mov	r0, r3
 800809c:	f000 feb8 	bl	8008e10 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80080a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80080a4:	e3ed      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80080a6:	2300      	movs	r3, #0
 80080a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080aa:	e3ea      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080ac:	4b81      	ldr	r3, [pc, #516]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080b8:	d107      	bne.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080ba:	f107 0318 	add.w	r3, r7, #24
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 fbfe 	bl	80088c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80080c8:	e3db      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80080ca:	2300      	movs	r3, #0
 80080cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080ce:	e3d8      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080d0:	4b78      	ldr	r3, [pc, #480]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080dc:	d107      	bne.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080de:	f107 030c 	add.w	r3, r7, #12
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 fd40 	bl	8008b68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80080ec:	e3c9      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80080ee:	2300      	movs	r3, #0
 80080f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080f2:	e3c6      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80080f4:	4b6f      	ldr	r3, [pc, #444]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80080f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080fc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080fe:	4b6d      	ldr	r3, [pc, #436]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 0304 	and.w	r3, r3, #4
 8008106:	2b04      	cmp	r3, #4
 8008108:	d10c      	bne.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800810a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810c:	2b00      	cmp	r3, #0
 800810e:	d109      	bne.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008110:	4b68      	ldr	r3, [pc, #416]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	08db      	lsrs	r3, r3, #3
 8008116:	f003 0303 	and.w	r3, r3, #3
 800811a:	4a67      	ldr	r2, [pc, #412]	; (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800811c:	fa22 f303 	lsr.w	r3, r2, r3
 8008120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008122:	e01e      	b.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008124:	4b63      	ldr	r3, [pc, #396]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008130:	d106      	bne.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008134:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008138:	d102      	bne.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800813a:	4b60      	ldr	r3, [pc, #384]	; (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800813c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800813e:	e010      	b.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008140:	4b5c      	ldr	r3, [pc, #368]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008148:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800814c:	d106      	bne.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800814e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008154:	d102      	bne.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008156:	4b5a      	ldr	r3, [pc, #360]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800815a:	e002      	b.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800815c:	2300      	movs	r3, #0
 800815e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008160:	e38f      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008162:	e38e      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008164:	4b57      	ldr	r3, [pc, #348]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008166:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008168:	e38b      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800816a:	2300      	movs	r3, #0
 800816c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800816e:	e388      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008176:	f040 80a7 	bne.w	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800817a:	4b4e      	ldr	r3, [pc, #312]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800817c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800817e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008182:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008186:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800818a:	d054      	beq.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008192:	f200 808b 	bhi.w	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008198:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800819c:	f000 8083 	beq.w	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80081a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80081a6:	f200 8081 	bhi.w	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80081aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081b0:	d02f      	beq.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80081b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081b8:	d878      	bhi.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80081ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d004      	beq.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081c6:	d012      	beq.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80081c8:	e070      	b.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081ca:	4b3a      	ldr	r3, [pc, #232]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081d6:	d107      	bne.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081dc:	4618      	mov	r0, r3
 80081de:	f000 fe17 	bl	8008e10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80081e6:	e34c      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80081e8:	2300      	movs	r3, #0
 80081ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081ec:	e349      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081ee:	4b31      	ldr	r3, [pc, #196]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081fa:	d107      	bne.n	800820c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081fc:	f107 0318 	add.w	r3, r7, #24
 8008200:	4618      	mov	r0, r3
 8008202:	f000 fb5d 	bl	80088c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800820a:	e33a      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800820c:	2300      	movs	r3, #0
 800820e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008210:	e337      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008212:	4b28      	ldr	r3, [pc, #160]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800821a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800821e:	d107      	bne.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008220:	f107 030c 	add.w	r3, r7, #12
 8008224:	4618      	mov	r0, r3
 8008226:	f000 fc9f 	bl	8008b68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800822e:	e328      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008230:	2300      	movs	r3, #0
 8008232:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008234:	e325      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008236:	4b1f      	ldr	r3, [pc, #124]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800823a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800823e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008240:	4b1c      	ldr	r3, [pc, #112]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0304 	and.w	r3, r3, #4
 8008248:	2b04      	cmp	r3, #4
 800824a:	d10c      	bne.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800824c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800824e:	2b00      	cmp	r3, #0
 8008250:	d109      	bne.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008252:	4b18      	ldr	r3, [pc, #96]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	08db      	lsrs	r3, r3, #3
 8008258:	f003 0303 	and.w	r3, r3, #3
 800825c:	4a16      	ldr	r2, [pc, #88]	; (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800825e:	fa22 f303 	lsr.w	r3, r2, r3
 8008262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008264:	e01e      	b.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008266:	4b13      	ldr	r3, [pc, #76]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800826e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008272:	d106      	bne.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008276:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800827a:	d102      	bne.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800827c:	4b0f      	ldr	r3, [pc, #60]	; (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800827e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008280:	e010      	b.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008282:	4b0c      	ldr	r3, [pc, #48]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800828a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800828e:	d106      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008292:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008296:	d102      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008298:	4b09      	ldr	r3, [pc, #36]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800829a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800829c:	e002      	b.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800829e:	2300      	movs	r3, #0
 80082a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80082a2:	e2ee      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80082a4:	e2ed      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80082a6:	4b07      	ldr	r3, [pc, #28]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082aa:	e2ea      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082b0:	e2e7      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80082b2:	bf00      	nop
 80082b4:	58024400 	.word	0x58024400
 80082b8:	03d09000 	.word	0x03d09000
 80082bc:	003d0900 	.word	0x003d0900
 80082c0:	007a1200 	.word	0x007a1200
 80082c4:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082ce:	f040 809c 	bne.w	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80082d2:	4b9e      	ldr	r3, [pc, #632]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80082d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082d6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80082da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80082dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082e2:	d054      	beq.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80082e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082ea:	f200 808b 	bhi.w	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80082ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80082f4:	f000 8083 	beq.w	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80082f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80082fe:	f200 8081 	bhi.w	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008304:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008308:	d02f      	beq.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008310:	d878      	bhi.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008314:	2b00      	cmp	r3, #0
 8008316:	d004      	beq.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800831e:	d012      	beq.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008320:	e070      	b.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008322:	4b8a      	ldr	r3, [pc, #552]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800832a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800832e:	d107      	bne.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008334:	4618      	mov	r0, r3
 8008336:	f000 fd6b 	bl	8008e10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800833a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800833e:	e2a0      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008340:	2300      	movs	r3, #0
 8008342:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008344:	e29d      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008346:	4b81      	ldr	r3, [pc, #516]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800834e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008352:	d107      	bne.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008354:	f107 0318 	add.w	r3, r7, #24
 8008358:	4618      	mov	r0, r3
 800835a:	f000 fab1 	bl	80088c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008362:	e28e      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008368:	e28b      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800836a:	4b78      	ldr	r3, [pc, #480]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008376:	d107      	bne.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008378:	f107 030c 	add.w	r3, r7, #12
 800837c:	4618      	mov	r0, r3
 800837e:	f000 fbf3 	bl	8008b68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008386:	e27c      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008388:	2300      	movs	r3, #0
 800838a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800838c:	e279      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800838e:	4b6f      	ldr	r3, [pc, #444]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008392:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008396:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008398:	4b6c      	ldr	r3, [pc, #432]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0304 	and.w	r3, r3, #4
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	d10c      	bne.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80083a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d109      	bne.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80083aa:	4b68      	ldr	r3, [pc, #416]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	08db      	lsrs	r3, r3, #3
 80083b0:	f003 0303 	and.w	r3, r3, #3
 80083b4:	4a66      	ldr	r2, [pc, #408]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80083b6:	fa22 f303 	lsr.w	r3, r2, r3
 80083ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083bc:	e01e      	b.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083be:	4b63      	ldr	r3, [pc, #396]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ca:	d106      	bne.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80083cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083d2:	d102      	bne.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80083d4:	4b5f      	ldr	r3, [pc, #380]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80083d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083d8:	e010      	b.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083da:	4b5c      	ldr	r3, [pc, #368]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083e6:	d106      	bne.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80083e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ee:	d102      	bne.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80083f0:	4b59      	ldr	r3, [pc, #356]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80083f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083f4:	e002      	b.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80083f6:	2300      	movs	r3, #0
 80083f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80083fa:	e242      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80083fc:	e241      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80083fe:	4b57      	ldr	r3, [pc, #348]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008400:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008402:	e23e      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008408:	e23b      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008410:	f040 80a6 	bne.w	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008414:	4b4d      	ldr	r3, [pc, #308]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008418:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800841c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800841e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008424:	d054      	beq.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8008426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008428:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800842c:	f200 808b 	bhi.w	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008432:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008436:	f000 8083 	beq.w	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800843a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008440:	f200 8081 	bhi.w	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800844a:	d02f      	beq.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008452:	d878      	bhi.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008456:	2b00      	cmp	r3, #0
 8008458:	d004      	beq.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800845a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008460:	d012      	beq.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8008462:	e070      	b.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008464:	4b39      	ldr	r3, [pc, #228]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800846c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008470:	d107      	bne.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008476:	4618      	mov	r0, r3
 8008478:	f000 fcca 	bl	8008e10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800847c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008480:	e1ff      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008482:	2300      	movs	r3, #0
 8008484:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008486:	e1fc      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008488:	4b30      	ldr	r3, [pc, #192]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008490:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008494:	d107      	bne.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008496:	f107 0318 	add.w	r3, r7, #24
 800849a:	4618      	mov	r0, r3
 800849c:	f000 fa10 	bl	80088c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084a4:	e1ed      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084aa:	e1ea      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084ac:	4b27      	ldr	r3, [pc, #156]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084b8:	d107      	bne.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084ba:	f107 030c 	add.w	r3, r7, #12
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 fb52 	bl	8008b68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084c8:	e1db      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80084ca:	2300      	movs	r3, #0
 80084cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084ce:	e1d8      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80084d0:	4b1e      	ldr	r3, [pc, #120]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80084d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084d8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084da:	4b1c      	ldr	r3, [pc, #112]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 0304 	and.w	r3, r3, #4
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	d10c      	bne.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80084e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d109      	bne.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084ec:	4b17      	ldr	r3, [pc, #92]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	08db      	lsrs	r3, r3, #3
 80084f2:	f003 0303 	and.w	r3, r3, #3
 80084f6:	4a16      	ldr	r2, [pc, #88]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80084f8:	fa22 f303 	lsr.w	r3, r2, r3
 80084fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084fe:	e01e      	b.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008500:	4b12      	ldr	r3, [pc, #72]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800850c:	d106      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800850e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008510:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008514:	d102      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008516:	4b0f      	ldr	r3, [pc, #60]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008518:	63fb      	str	r3, [r7, #60]	; 0x3c
 800851a:	e010      	b.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800851c:	4b0b      	ldr	r3, [pc, #44]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008524:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008528:	d106      	bne.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800852a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800852c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008530:	d102      	bne.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008532:	4b09      	ldr	r3, [pc, #36]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008536:	e002      	b.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008538:	2300      	movs	r3, #0
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800853c:	e1a1      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800853e:	e1a0      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008540:	4b06      	ldr	r3, [pc, #24]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008542:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008544:	e19d      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008546:	2300      	movs	r3, #0
 8008548:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800854a:	e19a      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800854c:	58024400 	.word	0x58024400
 8008550:	03d09000 	.word	0x03d09000
 8008554:	003d0900 	.word	0x003d0900
 8008558:	007a1200 	.word	0x007a1200
 800855c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008566:	d173      	bne.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008568:	4b9a      	ldr	r3, [pc, #616]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800856a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008570:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008574:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008578:	d02f      	beq.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800857a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008580:	d863      	bhi.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8008582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008584:	2b00      	cmp	r3, #0
 8008586:	d004      	beq.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8008588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800858e:	d012      	beq.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8008590:	e05b      	b.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008592:	4b90      	ldr	r3, [pc, #576]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800859a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800859e:	d107      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085a0:	f107 0318 	add.w	r3, r7, #24
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 f98b 	bl	80088c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085ae:	e168      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80085b0:	2300      	movs	r3, #0
 80085b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085b4:	e165      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085b6:	4b87      	ldr	r3, [pc, #540]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085c2:	d107      	bne.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085c4:	f107 030c 	add.w	r3, r7, #12
 80085c8:	4618      	mov	r0, r3
 80085ca:	f000 facd 	bl	8008b68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085d2:	e156      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80085d4:	2300      	movs	r3, #0
 80085d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085d8:	e153      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80085da:	4b7e      	ldr	r3, [pc, #504]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80085dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085e2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085e4:	4b7b      	ldr	r3, [pc, #492]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0304 	and.w	r3, r3, #4
 80085ec:	2b04      	cmp	r3, #4
 80085ee:	d10c      	bne.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 80085f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d109      	bne.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085f6:	4b77      	ldr	r3, [pc, #476]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	08db      	lsrs	r3, r3, #3
 80085fc:	f003 0303 	and.w	r3, r3, #3
 8008600:	4a75      	ldr	r2, [pc, #468]	; (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008602:	fa22 f303 	lsr.w	r3, r2, r3
 8008606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008608:	e01e      	b.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800860a:	4b72      	ldr	r3, [pc, #456]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008616:	d106      	bne.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8008618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800861e:	d102      	bne.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008620:	4b6e      	ldr	r3, [pc, #440]	; (80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008622:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008624:	e010      	b.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008626:	4b6b      	ldr	r3, [pc, #428]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800862e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008632:	d106      	bne.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800863a:	d102      	bne.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800863c:	4b68      	ldr	r3, [pc, #416]	; (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800863e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008640:	e002      	b.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008646:	e11c      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008648:	e11b      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800864a:	2300      	movs	r3, #0
 800864c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800864e:	e118      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008656:	d133      	bne.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008658:	4b5e      	ldr	r3, [pc, #376]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800865a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800865c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008660:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008664:	2b00      	cmp	r3, #0
 8008666:	d004      	beq.n	8008672 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800866e:	d012      	beq.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8008670:	e023      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008672:	4b58      	ldr	r3, [pc, #352]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800867a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800867e:	d107      	bne.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008684:	4618      	mov	r0, r3
 8008686:	f000 fbc3 	bl	8008e10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800868a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800868e:	e0f8      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008690:	2300      	movs	r3, #0
 8008692:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008694:	e0f5      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008696:	4b4f      	ldr	r3, [pc, #316]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800869e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086a2:	d107      	bne.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086a4:	f107 0318 	add.w	r3, r7, #24
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 f909 	bl	80088c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80086ae:	6a3b      	ldr	r3, [r7, #32]
 80086b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80086b2:	e0e6      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80086b4:	2300      	movs	r3, #0
 80086b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086b8:	e0e3      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80086ba:	2300      	movs	r3, #0
 80086bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086be:	e0e0      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086c6:	f040 808d 	bne.w	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80086ca:	4b42      	ldr	r3, [pc, #264]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80086cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ce:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80086d2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80086d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086da:	d06b      	beq.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80086dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086e2:	d874      	bhi.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80086e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ea:	d056      	beq.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80086ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f2:	d86c      	bhi.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80086f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086fa:	d03b      	beq.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80086fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008702:	d864      	bhi.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800870a:	d021      	beq.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800870c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008712:	d85c      	bhi.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008716:	2b00      	cmp	r3, #0
 8008718:	d004      	beq.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800871a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008720:	d004      	beq.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8008722:	e054      	b.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008724:	f000 f8b6 	bl	8008894 <HAL_RCCEx_GetD3PCLK1Freq>
 8008728:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800872a:	e0aa      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800872c:	4b29      	ldr	r3, [pc, #164]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008738:	d107      	bne.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800873a:	f107 0318 	add.w	r3, r7, #24
 800873e:	4618      	mov	r0, r3
 8008740:	f000 f8be 	bl	80088c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008748:	e09b      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800874a:	2300      	movs	r3, #0
 800874c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800874e:	e098      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008750:	4b20      	ldr	r3, [pc, #128]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800875c:	d107      	bne.n	800876e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800875e:	f107 030c 	add.w	r3, r7, #12
 8008762:	4618      	mov	r0, r3
 8008764:	f000 fa00 	bl	8008b68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800876c:	e089      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800876e:	2300      	movs	r3, #0
 8008770:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008772:	e086      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008774:	4b17      	ldr	r3, [pc, #92]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0304 	and.w	r3, r3, #4
 800877c:	2b04      	cmp	r3, #4
 800877e:	d109      	bne.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008780:	4b14      	ldr	r3, [pc, #80]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	08db      	lsrs	r3, r3, #3
 8008786:	f003 0303 	and.w	r3, r3, #3
 800878a:	4a13      	ldr	r2, [pc, #76]	; (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800878c:	fa22 f303 	lsr.w	r3, r2, r3
 8008790:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008792:	e076      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008794:	2300      	movs	r3, #0
 8008796:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008798:	e073      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800879a:	4b0e      	ldr	r3, [pc, #56]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087a6:	d102      	bne.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80087a8:	4b0c      	ldr	r3, [pc, #48]	; (80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80087aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80087ac:	e069      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80087ae:	2300      	movs	r3, #0
 80087b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087b2:	e066      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80087b4:	4b07      	ldr	r3, [pc, #28]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087c0:	d102      	bne.n	80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80087c2:	4b07      	ldr	r3, [pc, #28]	; (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80087c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80087c6:	e05c      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80087c8:	2300      	movs	r3, #0
 80087ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087cc:	e059      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80087ce:	2300      	movs	r3, #0
 80087d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087d2:	e056      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80087d4:	58024400 	.word	0x58024400
 80087d8:	03d09000 	.word	0x03d09000
 80087dc:	003d0900 	.word	0x003d0900
 80087e0:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087ea:	d148      	bne.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80087ec:	4b27      	ldr	r3, [pc, #156]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80087ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087f4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80087f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087fc:	d02a      	beq.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 80087fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008804:	d838      	bhi.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8008806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008808:	2b00      	cmp	r3, #0
 800880a:	d004      	beq.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800880c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008812:	d00d      	beq.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8008814:	e030      	b.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008816:	4b1d      	ldr	r3, [pc, #116]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800881e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008822:	d102      	bne.n	800882a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8008824:	4b1a      	ldr	r3, [pc, #104]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008826:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008828:	e02b      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800882a:	2300      	movs	r3, #0
 800882c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800882e:	e028      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008830:	4b16      	ldr	r3, [pc, #88]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008838:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800883c:	d107      	bne.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800883e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008842:	4618      	mov	r0, r3
 8008844:	f000 fae4 	bl	8008e10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800884c:	e019      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008852:	e016      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008854:	4b0d      	ldr	r3, [pc, #52]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800885c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008860:	d107      	bne.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008862:	f107 0318 	add.w	r3, r7, #24
 8008866:	4618      	mov	r0, r3
 8008868:	f000 f82a 	bl	80088c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008870:	e007      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008872:	2300      	movs	r3, #0
 8008874:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008876:	e004      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008878:	2300      	movs	r3, #0
 800887a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800887c:	e001      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800887e:	2300      	movs	r3, #0
 8008880:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008884:	4618      	mov	r0, r3
 8008886:	3740      	adds	r7, #64	; 0x40
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	58024400 	.word	0x58024400
 8008890:	007a1200 	.word	0x007a1200

08008894 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008898:	f7fe fc82 	bl	80071a0 <HAL_RCC_GetHCLKFreq>
 800889c:	4602      	mov	r2, r0
 800889e:	4b06      	ldr	r3, [pc, #24]	; (80088b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80088a0:	6a1b      	ldr	r3, [r3, #32]
 80088a2:	091b      	lsrs	r3, r3, #4
 80088a4:	f003 0307 	and.w	r3, r3, #7
 80088a8:	4904      	ldr	r1, [pc, #16]	; (80088bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80088aa:	5ccb      	ldrb	r3, [r1, r3]
 80088ac:	f003 031f 	and.w	r3, r3, #31
 80088b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	58024400 	.word	0x58024400
 80088bc:	0800b970 	.word	0x0800b970

080088c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b089      	sub	sp, #36	; 0x24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088c8:	4ba1      	ldr	r3, [pc, #644]	; (8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088cc:	f003 0303 	and.w	r3, r3, #3
 80088d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80088d2:	4b9f      	ldr	r3, [pc, #636]	; (8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d6:	0b1b      	lsrs	r3, r3, #12
 80088d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80088de:	4b9c      	ldr	r3, [pc, #624]	; (8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e2:	091b      	lsrs	r3, r3, #4
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80088ea:	4b99      	ldr	r3, [pc, #612]	; (8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ee:	08db      	lsrs	r3, r3, #3
 80088f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	fb02 f303 	mul.w	r3, r2, r3
 80088fa:	ee07 3a90 	vmov	s15, r3
 80088fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008902:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	2b00      	cmp	r3, #0
 800890a:	f000 8111 	beq.w	8008b30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	2b02      	cmp	r3, #2
 8008912:	f000 8083 	beq.w	8008a1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	2b02      	cmp	r3, #2
 800891a:	f200 80a1 	bhi.w	8008a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d003      	beq.n	800892c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	2b01      	cmp	r3, #1
 8008928:	d056      	beq.n	80089d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800892a:	e099      	b.n	8008a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800892c:	4b88      	ldr	r3, [pc, #544]	; (8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0320 	and.w	r3, r3, #32
 8008934:	2b00      	cmp	r3, #0
 8008936:	d02d      	beq.n	8008994 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008938:	4b85      	ldr	r3, [pc, #532]	; (8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	08db      	lsrs	r3, r3, #3
 800893e:	f003 0303 	and.w	r3, r3, #3
 8008942:	4a84      	ldr	r2, [pc, #528]	; (8008b54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008944:	fa22 f303 	lsr.w	r3, r2, r3
 8008948:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	ee07 3a90 	vmov	s15, r3
 8008950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	ee07 3a90 	vmov	s15, r3
 800895a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800895e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008962:	4b7b      	ldr	r3, [pc, #492]	; (8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800896a:	ee07 3a90 	vmov	s15, r3
 800896e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008972:	ed97 6a03 	vldr	s12, [r7, #12]
 8008976:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800897a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800897e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800898a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800898e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008992:	e087      	b.n	8008aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	ee07 3a90 	vmov	s15, r3
 800899a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008b5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80089a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089a6:	4b6a      	ldr	r3, [pc, #424]	; (8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ae:	ee07 3a90 	vmov	s15, r3
 80089b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089d6:	e065      	b.n	8008aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	ee07 3a90 	vmov	s15, r3
 80089de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008b60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80089e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ea:	4b59      	ldr	r3, [pc, #356]	; (8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f2:	ee07 3a90 	vmov	s15, r3
 80089f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80089fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a1a:	e043      	b.n	8008aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	ee07 3a90 	vmov	s15, r3
 8008a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a2e:	4b48      	ldr	r3, [pc, #288]	; (8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a36:	ee07 3a90 	vmov	s15, r3
 8008a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a42:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a5e:	e021      	b.n	8008aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	ee07 3a90 	vmov	s15, r3
 8008a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008b60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a72:	4b37      	ldr	r3, [pc, #220]	; (8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7a:	ee07 3a90 	vmov	s15, r3
 8008a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a86:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008b58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008aa2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008aa4:	4b2a      	ldr	r3, [pc, #168]	; (8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa8:	0a5b      	lsrs	r3, r3, #9
 8008aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aae:	ee07 3a90 	vmov	s15, r3
 8008ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008aba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008abe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aca:	ee17 2a90 	vmov	r2, s15
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008ad2:	4b1f      	ldr	r3, [pc, #124]	; (8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad6:	0c1b      	lsrs	r3, r3, #16
 8008ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008adc:	ee07 3a90 	vmov	s15, r3
 8008ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ae8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008aec:	edd7 6a07 	vldr	s13, [r7, #28]
 8008af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008af8:	ee17 2a90 	vmov	r2, s15
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008b00:	4b13      	ldr	r3, [pc, #76]	; (8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b04:	0e1b      	lsrs	r3, r3, #24
 8008b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b0a:	ee07 3a90 	vmov	s15, r3
 8008b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b26:	ee17 2a90 	vmov	r2, s15
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008b2e:	e008      	b.n	8008b42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	609a      	str	r2, [r3, #8]
}
 8008b42:	bf00      	nop
 8008b44:	3724      	adds	r7, #36	; 0x24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	58024400 	.word	0x58024400
 8008b54:	03d09000 	.word	0x03d09000
 8008b58:	46000000 	.word	0x46000000
 8008b5c:	4c742400 	.word	0x4c742400
 8008b60:	4a742400 	.word	0x4a742400
 8008b64:	4af42400 	.word	0x4af42400

08008b68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b089      	sub	sp, #36	; 0x24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b70:	4ba1      	ldr	r3, [pc, #644]	; (8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b74:	f003 0303 	and.w	r3, r3, #3
 8008b78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008b7a:	4b9f      	ldr	r3, [pc, #636]	; (8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7e:	0d1b      	lsrs	r3, r3, #20
 8008b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008b86:	4b9c      	ldr	r3, [pc, #624]	; (8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8a:	0a1b      	lsrs	r3, r3, #8
 8008b8c:	f003 0301 	and.w	r3, r3, #1
 8008b90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008b92:	4b99      	ldr	r3, [pc, #612]	; (8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b96:	08db      	lsrs	r3, r3, #3
 8008b98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b9c:	693a      	ldr	r2, [r7, #16]
 8008b9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ba2:	ee07 3a90 	vmov	s15, r3
 8008ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008baa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f000 8111 	beq.w	8008dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	f000 8083 	beq.w	8008cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	f200 80a1 	bhi.w	8008d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d003      	beq.n	8008bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d056      	beq.n	8008c80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008bd2:	e099      	b.n	8008d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bd4:	4b88      	ldr	r3, [pc, #544]	; (8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0320 	and.w	r3, r3, #32
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d02d      	beq.n	8008c3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008be0:	4b85      	ldr	r3, [pc, #532]	; (8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	08db      	lsrs	r3, r3, #3
 8008be6:	f003 0303 	and.w	r3, r3, #3
 8008bea:	4a84      	ldr	r2, [pc, #528]	; (8008dfc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008bec:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	ee07 3a90 	vmov	s15, r3
 8008bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	ee07 3a90 	vmov	s15, r3
 8008c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c0a:	4b7b      	ldr	r3, [pc, #492]	; (8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c12:	ee07 3a90 	vmov	s15, r3
 8008c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008c3a:	e087      	b.n	8008d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	ee07 3a90 	vmov	s15, r3
 8008c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008e04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c4e:	4b6a      	ldr	r3, [pc, #424]	; (8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c56:	ee07 3a90 	vmov	s15, r3
 8008c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c7e:	e065      	b.n	8008d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	ee07 3a90 	vmov	s15, r3
 8008c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008e08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c92:	4b59      	ldr	r3, [pc, #356]	; (8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c9a:	ee07 3a90 	vmov	s15, r3
 8008c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ca6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cc2:	e043      	b.n	8008d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cd6:	4b48      	ldr	r3, [pc, #288]	; (8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cde:	ee07 3a90 	vmov	s15, r3
 8008ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d06:	e021      	b.n	8008d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	ee07 3a90 	vmov	s15, r3
 8008d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008e08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d1a:	4b37      	ldr	r3, [pc, #220]	; (8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d22:	ee07 3a90 	vmov	s15, r3
 8008d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008e00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008d4c:	4b2a      	ldr	r3, [pc, #168]	; (8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d50:	0a5b      	lsrs	r3, r3, #9
 8008d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d56:	ee07 3a90 	vmov	s15, r3
 8008d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d66:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d72:	ee17 2a90 	vmov	r2, s15
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008d7a:	4b1f      	ldr	r3, [pc, #124]	; (8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7e:	0c1b      	lsrs	r3, r3, #16
 8008d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d84:	ee07 3a90 	vmov	s15, r3
 8008d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d94:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008da0:	ee17 2a90 	vmov	r2, s15
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008da8:	4b13      	ldr	r3, [pc, #76]	; (8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dac:	0e1b      	lsrs	r3, r3, #24
 8008dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008db2:	ee07 3a90 	vmov	s15, r3
 8008db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dce:	ee17 2a90 	vmov	r2, s15
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008dd6:	e008      	b.n	8008dea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	609a      	str	r2, [r3, #8]
}
 8008dea:	bf00      	nop
 8008dec:	3724      	adds	r7, #36	; 0x24
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	58024400 	.word	0x58024400
 8008dfc:	03d09000 	.word	0x03d09000
 8008e00:	46000000 	.word	0x46000000
 8008e04:	4c742400 	.word	0x4c742400
 8008e08:	4a742400 	.word	0x4a742400
 8008e0c:	4af42400 	.word	0x4af42400

08008e10 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b089      	sub	sp, #36	; 0x24
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e18:	4ba0      	ldr	r3, [pc, #640]	; (800909c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1c:	f003 0303 	and.w	r3, r3, #3
 8008e20:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008e22:	4b9e      	ldr	r3, [pc, #632]	; (800909c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e26:	091b      	lsrs	r3, r3, #4
 8008e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e2c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008e2e:	4b9b      	ldr	r3, [pc, #620]	; (800909c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008e38:	4b98      	ldr	r3, [pc, #608]	; (800909c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e3c:	08db      	lsrs	r3, r3, #3
 8008e3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	fb02 f303 	mul.w	r3, r2, r3
 8008e48:	ee07 3a90 	vmov	s15, r3
 8008e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e50:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f000 8111 	beq.w	800907e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	f000 8083 	beq.w	8008f6a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	f200 80a1 	bhi.w	8008fae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d003      	beq.n	8008e7a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d056      	beq.n	8008f26 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008e78:	e099      	b.n	8008fae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e7a:	4b88      	ldr	r3, [pc, #544]	; (800909c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 0320 	and.w	r3, r3, #32
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d02d      	beq.n	8008ee2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e86:	4b85      	ldr	r3, [pc, #532]	; (800909c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	08db      	lsrs	r3, r3, #3
 8008e8c:	f003 0303 	and.w	r3, r3, #3
 8008e90:	4a83      	ldr	r2, [pc, #524]	; (80090a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008e92:	fa22 f303 	lsr.w	r3, r2, r3
 8008e96:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	ee07 3a90 	vmov	s15, r3
 8008e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	ee07 3a90 	vmov	s15, r3
 8008ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eb0:	4b7a      	ldr	r3, [pc, #488]	; (800909c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb8:	ee07 3a90 	vmov	s15, r3
 8008ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ec0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ec4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80090a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ec8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ecc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ed0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008edc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008ee0:	e087      	b.n	8008ff2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	ee07 3a90 	vmov	s15, r3
 8008ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80090a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ef4:	4b69      	ldr	r3, [pc, #420]	; (800909c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008efc:	ee07 3a90 	vmov	s15, r3
 8008f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f04:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f08:	eddf 5a66 	vldr	s11, [pc, #408]	; 80090a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f24:	e065      	b.n	8008ff2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	ee07 3a90 	vmov	s15, r3
 8008f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f30:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80090ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f38:	4b58      	ldr	r3, [pc, #352]	; (800909c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f40:	ee07 3a90 	vmov	s15, r3
 8008f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f48:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f4c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80090a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f68:	e043      	b.n	8008ff2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	ee07 3a90 	vmov	s15, r3
 8008f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f74:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80090b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008f78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f7c:	4b47      	ldr	r3, [pc, #284]	; (800909c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f84:	ee07 3a90 	vmov	s15, r3
 8008f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f90:	eddf 5a44 	vldr	s11, [pc, #272]	; 80090a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008fac:	e021      	b.n	8008ff2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	ee07 3a90 	vmov	s15, r3
 8008fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fb8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80090a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008fbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fc0:	4b36      	ldr	r3, [pc, #216]	; (800909c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fc8:	ee07 3a90 	vmov	s15, r3
 8008fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fd4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80090a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008fd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ff0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008ff2:	4b2a      	ldr	r3, [pc, #168]	; (800909c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff6:	0a5b      	lsrs	r3, r3, #9
 8008ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ffc:	ee07 3a90 	vmov	s15, r3
 8009000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009004:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009008:	ee37 7a87 	vadd.f32	s14, s15, s14
 800900c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009010:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009014:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009018:	ee17 2a90 	vmov	r2, s15
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009020:	4b1e      	ldr	r3, [pc, #120]	; (800909c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009024:	0c1b      	lsrs	r3, r3, #16
 8009026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800902a:	ee07 3a90 	vmov	s15, r3
 800902e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009032:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009036:	ee37 7a87 	vadd.f32	s14, s15, s14
 800903a:	edd7 6a07 	vldr	s13, [r7, #28]
 800903e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009046:	ee17 2a90 	vmov	r2, s15
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800904e:	4b13      	ldr	r3, [pc, #76]	; (800909c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009052:	0e1b      	lsrs	r3, r3, #24
 8009054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009058:	ee07 3a90 	vmov	s15, r3
 800905c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009060:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009064:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009068:	edd7 6a07 	vldr	s13, [r7, #28]
 800906c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009074:	ee17 2a90 	vmov	r2, s15
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800907c:	e008      	b.n	8009090 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	609a      	str	r2, [r3, #8]
}
 8009090:	bf00      	nop
 8009092:	3724      	adds	r7, #36	; 0x24
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr
 800909c:	58024400 	.word	0x58024400
 80090a0:	03d09000 	.word	0x03d09000
 80090a4:	46000000 	.word	0x46000000
 80090a8:	4c742400 	.word	0x4c742400
 80090ac:	4a742400 	.word	0x4a742400
 80090b0:	4af42400 	.word	0x4af42400

080090b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090be:	2300      	movs	r3, #0
 80090c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090c2:	4b53      	ldr	r3, [pc, #332]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 80090c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c6:	f003 0303 	and.w	r3, r3, #3
 80090ca:	2b03      	cmp	r3, #3
 80090cc:	d101      	bne.n	80090d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e099      	b.n	8009206 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80090d2:	4b4f      	ldr	r3, [pc, #316]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a4e      	ldr	r2, [pc, #312]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 80090d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80090dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090de:	f7f8 f83f 	bl	8001160 <HAL_GetTick>
 80090e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80090e4:	e008      	b.n	80090f8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80090e6:	f7f8 f83b 	bl	8001160 <HAL_GetTick>
 80090ea:	4602      	mov	r2, r0
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d901      	bls.n	80090f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80090f4:	2303      	movs	r3, #3
 80090f6:	e086      	b.n	8009206 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80090f8:	4b45      	ldr	r3, [pc, #276]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1f0      	bne.n	80090e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009104:	4b42      	ldr	r3, [pc, #264]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 8009106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009108:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	031b      	lsls	r3, r3, #12
 8009112:	493f      	ldr	r1, [pc, #252]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 8009114:	4313      	orrs	r3, r2
 8009116:	628b      	str	r3, [r1, #40]	; 0x28
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	3b01      	subs	r3, #1
 800911e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	3b01      	subs	r3, #1
 8009128:	025b      	lsls	r3, r3, #9
 800912a:	b29b      	uxth	r3, r3
 800912c:	431a      	orrs	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	3b01      	subs	r3, #1
 8009134:	041b      	lsls	r3, r3, #16
 8009136:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800913a:	431a      	orrs	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	3b01      	subs	r3, #1
 8009142:	061b      	lsls	r3, r3, #24
 8009144:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009148:	4931      	ldr	r1, [pc, #196]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 800914a:	4313      	orrs	r3, r2
 800914c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800914e:	4b30      	ldr	r3, [pc, #192]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 8009150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009152:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	492d      	ldr	r1, [pc, #180]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 800915c:	4313      	orrs	r3, r2
 800915e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009160:	4b2b      	ldr	r3, [pc, #172]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 8009162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009164:	f023 0220 	bic.w	r2, r3, #32
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	4928      	ldr	r1, [pc, #160]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 800916e:	4313      	orrs	r3, r2
 8009170:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009172:	4b27      	ldr	r3, [pc, #156]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 8009174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009176:	4a26      	ldr	r2, [pc, #152]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 8009178:	f023 0310 	bic.w	r3, r3, #16
 800917c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800917e:	4b24      	ldr	r3, [pc, #144]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 8009180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009182:	4b24      	ldr	r3, [pc, #144]	; (8009214 <RCCEx_PLL2_Config+0x160>)
 8009184:	4013      	ands	r3, r2
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	69d2      	ldr	r2, [r2, #28]
 800918a:	00d2      	lsls	r2, r2, #3
 800918c:	4920      	ldr	r1, [pc, #128]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 800918e:	4313      	orrs	r3, r2
 8009190:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009192:	4b1f      	ldr	r3, [pc, #124]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 8009194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009196:	4a1e      	ldr	r2, [pc, #120]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 8009198:	f043 0310 	orr.w	r3, r3, #16
 800919c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d106      	bne.n	80091b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80091a4:	4b1a      	ldr	r3, [pc, #104]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 80091a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a8:	4a19      	ldr	r2, [pc, #100]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 80091aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80091b0:	e00f      	b.n	80091d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d106      	bne.n	80091c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80091b8:	4b15      	ldr	r3, [pc, #84]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 80091ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091bc:	4a14      	ldr	r2, [pc, #80]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 80091be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80091c4:	e005      	b.n	80091d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80091c6:	4b12      	ldr	r3, [pc, #72]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 80091c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ca:	4a11      	ldr	r2, [pc, #68]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 80091cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80091d2:	4b0f      	ldr	r3, [pc, #60]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a0e      	ldr	r2, [pc, #56]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 80091d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80091dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091de:	f7f7 ffbf 	bl	8001160 <HAL_GetTick>
 80091e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80091e4:	e008      	b.n	80091f8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80091e6:	f7f7 ffbb 	bl	8001160 <HAL_GetTick>
 80091ea:	4602      	mov	r2, r0
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	d901      	bls.n	80091f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e006      	b.n	8009206 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80091f8:	4b05      	ldr	r3, [pc, #20]	; (8009210 <RCCEx_PLL2_Config+0x15c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009200:	2b00      	cmp	r3, #0
 8009202:	d0f0      	beq.n	80091e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009204:	7bfb      	ldrb	r3, [r7, #15]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	58024400 	.word	0x58024400
 8009214:	ffff0007 	.word	0xffff0007

08009218 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009226:	4b53      	ldr	r3, [pc, #332]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 8009228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922a:	f003 0303 	and.w	r3, r3, #3
 800922e:	2b03      	cmp	r3, #3
 8009230:	d101      	bne.n	8009236 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e099      	b.n	800936a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009236:	4b4f      	ldr	r3, [pc, #316]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a4e      	ldr	r2, [pc, #312]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 800923c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009240:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009242:	f7f7 ff8d 	bl	8001160 <HAL_GetTick>
 8009246:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009248:	e008      	b.n	800925c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800924a:	f7f7 ff89 	bl	8001160 <HAL_GetTick>
 800924e:	4602      	mov	r2, r0
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	2b02      	cmp	r3, #2
 8009256:	d901      	bls.n	800925c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009258:	2303      	movs	r3, #3
 800925a:	e086      	b.n	800936a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800925c:	4b45      	ldr	r3, [pc, #276]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1f0      	bne.n	800924a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009268:	4b42      	ldr	r3, [pc, #264]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 800926a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	051b      	lsls	r3, r3, #20
 8009276:	493f      	ldr	r1, [pc, #252]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 8009278:	4313      	orrs	r3, r2
 800927a:	628b      	str	r3, [r1, #40]	; 0x28
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	3b01      	subs	r3, #1
 8009282:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	3b01      	subs	r3, #1
 800928c:	025b      	lsls	r3, r3, #9
 800928e:	b29b      	uxth	r3, r3
 8009290:	431a      	orrs	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	3b01      	subs	r3, #1
 8009298:	041b      	lsls	r3, r3, #16
 800929a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800929e:	431a      	orrs	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	3b01      	subs	r3, #1
 80092a6:	061b      	lsls	r3, r3, #24
 80092a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80092ac:	4931      	ldr	r1, [pc, #196]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 80092ae:	4313      	orrs	r3, r2
 80092b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80092b2:	4b30      	ldr	r3, [pc, #192]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 80092b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	492d      	ldr	r1, [pc, #180]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 80092c0:	4313      	orrs	r3, r2
 80092c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80092c4:	4b2b      	ldr	r3, [pc, #172]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 80092c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	4928      	ldr	r1, [pc, #160]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 80092d2:	4313      	orrs	r3, r2
 80092d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80092d6:	4b27      	ldr	r3, [pc, #156]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 80092d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092da:	4a26      	ldr	r2, [pc, #152]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 80092dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80092e2:	4b24      	ldr	r3, [pc, #144]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 80092e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092e6:	4b24      	ldr	r3, [pc, #144]	; (8009378 <RCCEx_PLL3_Config+0x160>)
 80092e8:	4013      	ands	r3, r2
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	69d2      	ldr	r2, [r2, #28]
 80092ee:	00d2      	lsls	r2, r2, #3
 80092f0:	4920      	ldr	r1, [pc, #128]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 80092f2:	4313      	orrs	r3, r2
 80092f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80092f6:	4b1f      	ldr	r3, [pc, #124]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 80092f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fa:	4a1e      	ldr	r2, [pc, #120]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 80092fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009300:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d106      	bne.n	8009316 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009308:	4b1a      	ldr	r3, [pc, #104]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 800930a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930c:	4a19      	ldr	r2, [pc, #100]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 800930e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009312:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009314:	e00f      	b.n	8009336 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2b01      	cmp	r3, #1
 800931a:	d106      	bne.n	800932a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800931c:	4b15      	ldr	r3, [pc, #84]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 800931e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009320:	4a14      	ldr	r2, [pc, #80]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 8009322:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009326:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009328:	e005      	b.n	8009336 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800932a:	4b12      	ldr	r3, [pc, #72]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 800932c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932e:	4a11      	ldr	r2, [pc, #68]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 8009330:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009334:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009336:	4b0f      	ldr	r3, [pc, #60]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a0e      	ldr	r2, [pc, #56]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 800933c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009342:	f7f7 ff0d 	bl	8001160 <HAL_GetTick>
 8009346:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009348:	e008      	b.n	800935c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800934a:	f7f7 ff09 	bl	8001160 <HAL_GetTick>
 800934e:	4602      	mov	r2, r0
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	2b02      	cmp	r3, #2
 8009356:	d901      	bls.n	800935c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009358:	2303      	movs	r3, #3
 800935a:	e006      	b.n	800936a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800935c:	4b05      	ldr	r3, [pc, #20]	; (8009374 <RCCEx_PLL3_Config+0x15c>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009364:	2b00      	cmp	r3, #0
 8009366:	d0f0      	beq.n	800934a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009368:	7bfb      	ldrb	r3, [r7, #15]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	58024400 	.word	0x58024400
 8009378:	ffff0007 	.word	0xffff0007

0800937c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d101      	bne.n	800938e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	e042      	b.n	8009414 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009394:	2b00      	cmp	r3, #0
 8009396:	d106      	bne.n	80093a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f7f7 fcd3 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2224      	movs	r2, #36	; 0x24
 80093aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f022 0201 	bic.w	r2, r2, #1
 80093bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fc80 	bl	8009cc4 <UART_SetConfig>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d101      	bne.n	80093ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e022      	b.n	8009414 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d002      	beq.n	80093dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 fad2 	bl	800a980 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689a      	ldr	r2, [r3, #8]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80093fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f042 0201 	orr.w	r2, r2, #1
 800940a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f001 fb59 	bl	800aac4 <UART_CheckIdleState>
 8009412:	4603      	mov	r3, r0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b08a      	sub	sp, #40	; 0x28
 8009420:	af02      	add	r7, sp, #8
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	603b      	str	r3, [r7, #0]
 8009428:	4613      	mov	r3, r2
 800942a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009432:	2b20      	cmp	r3, #32
 8009434:	f040 8083 	bne.w	800953e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d002      	beq.n	8009444 <HAL_UART_Transmit+0x28>
 800943e:	88fb      	ldrh	r3, [r7, #6]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d101      	bne.n	8009448 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e07b      	b.n	8009540 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800944e:	2b01      	cmp	r3, #1
 8009450:	d101      	bne.n	8009456 <HAL_UART_Transmit+0x3a>
 8009452:	2302      	movs	r3, #2
 8009454:	e074      	b.n	8009540 <HAL_UART_Transmit+0x124>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2221      	movs	r2, #33	; 0x21
 800946a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800946e:	f7f7 fe77 	bl	8001160 <HAL_GetTick>
 8009472:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	88fa      	ldrh	r2, [r7, #6]
 8009478:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	88fa      	ldrh	r2, [r7, #6]
 8009480:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800948c:	d108      	bne.n	80094a0 <HAL_UART_Transmit+0x84>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d104      	bne.n	80094a0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009496:	2300      	movs	r3, #0
 8009498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	61bb      	str	r3, [r7, #24]
 800949e:	e003      	b.n	80094a8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094a4:	2300      	movs	r3, #0
 80094a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80094b0:	e02c      	b.n	800950c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	2200      	movs	r2, #0
 80094ba:	2180      	movs	r1, #128	; 0x80
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f001 fb4c 	bl	800ab5a <UART_WaitOnFlagUntilTimeout>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d001      	beq.n	80094cc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80094c8:	2303      	movs	r3, #3
 80094ca:	e039      	b.n	8009540 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10b      	bne.n	80094ea <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	881b      	ldrh	r3, [r3, #0]
 80094d6:	461a      	mov	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	3302      	adds	r3, #2
 80094e6:	61bb      	str	r3, [r7, #24]
 80094e8:	e007      	b.n	80094fa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	781a      	ldrb	r2, [r3, #0]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	3301      	adds	r3, #1
 80094f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009500:	b29b      	uxth	r3, r3
 8009502:	3b01      	subs	r3, #1
 8009504:	b29a      	uxth	r2, r3
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009512:	b29b      	uxth	r3, r3
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1cc      	bne.n	80094b2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	2200      	movs	r2, #0
 8009520:	2140      	movs	r1, #64	; 0x40
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f001 fb19 	bl	800ab5a <UART_WaitOnFlagUntilTimeout>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800952e:	2303      	movs	r3, #3
 8009530:	e006      	b.n	8009540 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2220      	movs	r2, #32
 8009536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	e000      	b.n	8009540 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800953e:	2302      	movs	r3, #2
  }
}
 8009540:	4618      	mov	r0, r3
 8009542:	3720      	adds	r7, #32
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b0ba      	sub	sp, #232	; 0xe8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800956e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009572:	f640 030f 	movw	r3, #2063	; 0x80f
 8009576:	4013      	ands	r3, r2
 8009578:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800957c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009580:	2b00      	cmp	r3, #0
 8009582:	d11b      	bne.n	80095bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009588:	f003 0320 	and.w	r3, r3, #32
 800958c:	2b00      	cmp	r3, #0
 800958e:	d015      	beq.n	80095bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009594:	f003 0320 	and.w	r3, r3, #32
 8009598:	2b00      	cmp	r3, #0
 800959a:	d105      	bne.n	80095a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800959c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d009      	beq.n	80095bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f000 835a 	beq.w	8009c66 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	4798      	blx	r3
      }
      return;
 80095ba:	e354      	b.n	8009c66 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80095bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f000 811f 	beq.w	8009804 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80095c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80095ca:	4b8b      	ldr	r3, [pc, #556]	; (80097f8 <HAL_UART_IRQHandler+0x2b0>)
 80095cc:	4013      	ands	r3, r2
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d106      	bne.n	80095e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80095d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80095d6:	4b89      	ldr	r3, [pc, #548]	; (80097fc <HAL_UART_IRQHandler+0x2b4>)
 80095d8:	4013      	ands	r3, r2
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f000 8112 	beq.w	8009804 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095e4:	f003 0301 	and.w	r3, r3, #1
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d011      	beq.n	8009610 <HAL_UART_IRQHandler+0xc8>
 80095ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00b      	beq.n	8009610 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2201      	movs	r2, #1
 80095fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009606:	f043 0201 	orr.w	r2, r3, #1
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009614:	f003 0302 	and.w	r3, r3, #2
 8009618:	2b00      	cmp	r3, #0
 800961a:	d011      	beq.n	8009640 <HAL_UART_IRQHandler+0xf8>
 800961c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009620:	f003 0301 	and.w	r3, r3, #1
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00b      	beq.n	8009640 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2202      	movs	r2, #2
 800962e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009636:	f043 0204 	orr.w	r2, r3, #4
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009644:	f003 0304 	and.w	r3, r3, #4
 8009648:	2b00      	cmp	r3, #0
 800964a:	d011      	beq.n	8009670 <HAL_UART_IRQHandler+0x128>
 800964c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009650:	f003 0301 	and.w	r3, r3, #1
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00b      	beq.n	8009670 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2204      	movs	r2, #4
 800965e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009666:	f043 0202 	orr.w	r2, r3, #2
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009674:	f003 0308 	and.w	r3, r3, #8
 8009678:	2b00      	cmp	r3, #0
 800967a:	d017      	beq.n	80096ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800967c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009680:	f003 0320 	and.w	r3, r3, #32
 8009684:	2b00      	cmp	r3, #0
 8009686:	d105      	bne.n	8009694 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009688:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800968c:	4b5a      	ldr	r3, [pc, #360]	; (80097f8 <HAL_UART_IRQHandler+0x2b0>)
 800968e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00b      	beq.n	80096ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2208      	movs	r2, #8
 800969a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096a2:	f043 0208 	orr.w	r2, r3, #8
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80096ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d012      	beq.n	80096de <HAL_UART_IRQHandler+0x196>
 80096b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00c      	beq.n	80096de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096d4:	f043 0220 	orr.w	r2, r3, #32
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f000 82c0 	beq.w	8009c6a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ee:	f003 0320 	and.w	r3, r3, #32
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d013      	beq.n	800971e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80096f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096fa:	f003 0320 	and.w	r3, r3, #32
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d105      	bne.n	800970e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d007      	beq.n	800971e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009712:	2b00      	cmp	r3, #0
 8009714:	d003      	beq.n	800971e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009724:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009732:	2b40      	cmp	r3, #64	; 0x40
 8009734:	d005      	beq.n	8009742 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800973a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800973e:	2b00      	cmp	r3, #0
 8009740:	d04f      	beq.n	80097e2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f001 fad2 	bl	800acec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009752:	2b40      	cmp	r3, #64	; 0x40
 8009754:	d141      	bne.n	80097da <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	3308      	adds	r3, #8
 800975c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009760:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009764:	e853 3f00 	ldrex	r3, [r3]
 8009768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800976c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009774:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	3308      	adds	r3, #8
 800977e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009782:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009786:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800978e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009792:	e841 2300 	strex	r3, r2, [r1]
 8009796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800979a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1d9      	bne.n	8009756 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d013      	beq.n	80097d2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097ae:	4a14      	ldr	r2, [pc, #80]	; (8009800 <HAL_UART_IRQHandler+0x2b8>)
 80097b0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fa fec4 	bl	8004544 <HAL_DMA_Abort_IT>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d017      	beq.n	80097f2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80097cc:	4610      	mov	r0, r2
 80097ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097d0:	e00f      	b.n	80097f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 fa60 	bl	8009c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097d8:	e00b      	b.n	80097f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fa5c 	bl	8009c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097e0:	e007      	b.n	80097f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fa58 	bl	8009c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80097f0:	e23b      	b.n	8009c6a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097f2:	bf00      	nop
    return;
 80097f4:	e239      	b.n	8009c6a <HAL_UART_IRQHandler+0x722>
 80097f6:	bf00      	nop
 80097f8:	10000001 	.word	0x10000001
 80097fc:	04000120 	.word	0x04000120
 8009800:	0800adb9 	.word	0x0800adb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009808:	2b01      	cmp	r3, #1
 800980a:	f040 81ce 	bne.w	8009baa <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800980e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009812:	f003 0310 	and.w	r3, r3, #16
 8009816:	2b00      	cmp	r3, #0
 8009818:	f000 81c7 	beq.w	8009baa <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800981c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009820:	f003 0310 	and.w	r3, r3, #16
 8009824:	2b00      	cmp	r3, #0
 8009826:	f000 81c0 	beq.w	8009baa <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2210      	movs	r2, #16
 8009830:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983c:	2b40      	cmp	r3, #64	; 0x40
 800983e:	f040 813b 	bne.w	8009ab8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a8b      	ldr	r2, [pc, #556]	; (8009a78 <HAL_UART_IRQHandler+0x530>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d059      	beq.n	8009902 <HAL_UART_IRQHandler+0x3ba>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a89      	ldr	r2, [pc, #548]	; (8009a7c <HAL_UART_IRQHandler+0x534>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d053      	beq.n	8009902 <HAL_UART_IRQHandler+0x3ba>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a87      	ldr	r2, [pc, #540]	; (8009a80 <HAL_UART_IRQHandler+0x538>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d04d      	beq.n	8009902 <HAL_UART_IRQHandler+0x3ba>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a85      	ldr	r2, [pc, #532]	; (8009a84 <HAL_UART_IRQHandler+0x53c>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d047      	beq.n	8009902 <HAL_UART_IRQHandler+0x3ba>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a83      	ldr	r2, [pc, #524]	; (8009a88 <HAL_UART_IRQHandler+0x540>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d041      	beq.n	8009902 <HAL_UART_IRQHandler+0x3ba>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a81      	ldr	r2, [pc, #516]	; (8009a8c <HAL_UART_IRQHandler+0x544>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d03b      	beq.n	8009902 <HAL_UART_IRQHandler+0x3ba>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a7f      	ldr	r2, [pc, #508]	; (8009a90 <HAL_UART_IRQHandler+0x548>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d035      	beq.n	8009902 <HAL_UART_IRQHandler+0x3ba>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a7d      	ldr	r2, [pc, #500]	; (8009a94 <HAL_UART_IRQHandler+0x54c>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d02f      	beq.n	8009902 <HAL_UART_IRQHandler+0x3ba>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a7b      	ldr	r2, [pc, #492]	; (8009a98 <HAL_UART_IRQHandler+0x550>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d029      	beq.n	8009902 <HAL_UART_IRQHandler+0x3ba>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a79      	ldr	r2, [pc, #484]	; (8009a9c <HAL_UART_IRQHandler+0x554>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d023      	beq.n	8009902 <HAL_UART_IRQHandler+0x3ba>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a77      	ldr	r2, [pc, #476]	; (8009aa0 <HAL_UART_IRQHandler+0x558>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d01d      	beq.n	8009902 <HAL_UART_IRQHandler+0x3ba>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a75      	ldr	r2, [pc, #468]	; (8009aa4 <HAL_UART_IRQHandler+0x55c>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d017      	beq.n	8009902 <HAL_UART_IRQHandler+0x3ba>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a73      	ldr	r2, [pc, #460]	; (8009aa8 <HAL_UART_IRQHandler+0x560>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d011      	beq.n	8009902 <HAL_UART_IRQHandler+0x3ba>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a71      	ldr	r2, [pc, #452]	; (8009aac <HAL_UART_IRQHandler+0x564>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d00b      	beq.n	8009902 <HAL_UART_IRQHandler+0x3ba>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a6f      	ldr	r2, [pc, #444]	; (8009ab0 <HAL_UART_IRQHandler+0x568>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d005      	beq.n	8009902 <HAL_UART_IRQHandler+0x3ba>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a6d      	ldr	r2, [pc, #436]	; (8009ab4 <HAL_UART_IRQHandler+0x56c>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d105      	bne.n	800990e <HAL_UART_IRQHandler+0x3c6>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	b29b      	uxth	r3, r3
 800990c:	e004      	b.n	8009918 <HAL_UART_IRQHandler+0x3d0>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	b29b      	uxth	r3, r3
 8009918:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800991c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009920:	2b00      	cmp	r3, #0
 8009922:	f000 81a4 	beq.w	8009c6e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800992c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009930:	429a      	cmp	r2, r3
 8009932:	f080 819c 	bcs.w	8009c6e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800993c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009944:	69db      	ldr	r3, [r3, #28]
 8009946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800994a:	f000 8086 	beq.w	8009a5a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009956:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800995a:	e853 3f00 	ldrex	r3, [r3]
 800995e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009962:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009966:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800996a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	461a      	mov	r2, r3
 8009974:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009978:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800997c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009980:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009984:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009988:	e841 2300 	strex	r3, r2, [r1]
 800998c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009990:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1da      	bne.n	800994e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3308      	adds	r3, #8
 800999e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099a2:	e853 3f00 	ldrex	r3, [r3]
 80099a6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80099a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80099aa:	f023 0301 	bic.w	r3, r3, #1
 80099ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	3308      	adds	r3, #8
 80099b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80099bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80099c0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80099c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80099c8:	e841 2300 	strex	r3, r2, [r1]
 80099cc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80099ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1e1      	bne.n	8009998 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	3308      	adds	r3, #8
 80099da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099de:	e853 3f00 	ldrex	r3, [r3]
 80099e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80099e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	3308      	adds	r3, #8
 80099f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80099f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80099fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80099fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009a00:	e841 2300 	strex	r3, r2, [r1]
 8009a04:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009a06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1e3      	bne.n	80099d4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2220      	movs	r2, #32
 8009a10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a22:	e853 3f00 	ldrex	r3, [r3]
 8009a26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a2a:	f023 0310 	bic.w	r3, r3, #16
 8009a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	461a      	mov	r2, r3
 8009a38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a3e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a44:	e841 2300 	strex	r3, r2, [r1]
 8009a48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1e4      	bne.n	8009a1a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fa fa57 	bl	8003f08 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f91c 	bl	8009cac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a74:	e0fb      	b.n	8009c6e <HAL_UART_IRQHandler+0x726>
 8009a76:	bf00      	nop
 8009a78:	40020010 	.word	0x40020010
 8009a7c:	40020028 	.word	0x40020028
 8009a80:	40020040 	.word	0x40020040
 8009a84:	40020058 	.word	0x40020058
 8009a88:	40020070 	.word	0x40020070
 8009a8c:	40020088 	.word	0x40020088
 8009a90:	400200a0 	.word	0x400200a0
 8009a94:	400200b8 	.word	0x400200b8
 8009a98:	40020410 	.word	0x40020410
 8009a9c:	40020428 	.word	0x40020428
 8009aa0:	40020440 	.word	0x40020440
 8009aa4:	40020458 	.word	0x40020458
 8009aa8:	40020470 	.word	0x40020470
 8009aac:	40020488 	.word	0x40020488
 8009ab0:	400204a0 	.word	0x400204a0
 8009ab4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	1ad3      	subs	r3, r2, r3
 8009ac8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f000 80cc 	beq.w	8009c72 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8009ada:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f000 80c7 	beq.w	8009c72 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aec:	e853 3f00 	ldrex	r3, [r3]
 8009af0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009af8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	461a      	mov	r2, r3
 8009b02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b06:	647b      	str	r3, [r7, #68]	; 0x44
 8009b08:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b0e:	e841 2300 	strex	r3, r2, [r1]
 8009b12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1e4      	bne.n	8009ae4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	3308      	adds	r3, #8
 8009b20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b24:	e853 3f00 	ldrex	r3, [r3]
 8009b28:	623b      	str	r3, [r7, #32]
   return(result);
 8009b2a:	6a3a      	ldr	r2, [r7, #32]
 8009b2c:	4b54      	ldr	r3, [pc, #336]	; (8009c80 <HAL_UART_IRQHandler+0x738>)
 8009b2e:	4013      	ands	r3, r2
 8009b30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	3308      	adds	r3, #8
 8009b3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009b3e:	633a      	str	r2, [r7, #48]	; 0x30
 8009b40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b46:	e841 2300 	strex	r3, r2, [r1]
 8009b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1e3      	bne.n	8009b1a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2220      	movs	r2, #32
 8009b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	e853 3f00 	ldrex	r3, [r3]
 8009b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f023 0310 	bic.w	r3, r3, #16
 8009b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	461a      	mov	r2, r3
 8009b84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009b88:	61fb      	str	r3, [r7, #28]
 8009b8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8c:	69b9      	ldr	r1, [r7, #24]
 8009b8e:	69fa      	ldr	r2, [r7, #28]
 8009b90:	e841 2300 	strex	r3, r2, [r1]
 8009b94:	617b      	str	r3, [r7, #20]
   return(result);
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1e4      	bne.n	8009b66 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f882 	bl	8009cac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ba8:	e063      	b.n	8009c72 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00e      	beq.n	8009bd4 <HAL_UART_IRQHandler+0x68c>
 8009bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d008      	beq.n	8009bd4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009bca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f001 f934 	bl	800ae3a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009bd2:	e051      	b.n	8009c78 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d014      	beq.n	8009c0a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d105      	bne.n	8009bf8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d008      	beq.n	8009c0a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d03a      	beq.n	8009c76 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	4798      	blx	r3
    }
    return;
 8009c08:	e035      	b.n	8009c76 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d009      	beq.n	8009c2a <HAL_UART_IRQHandler+0x6e2>
 8009c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f001 f8de 	bl	800ade4 <UART_EndTransmit_IT>
    return;
 8009c28:	e026      	b.n	8009c78 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d009      	beq.n	8009c4a <HAL_UART_IRQHandler+0x702>
 8009c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c3a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d003      	beq.n	8009c4a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f001 f90d 	bl	800ae62 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c48:	e016      	b.n	8009c78 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d010      	beq.n	8009c78 <HAL_UART_IRQHandler+0x730>
 8009c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	da0c      	bge.n	8009c78 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f001 f8f5 	bl	800ae4e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c64:	e008      	b.n	8009c78 <HAL_UART_IRQHandler+0x730>
      return;
 8009c66:	bf00      	nop
 8009c68:	e006      	b.n	8009c78 <HAL_UART_IRQHandler+0x730>
    return;
 8009c6a:	bf00      	nop
 8009c6c:	e004      	b.n	8009c78 <HAL_UART_IRQHandler+0x730>
      return;
 8009c6e:	bf00      	nop
 8009c70:	e002      	b.n	8009c78 <HAL_UART_IRQHandler+0x730>
      return;
 8009c72:	bf00      	nop
 8009c74:	e000      	b.n	8009c78 <HAL_UART_IRQHandler+0x730>
    return;
 8009c76:	bf00      	nop
  }
}
 8009c78:	37e8      	adds	r7, #232	; 0xe8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	effffffe 	.word	0xeffffffe

08009c84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c8c:	bf00      	nop
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cc4:	b5b0      	push	{r4, r5, r7, lr}
 8009cc6:	b08e      	sub	sp, #56	; 0x38
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	689a      	ldr	r2, [r3, #8]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	431a      	orrs	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	695b      	ldr	r3, [r3, #20]
 8009ce0:	431a      	orrs	r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	69db      	ldr	r3, [r3, #28]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	4bbf      	ldr	r3, [pc, #764]	; (8009ff0 <UART_SetConfig+0x32c>)
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	6812      	ldr	r2, [r2, #0]
 8009cf8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009cfa:	430b      	orrs	r3, r1
 8009cfc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	68da      	ldr	r2, [r3, #12]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	430a      	orrs	r2, r1
 8009d12:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	699b      	ldr	r3, [r3, #24]
 8009d18:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4ab5      	ldr	r2, [pc, #724]	; (8009ff4 <UART_SetConfig+0x330>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d004      	beq.n	8009d2e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a1b      	ldr	r3, [r3, #32]
 8009d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	689a      	ldr	r2, [r3, #8]
 8009d34:	4bb0      	ldr	r3, [pc, #704]	; (8009ff8 <UART_SetConfig+0x334>)
 8009d36:	4013      	ands	r3, r2
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	6812      	ldr	r2, [r2, #0]
 8009d3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009d3e:	430b      	orrs	r3, r1
 8009d40:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d48:	f023 010f 	bic.w	r1, r3, #15
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	430a      	orrs	r2, r1
 8009d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4aa7      	ldr	r2, [pc, #668]	; (8009ffc <UART_SetConfig+0x338>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d176      	bne.n	8009e50 <UART_SetConfig+0x18c>
 8009d62:	4ba7      	ldr	r3, [pc, #668]	; (800a000 <UART_SetConfig+0x33c>)
 8009d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d6a:	2b28      	cmp	r3, #40	; 0x28
 8009d6c:	d86c      	bhi.n	8009e48 <UART_SetConfig+0x184>
 8009d6e:	a201      	add	r2, pc, #4	; (adr r2, 8009d74 <UART_SetConfig+0xb0>)
 8009d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d74:	08009e19 	.word	0x08009e19
 8009d78:	08009e49 	.word	0x08009e49
 8009d7c:	08009e49 	.word	0x08009e49
 8009d80:	08009e49 	.word	0x08009e49
 8009d84:	08009e49 	.word	0x08009e49
 8009d88:	08009e49 	.word	0x08009e49
 8009d8c:	08009e49 	.word	0x08009e49
 8009d90:	08009e49 	.word	0x08009e49
 8009d94:	08009e21 	.word	0x08009e21
 8009d98:	08009e49 	.word	0x08009e49
 8009d9c:	08009e49 	.word	0x08009e49
 8009da0:	08009e49 	.word	0x08009e49
 8009da4:	08009e49 	.word	0x08009e49
 8009da8:	08009e49 	.word	0x08009e49
 8009dac:	08009e49 	.word	0x08009e49
 8009db0:	08009e49 	.word	0x08009e49
 8009db4:	08009e29 	.word	0x08009e29
 8009db8:	08009e49 	.word	0x08009e49
 8009dbc:	08009e49 	.word	0x08009e49
 8009dc0:	08009e49 	.word	0x08009e49
 8009dc4:	08009e49 	.word	0x08009e49
 8009dc8:	08009e49 	.word	0x08009e49
 8009dcc:	08009e49 	.word	0x08009e49
 8009dd0:	08009e49 	.word	0x08009e49
 8009dd4:	08009e31 	.word	0x08009e31
 8009dd8:	08009e49 	.word	0x08009e49
 8009ddc:	08009e49 	.word	0x08009e49
 8009de0:	08009e49 	.word	0x08009e49
 8009de4:	08009e49 	.word	0x08009e49
 8009de8:	08009e49 	.word	0x08009e49
 8009dec:	08009e49 	.word	0x08009e49
 8009df0:	08009e49 	.word	0x08009e49
 8009df4:	08009e39 	.word	0x08009e39
 8009df8:	08009e49 	.word	0x08009e49
 8009dfc:	08009e49 	.word	0x08009e49
 8009e00:	08009e49 	.word	0x08009e49
 8009e04:	08009e49 	.word	0x08009e49
 8009e08:	08009e49 	.word	0x08009e49
 8009e0c:	08009e49 	.word	0x08009e49
 8009e10:	08009e49 	.word	0x08009e49
 8009e14:	08009e41 	.word	0x08009e41
 8009e18:	2301      	movs	r3, #1
 8009e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e1e:	e326      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009e20:	2304      	movs	r3, #4
 8009e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e26:	e322      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009e28:	2308      	movs	r3, #8
 8009e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e2e:	e31e      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009e30:	2310      	movs	r3, #16
 8009e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e36:	e31a      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009e38:	2320      	movs	r3, #32
 8009e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e3e:	e316      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009e40:	2340      	movs	r3, #64	; 0x40
 8009e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e46:	e312      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009e48:	2380      	movs	r3, #128	; 0x80
 8009e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e4e:	e30e      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a6b      	ldr	r2, [pc, #428]	; (800a004 <UART_SetConfig+0x340>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d130      	bne.n	8009ebc <UART_SetConfig+0x1f8>
 8009e5a:	4b69      	ldr	r3, [pc, #420]	; (800a000 <UART_SetConfig+0x33c>)
 8009e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e5e:	f003 0307 	and.w	r3, r3, #7
 8009e62:	2b05      	cmp	r3, #5
 8009e64:	d826      	bhi.n	8009eb4 <UART_SetConfig+0x1f0>
 8009e66:	a201      	add	r2, pc, #4	; (adr r2, 8009e6c <UART_SetConfig+0x1a8>)
 8009e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6c:	08009e85 	.word	0x08009e85
 8009e70:	08009e8d 	.word	0x08009e8d
 8009e74:	08009e95 	.word	0x08009e95
 8009e78:	08009e9d 	.word	0x08009e9d
 8009e7c:	08009ea5 	.word	0x08009ea5
 8009e80:	08009ead 	.word	0x08009ead
 8009e84:	2300      	movs	r3, #0
 8009e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e8a:	e2f0      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009e8c:	2304      	movs	r3, #4
 8009e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e92:	e2ec      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009e94:	2308      	movs	r3, #8
 8009e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e9a:	e2e8      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009e9c:	2310      	movs	r3, #16
 8009e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ea2:	e2e4      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009ea4:	2320      	movs	r3, #32
 8009ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eaa:	e2e0      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009eac:	2340      	movs	r3, #64	; 0x40
 8009eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eb2:	e2dc      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009eb4:	2380      	movs	r3, #128	; 0x80
 8009eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eba:	e2d8      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a51      	ldr	r2, [pc, #324]	; (800a008 <UART_SetConfig+0x344>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d130      	bne.n	8009f28 <UART_SetConfig+0x264>
 8009ec6:	4b4e      	ldr	r3, [pc, #312]	; (800a000 <UART_SetConfig+0x33c>)
 8009ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eca:	f003 0307 	and.w	r3, r3, #7
 8009ece:	2b05      	cmp	r3, #5
 8009ed0:	d826      	bhi.n	8009f20 <UART_SetConfig+0x25c>
 8009ed2:	a201      	add	r2, pc, #4	; (adr r2, 8009ed8 <UART_SetConfig+0x214>)
 8009ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed8:	08009ef1 	.word	0x08009ef1
 8009edc:	08009ef9 	.word	0x08009ef9
 8009ee0:	08009f01 	.word	0x08009f01
 8009ee4:	08009f09 	.word	0x08009f09
 8009ee8:	08009f11 	.word	0x08009f11
 8009eec:	08009f19 	.word	0x08009f19
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ef6:	e2ba      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009ef8:	2304      	movs	r3, #4
 8009efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009efe:	e2b6      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009f00:	2308      	movs	r3, #8
 8009f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f06:	e2b2      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009f08:	2310      	movs	r3, #16
 8009f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f0e:	e2ae      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009f10:	2320      	movs	r3, #32
 8009f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f16:	e2aa      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009f18:	2340      	movs	r3, #64	; 0x40
 8009f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f1e:	e2a6      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009f20:	2380      	movs	r3, #128	; 0x80
 8009f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f26:	e2a2      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a37      	ldr	r2, [pc, #220]	; (800a00c <UART_SetConfig+0x348>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d130      	bne.n	8009f94 <UART_SetConfig+0x2d0>
 8009f32:	4b33      	ldr	r3, [pc, #204]	; (800a000 <UART_SetConfig+0x33c>)
 8009f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f36:	f003 0307 	and.w	r3, r3, #7
 8009f3a:	2b05      	cmp	r3, #5
 8009f3c:	d826      	bhi.n	8009f8c <UART_SetConfig+0x2c8>
 8009f3e:	a201      	add	r2, pc, #4	; (adr r2, 8009f44 <UART_SetConfig+0x280>)
 8009f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f44:	08009f5d 	.word	0x08009f5d
 8009f48:	08009f65 	.word	0x08009f65
 8009f4c:	08009f6d 	.word	0x08009f6d
 8009f50:	08009f75 	.word	0x08009f75
 8009f54:	08009f7d 	.word	0x08009f7d
 8009f58:	08009f85 	.word	0x08009f85
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f62:	e284      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009f64:	2304      	movs	r3, #4
 8009f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f6a:	e280      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009f6c:	2308      	movs	r3, #8
 8009f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f72:	e27c      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009f74:	2310      	movs	r3, #16
 8009f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f7a:	e278      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009f7c:	2320      	movs	r3, #32
 8009f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f82:	e274      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009f84:	2340      	movs	r3, #64	; 0x40
 8009f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f8a:	e270      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009f8c:	2380      	movs	r3, #128	; 0x80
 8009f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f92:	e26c      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a1d      	ldr	r2, [pc, #116]	; (800a010 <UART_SetConfig+0x34c>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d142      	bne.n	800a024 <UART_SetConfig+0x360>
 8009f9e:	4b18      	ldr	r3, [pc, #96]	; (800a000 <UART_SetConfig+0x33c>)
 8009fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fa2:	f003 0307 	and.w	r3, r3, #7
 8009fa6:	2b05      	cmp	r3, #5
 8009fa8:	d838      	bhi.n	800a01c <UART_SetConfig+0x358>
 8009faa:	a201      	add	r2, pc, #4	; (adr r2, 8009fb0 <UART_SetConfig+0x2ec>)
 8009fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb0:	08009fc9 	.word	0x08009fc9
 8009fb4:	08009fd1 	.word	0x08009fd1
 8009fb8:	08009fd9 	.word	0x08009fd9
 8009fbc:	08009fe1 	.word	0x08009fe1
 8009fc0:	08009fe9 	.word	0x08009fe9
 8009fc4:	0800a015 	.word	0x0800a015
 8009fc8:	2300      	movs	r3, #0
 8009fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fce:	e24e      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009fd0:	2304      	movs	r3, #4
 8009fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fd6:	e24a      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009fd8:	2308      	movs	r3, #8
 8009fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fde:	e246      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009fe0:	2310      	movs	r3, #16
 8009fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fe6:	e242      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009fe8:	2320      	movs	r3, #32
 8009fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fee:	e23e      	b.n	800a46e <UART_SetConfig+0x7aa>
 8009ff0:	cfff69f3 	.word	0xcfff69f3
 8009ff4:	58000c00 	.word	0x58000c00
 8009ff8:	11fff4ff 	.word	0x11fff4ff
 8009ffc:	40011000 	.word	0x40011000
 800a000:	58024400 	.word	0x58024400
 800a004:	40004400 	.word	0x40004400
 800a008:	40004800 	.word	0x40004800
 800a00c:	40004c00 	.word	0x40004c00
 800a010:	40005000 	.word	0x40005000
 800a014:	2340      	movs	r3, #64	; 0x40
 800a016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a01a:	e228      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a01c:	2380      	movs	r3, #128	; 0x80
 800a01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a022:	e224      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4ab1      	ldr	r2, [pc, #708]	; (800a2f0 <UART_SetConfig+0x62c>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d176      	bne.n	800a11c <UART_SetConfig+0x458>
 800a02e:	4bb1      	ldr	r3, [pc, #708]	; (800a2f4 <UART_SetConfig+0x630>)
 800a030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a032:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a036:	2b28      	cmp	r3, #40	; 0x28
 800a038:	d86c      	bhi.n	800a114 <UART_SetConfig+0x450>
 800a03a:	a201      	add	r2, pc, #4	; (adr r2, 800a040 <UART_SetConfig+0x37c>)
 800a03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a040:	0800a0e5 	.word	0x0800a0e5
 800a044:	0800a115 	.word	0x0800a115
 800a048:	0800a115 	.word	0x0800a115
 800a04c:	0800a115 	.word	0x0800a115
 800a050:	0800a115 	.word	0x0800a115
 800a054:	0800a115 	.word	0x0800a115
 800a058:	0800a115 	.word	0x0800a115
 800a05c:	0800a115 	.word	0x0800a115
 800a060:	0800a0ed 	.word	0x0800a0ed
 800a064:	0800a115 	.word	0x0800a115
 800a068:	0800a115 	.word	0x0800a115
 800a06c:	0800a115 	.word	0x0800a115
 800a070:	0800a115 	.word	0x0800a115
 800a074:	0800a115 	.word	0x0800a115
 800a078:	0800a115 	.word	0x0800a115
 800a07c:	0800a115 	.word	0x0800a115
 800a080:	0800a0f5 	.word	0x0800a0f5
 800a084:	0800a115 	.word	0x0800a115
 800a088:	0800a115 	.word	0x0800a115
 800a08c:	0800a115 	.word	0x0800a115
 800a090:	0800a115 	.word	0x0800a115
 800a094:	0800a115 	.word	0x0800a115
 800a098:	0800a115 	.word	0x0800a115
 800a09c:	0800a115 	.word	0x0800a115
 800a0a0:	0800a0fd 	.word	0x0800a0fd
 800a0a4:	0800a115 	.word	0x0800a115
 800a0a8:	0800a115 	.word	0x0800a115
 800a0ac:	0800a115 	.word	0x0800a115
 800a0b0:	0800a115 	.word	0x0800a115
 800a0b4:	0800a115 	.word	0x0800a115
 800a0b8:	0800a115 	.word	0x0800a115
 800a0bc:	0800a115 	.word	0x0800a115
 800a0c0:	0800a105 	.word	0x0800a105
 800a0c4:	0800a115 	.word	0x0800a115
 800a0c8:	0800a115 	.word	0x0800a115
 800a0cc:	0800a115 	.word	0x0800a115
 800a0d0:	0800a115 	.word	0x0800a115
 800a0d4:	0800a115 	.word	0x0800a115
 800a0d8:	0800a115 	.word	0x0800a115
 800a0dc:	0800a115 	.word	0x0800a115
 800a0e0:	0800a10d 	.word	0x0800a10d
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ea:	e1c0      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a0ec:	2304      	movs	r3, #4
 800a0ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0f2:	e1bc      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a0f4:	2308      	movs	r3, #8
 800a0f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0fa:	e1b8      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a0fc:	2310      	movs	r3, #16
 800a0fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a102:	e1b4      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a104:	2320      	movs	r3, #32
 800a106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a10a:	e1b0      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a10c:	2340      	movs	r3, #64	; 0x40
 800a10e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a112:	e1ac      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a114:	2380      	movs	r3, #128	; 0x80
 800a116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a11a:	e1a8      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a75      	ldr	r2, [pc, #468]	; (800a2f8 <UART_SetConfig+0x634>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d130      	bne.n	800a188 <UART_SetConfig+0x4c4>
 800a126:	4b73      	ldr	r3, [pc, #460]	; (800a2f4 <UART_SetConfig+0x630>)
 800a128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a12a:	f003 0307 	and.w	r3, r3, #7
 800a12e:	2b05      	cmp	r3, #5
 800a130:	d826      	bhi.n	800a180 <UART_SetConfig+0x4bc>
 800a132:	a201      	add	r2, pc, #4	; (adr r2, 800a138 <UART_SetConfig+0x474>)
 800a134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a138:	0800a151 	.word	0x0800a151
 800a13c:	0800a159 	.word	0x0800a159
 800a140:	0800a161 	.word	0x0800a161
 800a144:	0800a169 	.word	0x0800a169
 800a148:	0800a171 	.word	0x0800a171
 800a14c:	0800a179 	.word	0x0800a179
 800a150:	2300      	movs	r3, #0
 800a152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a156:	e18a      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a158:	2304      	movs	r3, #4
 800a15a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a15e:	e186      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a160:	2308      	movs	r3, #8
 800a162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a166:	e182      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a168:	2310      	movs	r3, #16
 800a16a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a16e:	e17e      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a170:	2320      	movs	r3, #32
 800a172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a176:	e17a      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a178:	2340      	movs	r3, #64	; 0x40
 800a17a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a17e:	e176      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a180:	2380      	movs	r3, #128	; 0x80
 800a182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a186:	e172      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a5b      	ldr	r2, [pc, #364]	; (800a2fc <UART_SetConfig+0x638>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d130      	bne.n	800a1f4 <UART_SetConfig+0x530>
 800a192:	4b58      	ldr	r3, [pc, #352]	; (800a2f4 <UART_SetConfig+0x630>)
 800a194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a196:	f003 0307 	and.w	r3, r3, #7
 800a19a:	2b05      	cmp	r3, #5
 800a19c:	d826      	bhi.n	800a1ec <UART_SetConfig+0x528>
 800a19e:	a201      	add	r2, pc, #4	; (adr r2, 800a1a4 <UART_SetConfig+0x4e0>)
 800a1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a4:	0800a1bd 	.word	0x0800a1bd
 800a1a8:	0800a1c5 	.word	0x0800a1c5
 800a1ac:	0800a1cd 	.word	0x0800a1cd
 800a1b0:	0800a1d5 	.word	0x0800a1d5
 800a1b4:	0800a1dd 	.word	0x0800a1dd
 800a1b8:	0800a1e5 	.word	0x0800a1e5
 800a1bc:	2300      	movs	r3, #0
 800a1be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1c2:	e154      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a1c4:	2304      	movs	r3, #4
 800a1c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ca:	e150      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a1cc:	2308      	movs	r3, #8
 800a1ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1d2:	e14c      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a1d4:	2310      	movs	r3, #16
 800a1d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1da:	e148      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a1dc:	2320      	movs	r3, #32
 800a1de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1e2:	e144      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a1e4:	2340      	movs	r3, #64	; 0x40
 800a1e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ea:	e140      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a1ec:	2380      	movs	r3, #128	; 0x80
 800a1ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1f2:	e13c      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a41      	ldr	r2, [pc, #260]	; (800a300 <UART_SetConfig+0x63c>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	f040 8082 	bne.w	800a304 <UART_SetConfig+0x640>
 800a200:	4b3c      	ldr	r3, [pc, #240]	; (800a2f4 <UART_SetConfig+0x630>)
 800a202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a204:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a208:	2b28      	cmp	r3, #40	; 0x28
 800a20a:	d86d      	bhi.n	800a2e8 <UART_SetConfig+0x624>
 800a20c:	a201      	add	r2, pc, #4	; (adr r2, 800a214 <UART_SetConfig+0x550>)
 800a20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a212:	bf00      	nop
 800a214:	0800a2b9 	.word	0x0800a2b9
 800a218:	0800a2e9 	.word	0x0800a2e9
 800a21c:	0800a2e9 	.word	0x0800a2e9
 800a220:	0800a2e9 	.word	0x0800a2e9
 800a224:	0800a2e9 	.word	0x0800a2e9
 800a228:	0800a2e9 	.word	0x0800a2e9
 800a22c:	0800a2e9 	.word	0x0800a2e9
 800a230:	0800a2e9 	.word	0x0800a2e9
 800a234:	0800a2c1 	.word	0x0800a2c1
 800a238:	0800a2e9 	.word	0x0800a2e9
 800a23c:	0800a2e9 	.word	0x0800a2e9
 800a240:	0800a2e9 	.word	0x0800a2e9
 800a244:	0800a2e9 	.word	0x0800a2e9
 800a248:	0800a2e9 	.word	0x0800a2e9
 800a24c:	0800a2e9 	.word	0x0800a2e9
 800a250:	0800a2e9 	.word	0x0800a2e9
 800a254:	0800a2c9 	.word	0x0800a2c9
 800a258:	0800a2e9 	.word	0x0800a2e9
 800a25c:	0800a2e9 	.word	0x0800a2e9
 800a260:	0800a2e9 	.word	0x0800a2e9
 800a264:	0800a2e9 	.word	0x0800a2e9
 800a268:	0800a2e9 	.word	0x0800a2e9
 800a26c:	0800a2e9 	.word	0x0800a2e9
 800a270:	0800a2e9 	.word	0x0800a2e9
 800a274:	0800a2d1 	.word	0x0800a2d1
 800a278:	0800a2e9 	.word	0x0800a2e9
 800a27c:	0800a2e9 	.word	0x0800a2e9
 800a280:	0800a2e9 	.word	0x0800a2e9
 800a284:	0800a2e9 	.word	0x0800a2e9
 800a288:	0800a2e9 	.word	0x0800a2e9
 800a28c:	0800a2e9 	.word	0x0800a2e9
 800a290:	0800a2e9 	.word	0x0800a2e9
 800a294:	0800a2d9 	.word	0x0800a2d9
 800a298:	0800a2e9 	.word	0x0800a2e9
 800a29c:	0800a2e9 	.word	0x0800a2e9
 800a2a0:	0800a2e9 	.word	0x0800a2e9
 800a2a4:	0800a2e9 	.word	0x0800a2e9
 800a2a8:	0800a2e9 	.word	0x0800a2e9
 800a2ac:	0800a2e9 	.word	0x0800a2e9
 800a2b0:	0800a2e9 	.word	0x0800a2e9
 800a2b4:	0800a2e1 	.word	0x0800a2e1
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2be:	e0d6      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a2c0:	2304      	movs	r3, #4
 800a2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2c6:	e0d2      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a2c8:	2308      	movs	r3, #8
 800a2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ce:	e0ce      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a2d0:	2310      	movs	r3, #16
 800a2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2d6:	e0ca      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a2d8:	2320      	movs	r3, #32
 800a2da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2de:	e0c6      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a2e0:	2340      	movs	r3, #64	; 0x40
 800a2e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2e6:	e0c2      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a2e8:	2380      	movs	r3, #128	; 0x80
 800a2ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ee:	e0be      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a2f0:	40011400 	.word	0x40011400
 800a2f4:	58024400 	.word	0x58024400
 800a2f8:	40007800 	.word	0x40007800
 800a2fc:	40007c00 	.word	0x40007c00
 800a300:	40011800 	.word	0x40011800
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4aad      	ldr	r2, [pc, #692]	; (800a5c0 <UART_SetConfig+0x8fc>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d176      	bne.n	800a3fc <UART_SetConfig+0x738>
 800a30e:	4bad      	ldr	r3, [pc, #692]	; (800a5c4 <UART_SetConfig+0x900>)
 800a310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a312:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a316:	2b28      	cmp	r3, #40	; 0x28
 800a318:	d86c      	bhi.n	800a3f4 <UART_SetConfig+0x730>
 800a31a:	a201      	add	r2, pc, #4	; (adr r2, 800a320 <UART_SetConfig+0x65c>)
 800a31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a320:	0800a3c5 	.word	0x0800a3c5
 800a324:	0800a3f5 	.word	0x0800a3f5
 800a328:	0800a3f5 	.word	0x0800a3f5
 800a32c:	0800a3f5 	.word	0x0800a3f5
 800a330:	0800a3f5 	.word	0x0800a3f5
 800a334:	0800a3f5 	.word	0x0800a3f5
 800a338:	0800a3f5 	.word	0x0800a3f5
 800a33c:	0800a3f5 	.word	0x0800a3f5
 800a340:	0800a3cd 	.word	0x0800a3cd
 800a344:	0800a3f5 	.word	0x0800a3f5
 800a348:	0800a3f5 	.word	0x0800a3f5
 800a34c:	0800a3f5 	.word	0x0800a3f5
 800a350:	0800a3f5 	.word	0x0800a3f5
 800a354:	0800a3f5 	.word	0x0800a3f5
 800a358:	0800a3f5 	.word	0x0800a3f5
 800a35c:	0800a3f5 	.word	0x0800a3f5
 800a360:	0800a3d5 	.word	0x0800a3d5
 800a364:	0800a3f5 	.word	0x0800a3f5
 800a368:	0800a3f5 	.word	0x0800a3f5
 800a36c:	0800a3f5 	.word	0x0800a3f5
 800a370:	0800a3f5 	.word	0x0800a3f5
 800a374:	0800a3f5 	.word	0x0800a3f5
 800a378:	0800a3f5 	.word	0x0800a3f5
 800a37c:	0800a3f5 	.word	0x0800a3f5
 800a380:	0800a3dd 	.word	0x0800a3dd
 800a384:	0800a3f5 	.word	0x0800a3f5
 800a388:	0800a3f5 	.word	0x0800a3f5
 800a38c:	0800a3f5 	.word	0x0800a3f5
 800a390:	0800a3f5 	.word	0x0800a3f5
 800a394:	0800a3f5 	.word	0x0800a3f5
 800a398:	0800a3f5 	.word	0x0800a3f5
 800a39c:	0800a3f5 	.word	0x0800a3f5
 800a3a0:	0800a3e5 	.word	0x0800a3e5
 800a3a4:	0800a3f5 	.word	0x0800a3f5
 800a3a8:	0800a3f5 	.word	0x0800a3f5
 800a3ac:	0800a3f5 	.word	0x0800a3f5
 800a3b0:	0800a3f5 	.word	0x0800a3f5
 800a3b4:	0800a3f5 	.word	0x0800a3f5
 800a3b8:	0800a3f5 	.word	0x0800a3f5
 800a3bc:	0800a3f5 	.word	0x0800a3f5
 800a3c0:	0800a3ed 	.word	0x0800a3ed
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ca:	e050      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a3cc:	2304      	movs	r3, #4
 800a3ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3d2:	e04c      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a3d4:	2308      	movs	r3, #8
 800a3d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3da:	e048      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a3dc:	2310      	movs	r3, #16
 800a3de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3e2:	e044      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a3e4:	2320      	movs	r3, #32
 800a3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ea:	e040      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a3ec:	2340      	movs	r3, #64	; 0x40
 800a3ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3f2:	e03c      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a3f4:	2380      	movs	r3, #128	; 0x80
 800a3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3fa:	e038      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a71      	ldr	r2, [pc, #452]	; (800a5c8 <UART_SetConfig+0x904>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d130      	bne.n	800a468 <UART_SetConfig+0x7a4>
 800a406:	4b6f      	ldr	r3, [pc, #444]	; (800a5c4 <UART_SetConfig+0x900>)
 800a408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a40a:	f003 0307 	and.w	r3, r3, #7
 800a40e:	2b05      	cmp	r3, #5
 800a410:	d826      	bhi.n	800a460 <UART_SetConfig+0x79c>
 800a412:	a201      	add	r2, pc, #4	; (adr r2, 800a418 <UART_SetConfig+0x754>)
 800a414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a418:	0800a431 	.word	0x0800a431
 800a41c:	0800a439 	.word	0x0800a439
 800a420:	0800a441 	.word	0x0800a441
 800a424:	0800a449 	.word	0x0800a449
 800a428:	0800a451 	.word	0x0800a451
 800a42c:	0800a459 	.word	0x0800a459
 800a430:	2302      	movs	r3, #2
 800a432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a436:	e01a      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a438:	2304      	movs	r3, #4
 800a43a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a43e:	e016      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a440:	2308      	movs	r3, #8
 800a442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a446:	e012      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a448:	2310      	movs	r3, #16
 800a44a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a44e:	e00e      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a450:	2320      	movs	r3, #32
 800a452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a456:	e00a      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a458:	2340      	movs	r3, #64	; 0x40
 800a45a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a45e:	e006      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a460:	2380      	movs	r3, #128	; 0x80
 800a462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a466:	e002      	b.n	800a46e <UART_SetConfig+0x7aa>
 800a468:	2380      	movs	r3, #128	; 0x80
 800a46a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a55      	ldr	r2, [pc, #340]	; (800a5c8 <UART_SetConfig+0x904>)
 800a474:	4293      	cmp	r3, r2
 800a476:	f040 80f0 	bne.w	800a65a <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a47a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a47e:	2b20      	cmp	r3, #32
 800a480:	dc46      	bgt.n	800a510 <UART_SetConfig+0x84c>
 800a482:	2b02      	cmp	r3, #2
 800a484:	db75      	blt.n	800a572 <UART_SetConfig+0x8ae>
 800a486:	3b02      	subs	r3, #2
 800a488:	2b1e      	cmp	r3, #30
 800a48a:	d872      	bhi.n	800a572 <UART_SetConfig+0x8ae>
 800a48c:	a201      	add	r2, pc, #4	; (adr r2, 800a494 <UART_SetConfig+0x7d0>)
 800a48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a492:	bf00      	nop
 800a494:	0800a517 	.word	0x0800a517
 800a498:	0800a573 	.word	0x0800a573
 800a49c:	0800a51f 	.word	0x0800a51f
 800a4a0:	0800a573 	.word	0x0800a573
 800a4a4:	0800a573 	.word	0x0800a573
 800a4a8:	0800a573 	.word	0x0800a573
 800a4ac:	0800a52f 	.word	0x0800a52f
 800a4b0:	0800a573 	.word	0x0800a573
 800a4b4:	0800a573 	.word	0x0800a573
 800a4b8:	0800a573 	.word	0x0800a573
 800a4bc:	0800a573 	.word	0x0800a573
 800a4c0:	0800a573 	.word	0x0800a573
 800a4c4:	0800a573 	.word	0x0800a573
 800a4c8:	0800a573 	.word	0x0800a573
 800a4cc:	0800a53f 	.word	0x0800a53f
 800a4d0:	0800a573 	.word	0x0800a573
 800a4d4:	0800a573 	.word	0x0800a573
 800a4d8:	0800a573 	.word	0x0800a573
 800a4dc:	0800a573 	.word	0x0800a573
 800a4e0:	0800a573 	.word	0x0800a573
 800a4e4:	0800a573 	.word	0x0800a573
 800a4e8:	0800a573 	.word	0x0800a573
 800a4ec:	0800a573 	.word	0x0800a573
 800a4f0:	0800a573 	.word	0x0800a573
 800a4f4:	0800a573 	.word	0x0800a573
 800a4f8:	0800a573 	.word	0x0800a573
 800a4fc:	0800a573 	.word	0x0800a573
 800a500:	0800a573 	.word	0x0800a573
 800a504:	0800a573 	.word	0x0800a573
 800a508:	0800a573 	.word	0x0800a573
 800a50c:	0800a565 	.word	0x0800a565
 800a510:	2b40      	cmp	r3, #64	; 0x40
 800a512:	d02a      	beq.n	800a56a <UART_SetConfig+0x8a6>
 800a514:	e02d      	b.n	800a572 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a516:	f7fe f9bd 	bl	8008894 <HAL_RCCEx_GetD3PCLK1Freq>
 800a51a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a51c:	e02f      	b.n	800a57e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a51e:	f107 0314 	add.w	r3, r7, #20
 800a522:	4618      	mov	r0, r3
 800a524:	f7fe f9cc 	bl	80088c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a52c:	e027      	b.n	800a57e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a52e:	f107 0308 	add.w	r3, r7, #8
 800a532:	4618      	mov	r0, r3
 800a534:	f7fe fb18 	bl	8008b68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a53c:	e01f      	b.n	800a57e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a53e:	4b21      	ldr	r3, [pc, #132]	; (800a5c4 <UART_SetConfig+0x900>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 0320 	and.w	r3, r3, #32
 800a546:	2b00      	cmp	r3, #0
 800a548:	d009      	beq.n	800a55e <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a54a:	4b1e      	ldr	r3, [pc, #120]	; (800a5c4 <UART_SetConfig+0x900>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	08db      	lsrs	r3, r3, #3
 800a550:	f003 0303 	and.w	r3, r3, #3
 800a554:	4a1d      	ldr	r2, [pc, #116]	; (800a5cc <UART_SetConfig+0x908>)
 800a556:	fa22 f303 	lsr.w	r3, r2, r3
 800a55a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a55c:	e00f      	b.n	800a57e <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800a55e:	4b1b      	ldr	r3, [pc, #108]	; (800a5cc <UART_SetConfig+0x908>)
 800a560:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a562:	e00c      	b.n	800a57e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a564:	4b1a      	ldr	r3, [pc, #104]	; (800a5d0 <UART_SetConfig+0x90c>)
 800a566:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a568:	e009      	b.n	800a57e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a56a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a56e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a570:	e005      	b.n	800a57e <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800a572:	2300      	movs	r3, #0
 800a574:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a57c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a580:	2b00      	cmp	r3, #0
 800a582:	f000 81e6 	beq.w	800a952 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58a:	4a12      	ldr	r2, [pc, #72]	; (800a5d4 <UART_SetConfig+0x910>)
 800a58c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a590:	461a      	mov	r2, r3
 800a592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a594:	fbb3 f3f2 	udiv	r3, r3, r2
 800a598:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	685a      	ldr	r2, [r3, #4]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	005b      	lsls	r3, r3, #1
 800a5a2:	4413      	add	r3, r2
 800a5a4:	6a3a      	ldr	r2, [r7, #32]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d305      	bcc.n	800a5b6 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5b0:	6a3a      	ldr	r2, [r7, #32]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d910      	bls.n	800a5d8 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a5bc:	e1c9      	b.n	800a952 <UART_SetConfig+0xc8e>
 800a5be:	bf00      	nop
 800a5c0:	40011c00 	.word	0x40011c00
 800a5c4:	58024400 	.word	0x58024400
 800a5c8:	58000c00 	.word	0x58000c00
 800a5cc:	03d09000 	.word	0x03d09000
 800a5d0:	003d0900 	.word	0x003d0900
 800a5d4:	0800b988 	.word	0x0800b988
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f04f 0100 	mov.w	r1, #0
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e4:	4ac1      	ldr	r2, [pc, #772]	; (800a8ec <UART_SetConfig+0xc28>)
 800a5e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5ea:	b29a      	uxth	r2, r3
 800a5ec:	f04f 0300 	mov.w	r3, #0
 800a5f0:	f7f5 fede 	bl	80003b0 <__aeabi_uldivmod>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	4610      	mov	r0, r2
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	f04f 0200 	mov.w	r2, #0
 800a600:	f04f 0300 	mov.w	r3, #0
 800a604:	020b      	lsls	r3, r1, #8
 800a606:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a60a:	0202      	lsls	r2, r0, #8
 800a60c:	6879      	ldr	r1, [r7, #4]
 800a60e:	6849      	ldr	r1, [r1, #4]
 800a610:	0849      	lsrs	r1, r1, #1
 800a612:	4608      	mov	r0, r1
 800a614:	f04f 0100 	mov.w	r1, #0
 800a618:	1814      	adds	r4, r2, r0
 800a61a:	eb43 0501 	adc.w	r5, r3, r1
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	461a      	mov	r2, r3
 800a624:	f04f 0300 	mov.w	r3, #0
 800a628:	4620      	mov	r0, r4
 800a62a:	4629      	mov	r1, r5
 800a62c:	f7f5 fec0 	bl	80003b0 <__aeabi_uldivmod>
 800a630:	4602      	mov	r2, r0
 800a632:	460b      	mov	r3, r1
 800a634:	4613      	mov	r3, r2
 800a636:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a63e:	d308      	bcc.n	800a652 <UART_SetConfig+0x98e>
 800a640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a646:	d204      	bcs.n	800a652 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a64e:	60da      	str	r2, [r3, #12]
 800a650:	e17f      	b.n	800a952 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800a652:	2301      	movs	r3, #1
 800a654:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a658:	e17b      	b.n	800a952 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	69db      	ldr	r3, [r3, #28]
 800a65e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a662:	f040 80bd 	bne.w	800a7e0 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800a666:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a66a:	2b20      	cmp	r3, #32
 800a66c:	dc48      	bgt.n	800a700 <UART_SetConfig+0xa3c>
 800a66e:	2b00      	cmp	r3, #0
 800a670:	db7b      	blt.n	800a76a <UART_SetConfig+0xaa6>
 800a672:	2b20      	cmp	r3, #32
 800a674:	d879      	bhi.n	800a76a <UART_SetConfig+0xaa6>
 800a676:	a201      	add	r2, pc, #4	; (adr r2, 800a67c <UART_SetConfig+0x9b8>)
 800a678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a67c:	0800a707 	.word	0x0800a707
 800a680:	0800a70f 	.word	0x0800a70f
 800a684:	0800a76b 	.word	0x0800a76b
 800a688:	0800a76b 	.word	0x0800a76b
 800a68c:	0800a717 	.word	0x0800a717
 800a690:	0800a76b 	.word	0x0800a76b
 800a694:	0800a76b 	.word	0x0800a76b
 800a698:	0800a76b 	.word	0x0800a76b
 800a69c:	0800a727 	.word	0x0800a727
 800a6a0:	0800a76b 	.word	0x0800a76b
 800a6a4:	0800a76b 	.word	0x0800a76b
 800a6a8:	0800a76b 	.word	0x0800a76b
 800a6ac:	0800a76b 	.word	0x0800a76b
 800a6b0:	0800a76b 	.word	0x0800a76b
 800a6b4:	0800a76b 	.word	0x0800a76b
 800a6b8:	0800a76b 	.word	0x0800a76b
 800a6bc:	0800a737 	.word	0x0800a737
 800a6c0:	0800a76b 	.word	0x0800a76b
 800a6c4:	0800a76b 	.word	0x0800a76b
 800a6c8:	0800a76b 	.word	0x0800a76b
 800a6cc:	0800a76b 	.word	0x0800a76b
 800a6d0:	0800a76b 	.word	0x0800a76b
 800a6d4:	0800a76b 	.word	0x0800a76b
 800a6d8:	0800a76b 	.word	0x0800a76b
 800a6dc:	0800a76b 	.word	0x0800a76b
 800a6e0:	0800a76b 	.word	0x0800a76b
 800a6e4:	0800a76b 	.word	0x0800a76b
 800a6e8:	0800a76b 	.word	0x0800a76b
 800a6ec:	0800a76b 	.word	0x0800a76b
 800a6f0:	0800a76b 	.word	0x0800a76b
 800a6f4:	0800a76b 	.word	0x0800a76b
 800a6f8:	0800a76b 	.word	0x0800a76b
 800a6fc:	0800a75d 	.word	0x0800a75d
 800a700:	2b40      	cmp	r3, #64	; 0x40
 800a702:	d02e      	beq.n	800a762 <UART_SetConfig+0xa9e>
 800a704:	e031      	b.n	800a76a <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a706:	f7fc fd7b 	bl	8007200 <HAL_RCC_GetPCLK1Freq>
 800a70a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a70c:	e033      	b.n	800a776 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a70e:	f7fc fd8d 	bl	800722c <HAL_RCC_GetPCLK2Freq>
 800a712:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a714:	e02f      	b.n	800a776 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a716:	f107 0314 	add.w	r3, r7, #20
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7fe f8d0 	bl	80088c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a724:	e027      	b.n	800a776 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a726:	f107 0308 	add.w	r3, r7, #8
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7fe fa1c 	bl	8008b68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a734:	e01f      	b.n	800a776 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a736:	4b6e      	ldr	r3, [pc, #440]	; (800a8f0 <UART_SetConfig+0xc2c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f003 0320 	and.w	r3, r3, #32
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d009      	beq.n	800a756 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a742:	4b6b      	ldr	r3, [pc, #428]	; (800a8f0 <UART_SetConfig+0xc2c>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	08db      	lsrs	r3, r3, #3
 800a748:	f003 0303 	and.w	r3, r3, #3
 800a74c:	4a69      	ldr	r2, [pc, #420]	; (800a8f4 <UART_SetConfig+0xc30>)
 800a74e:	fa22 f303 	lsr.w	r3, r2, r3
 800a752:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a754:	e00f      	b.n	800a776 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800a756:	4b67      	ldr	r3, [pc, #412]	; (800a8f4 <UART_SetConfig+0xc30>)
 800a758:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a75a:	e00c      	b.n	800a776 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a75c:	4b66      	ldr	r3, [pc, #408]	; (800a8f8 <UART_SetConfig+0xc34>)
 800a75e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a760:	e009      	b.n	800a776 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a766:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a768:	e005      	b.n	800a776 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800a76a:	2300      	movs	r3, #0
 800a76c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a76e:	2301      	movs	r3, #1
 800a770:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a774:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f000 80ea 	beq.w	800a952 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a782:	4a5a      	ldr	r2, [pc, #360]	; (800a8ec <UART_SetConfig+0xc28>)
 800a784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a788:	461a      	mov	r2, r3
 800a78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a790:	005a      	lsls	r2, r3, #1
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	085b      	lsrs	r3, r3, #1
 800a798:	441a      	add	r2, r3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7a2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a6:	2b0f      	cmp	r3, #15
 800a7a8:	d916      	bls.n	800a7d8 <UART_SetConfig+0xb14>
 800a7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7b0:	d212      	bcs.n	800a7d8 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	f023 030f 	bic.w	r3, r3, #15
 800a7ba:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7be:	085b      	lsrs	r3, r3, #1
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	f003 0307 	and.w	r3, r3, #7
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a7d4:	60da      	str	r2, [r3, #12]
 800a7d6:	e0bc      	b.n	800a952 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a7de:	e0b8      	b.n	800a952 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a7e4:	2b20      	cmp	r3, #32
 800a7e6:	dc4b      	bgt.n	800a880 <UART_SetConfig+0xbbc>
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f2c0 8087 	blt.w	800a8fc <UART_SetConfig+0xc38>
 800a7ee:	2b20      	cmp	r3, #32
 800a7f0:	f200 8084 	bhi.w	800a8fc <UART_SetConfig+0xc38>
 800a7f4:	a201      	add	r2, pc, #4	; (adr r2, 800a7fc <UART_SetConfig+0xb38>)
 800a7f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7fa:	bf00      	nop
 800a7fc:	0800a887 	.word	0x0800a887
 800a800:	0800a88f 	.word	0x0800a88f
 800a804:	0800a8fd 	.word	0x0800a8fd
 800a808:	0800a8fd 	.word	0x0800a8fd
 800a80c:	0800a897 	.word	0x0800a897
 800a810:	0800a8fd 	.word	0x0800a8fd
 800a814:	0800a8fd 	.word	0x0800a8fd
 800a818:	0800a8fd 	.word	0x0800a8fd
 800a81c:	0800a8a7 	.word	0x0800a8a7
 800a820:	0800a8fd 	.word	0x0800a8fd
 800a824:	0800a8fd 	.word	0x0800a8fd
 800a828:	0800a8fd 	.word	0x0800a8fd
 800a82c:	0800a8fd 	.word	0x0800a8fd
 800a830:	0800a8fd 	.word	0x0800a8fd
 800a834:	0800a8fd 	.word	0x0800a8fd
 800a838:	0800a8fd 	.word	0x0800a8fd
 800a83c:	0800a8b7 	.word	0x0800a8b7
 800a840:	0800a8fd 	.word	0x0800a8fd
 800a844:	0800a8fd 	.word	0x0800a8fd
 800a848:	0800a8fd 	.word	0x0800a8fd
 800a84c:	0800a8fd 	.word	0x0800a8fd
 800a850:	0800a8fd 	.word	0x0800a8fd
 800a854:	0800a8fd 	.word	0x0800a8fd
 800a858:	0800a8fd 	.word	0x0800a8fd
 800a85c:	0800a8fd 	.word	0x0800a8fd
 800a860:	0800a8fd 	.word	0x0800a8fd
 800a864:	0800a8fd 	.word	0x0800a8fd
 800a868:	0800a8fd 	.word	0x0800a8fd
 800a86c:	0800a8fd 	.word	0x0800a8fd
 800a870:	0800a8fd 	.word	0x0800a8fd
 800a874:	0800a8fd 	.word	0x0800a8fd
 800a878:	0800a8fd 	.word	0x0800a8fd
 800a87c:	0800a8dd 	.word	0x0800a8dd
 800a880:	2b40      	cmp	r3, #64	; 0x40
 800a882:	d02e      	beq.n	800a8e2 <UART_SetConfig+0xc1e>
 800a884:	e03a      	b.n	800a8fc <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a886:	f7fc fcbb 	bl	8007200 <HAL_RCC_GetPCLK1Freq>
 800a88a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a88c:	e03c      	b.n	800a908 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a88e:	f7fc fccd 	bl	800722c <HAL_RCC_GetPCLK2Freq>
 800a892:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a894:	e038      	b.n	800a908 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a896:	f107 0314 	add.w	r3, r7, #20
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7fe f810 	bl	80088c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8a4:	e030      	b.n	800a908 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8a6:	f107 0308 	add.w	r3, r7, #8
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fe f95c 	bl	8008b68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8b4:	e028      	b.n	800a908 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8b6:	4b0e      	ldr	r3, [pc, #56]	; (800a8f0 <UART_SetConfig+0xc2c>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f003 0320 	and.w	r3, r3, #32
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d009      	beq.n	800a8d6 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8c2:	4b0b      	ldr	r3, [pc, #44]	; (800a8f0 <UART_SetConfig+0xc2c>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	08db      	lsrs	r3, r3, #3
 800a8c8:	f003 0303 	and.w	r3, r3, #3
 800a8cc:	4a09      	ldr	r2, [pc, #36]	; (800a8f4 <UART_SetConfig+0xc30>)
 800a8ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8d4:	e018      	b.n	800a908 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800a8d6:	4b07      	ldr	r3, [pc, #28]	; (800a8f4 <UART_SetConfig+0xc30>)
 800a8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8da:	e015      	b.n	800a908 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8dc:	4b06      	ldr	r3, [pc, #24]	; (800a8f8 <UART_SetConfig+0xc34>)
 800a8de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8e0:	e012      	b.n	800a908 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8e8:	e00e      	b.n	800a908 <UART_SetConfig+0xc44>
 800a8ea:	bf00      	nop
 800a8ec:	0800b988 	.word	0x0800b988
 800a8f0:	58024400 	.word	0x58024400
 800a8f4:	03d09000 	.word	0x03d09000
 800a8f8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a906:	bf00      	nop
    }

    if (pclk != 0U)
 800a908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d021      	beq.n	800a952 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a912:	4a1a      	ldr	r2, [pc, #104]	; (800a97c <UART_SetConfig+0xcb8>)
 800a914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a918:	461a      	mov	r2, r3
 800a91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91c:	fbb3 f2f2 	udiv	r2, r3, r2
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	085b      	lsrs	r3, r3, #1
 800a926:	441a      	add	r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a930:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a934:	2b0f      	cmp	r3, #15
 800a936:	d909      	bls.n	800a94c <UART_SetConfig+0xc88>
 800a938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a93e:	d205      	bcs.n	800a94c <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a942:	b29a      	uxth	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	60da      	str	r2, [r3, #12]
 800a94a:	e002      	b.n	800a952 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2201      	movs	r2, #1
 800a956:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2201      	movs	r2, #1
 800a95e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a96e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a972:	4618      	mov	r0, r3
 800a974:	3738      	adds	r7, #56	; 0x38
 800a976:	46bd      	mov	sp, r7
 800a978:	bdb0      	pop	{r4, r5, r7, pc}
 800a97a:	bf00      	nop
 800a97c:	0800b988 	.word	0x0800b988

0800a980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a98c:	f003 0301 	and.w	r3, r3, #1
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00a      	beq.n	800a9aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	430a      	orrs	r2, r1
 800a9a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ae:	f003 0302 	and.w	r3, r3, #2
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00a      	beq.n	800a9cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	430a      	orrs	r2, r1
 800a9ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d0:	f003 0304 	and.w	r3, r3, #4
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00a      	beq.n	800a9ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	430a      	orrs	r2, r1
 800a9ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f2:	f003 0308 	and.w	r3, r3, #8
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00a      	beq.n	800aa10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	430a      	orrs	r2, r1
 800aa0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa14:	f003 0310 	and.w	r3, r3, #16
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00a      	beq.n	800aa32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	430a      	orrs	r2, r1
 800aa30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa36:	f003 0320 	and.w	r3, r3, #32
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00a      	beq.n	800aa54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	430a      	orrs	r2, r1
 800aa52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d01a      	beq.n	800aa96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	430a      	orrs	r2, r1
 800aa74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa7e:	d10a      	bne.n	800aa96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	430a      	orrs	r2, r1
 800aa94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00a      	beq.n	800aab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	430a      	orrs	r2, r1
 800aab6:	605a      	str	r2, [r3, #4]
  }
}
 800aab8:	bf00      	nop
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b086      	sub	sp, #24
 800aac8:	af02      	add	r7, sp, #8
 800aaca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aad4:	f7f6 fb44 	bl	8001160 <HAL_GetTick>
 800aad8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f003 0308 	and.w	r3, r3, #8
 800aae4:	2b08      	cmp	r3, #8
 800aae6:	d10e      	bne.n	800ab06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 f82f 	bl	800ab5a <UART_WaitOnFlagUntilTimeout>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d001      	beq.n	800ab06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab02:	2303      	movs	r3, #3
 800ab04:	e025      	b.n	800ab52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 0304 	and.w	r3, r3, #4
 800ab10:	2b04      	cmp	r3, #4
 800ab12:	d10e      	bne.n	800ab32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab18:	9300      	str	r3, [sp, #0]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 f819 	bl	800ab5a <UART_WaitOnFlagUntilTimeout>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d001      	beq.n	800ab32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab2e:	2303      	movs	r3, #3
 800ab30:	e00f      	b.n	800ab52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2220      	movs	r2, #32
 800ab36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2220      	movs	r2, #32
 800ab3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b09c      	sub	sp, #112	; 0x70
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	60f8      	str	r0, [r7, #12]
 800ab62:	60b9      	str	r1, [r7, #8]
 800ab64:	603b      	str	r3, [r7, #0]
 800ab66:	4613      	mov	r3, r2
 800ab68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab6a:	e0a9      	b.n	800acc0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab72:	f000 80a5 	beq.w	800acc0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab76:	f7f6 faf3 	bl	8001160 <HAL_GetTick>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	1ad3      	subs	r3, r2, r3
 800ab80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d302      	bcc.n	800ab8c <UART_WaitOnFlagUntilTimeout+0x32>
 800ab86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d140      	bne.n	800ac0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab94:	e853 3f00 	ldrex	r3, [r3]
 800ab98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ab9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aba0:	667b      	str	r3, [r7, #100]	; 0x64
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	461a      	mov	r2, r3
 800aba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800abb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800abb2:	e841 2300 	strex	r3, r2, [r1]
 800abb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800abb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d1e6      	bne.n	800ab8c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	3308      	adds	r3, #8
 800abc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abc8:	e853 3f00 	ldrex	r3, [r3]
 800abcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800abce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd0:	f023 0301 	bic.w	r3, r3, #1
 800abd4:	663b      	str	r3, [r7, #96]	; 0x60
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	3308      	adds	r3, #8
 800abdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800abde:	64ba      	str	r2, [r7, #72]	; 0x48
 800abe0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800abe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abe6:	e841 2300 	strex	r3, r2, [r1]
 800abea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800abec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1e5      	bne.n	800abbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2220      	movs	r2, #32
 800abf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2220      	movs	r2, #32
 800abfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ac0a:	2303      	movs	r3, #3
 800ac0c:	e069      	b.n	800ace2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 0304 	and.w	r3, r3, #4
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d051      	beq.n	800acc0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	69db      	ldr	r3, [r3, #28]
 800ac22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac2a:	d149      	bne.n	800acc0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3e:	e853 3f00 	ldrex	r3, [r3]
 800ac42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ac4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	461a      	mov	r2, r3
 800ac52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac54:	637b      	str	r3, [r7, #52]	; 0x34
 800ac56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac5c:	e841 2300 	strex	r3, r2, [r1]
 800ac60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ac62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d1e6      	bne.n	800ac36 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	3308      	adds	r3, #8
 800ac6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	e853 3f00 	ldrex	r3, [r3]
 800ac76:	613b      	str	r3, [r7, #16]
   return(result);
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	f023 0301 	bic.w	r3, r3, #1
 800ac7e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	3308      	adds	r3, #8
 800ac86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ac88:	623a      	str	r2, [r7, #32]
 800ac8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8c:	69f9      	ldr	r1, [r7, #28]
 800ac8e:	6a3a      	ldr	r2, [r7, #32]
 800ac90:	e841 2300 	strex	r3, r2, [r1]
 800ac94:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1e5      	bne.n	800ac68 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2220      	movs	r2, #32
 800aca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2220      	movs	r2, #32
 800aca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2220      	movs	r2, #32
 800acb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800acbc:	2303      	movs	r3, #3
 800acbe:	e010      	b.n	800ace2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	69da      	ldr	r2, [r3, #28]
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	4013      	ands	r3, r2
 800acca:	68ba      	ldr	r2, [r7, #8]
 800accc:	429a      	cmp	r2, r3
 800acce:	bf0c      	ite	eq
 800acd0:	2301      	moveq	r3, #1
 800acd2:	2300      	movne	r3, #0
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	461a      	mov	r2, r3
 800acd8:	79fb      	ldrb	r3, [r7, #7]
 800acda:	429a      	cmp	r2, r3
 800acdc:	f43f af46 	beq.w	800ab6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ace0:	2300      	movs	r3, #0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3770      	adds	r7, #112	; 0x70
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
	...

0800acec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800acec:	b480      	push	{r7}
 800acee:	b095      	sub	sp, #84	; 0x54
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acfc:	e853 3f00 	ldrex	r3, [r3]
 800ad00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad08:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad12:	643b      	str	r3, [r7, #64]	; 0x40
 800ad14:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad1a:	e841 2300 	strex	r3, r2, [r1]
 800ad1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d1e6      	bne.n	800acf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3308      	adds	r3, #8
 800ad2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2e:	6a3b      	ldr	r3, [r7, #32]
 800ad30:	e853 3f00 	ldrex	r3, [r3]
 800ad34:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad36:	69fa      	ldr	r2, [r7, #28]
 800ad38:	4b1e      	ldr	r3, [pc, #120]	; (800adb4 <UART_EndRxTransfer+0xc8>)
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	3308      	adds	r3, #8
 800ad44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad46:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad4e:	e841 2300 	strex	r3, r2, [r1]
 800ad52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1e5      	bne.n	800ad26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d118      	bne.n	800ad94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	e853 3f00 	ldrex	r3, [r3]
 800ad6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	f023 0310 	bic.w	r3, r3, #16
 800ad76:	647b      	str	r3, [r7, #68]	; 0x44
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad80:	61bb      	str	r3, [r7, #24]
 800ad82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad84:	6979      	ldr	r1, [r7, #20]
 800ad86:	69ba      	ldr	r2, [r7, #24]
 800ad88:	e841 2300 	strex	r3, r2, [r1]
 800ad8c:	613b      	str	r3, [r7, #16]
   return(result);
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d1e6      	bne.n	800ad62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2220      	movs	r2, #32
 800ad98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ada8:	bf00      	nop
 800adaa:	3754      	adds	r7, #84	; 0x54
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr
 800adb4:	effffffe 	.word	0xeffffffe

0800adb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2200      	movs	r2, #0
 800adca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f7fe ff5e 	bl	8009c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800addc:	bf00      	nop
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b088      	sub	sp, #32
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	e853 3f00 	ldrex	r3, [r3]
 800adf8:	60bb      	str	r3, [r7, #8]
   return(result);
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae00:	61fb      	str	r3, [r7, #28]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	461a      	mov	r2, r3
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	61bb      	str	r3, [r7, #24]
 800ae0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0e:	6979      	ldr	r1, [r7, #20]
 800ae10:	69ba      	ldr	r2, [r7, #24]
 800ae12:	e841 2300 	strex	r3, r2, [r1]
 800ae16:	613b      	str	r3, [r7, #16]
   return(result);
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1e6      	bne.n	800adec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2220      	movs	r2, #32
 800ae22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7fe ff29 	bl	8009c84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae32:	bf00      	nop
 800ae34:	3720      	adds	r7, #32
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ae3a:	b480      	push	{r7}
 800ae3c:	b083      	sub	sp, #12
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ae42:	bf00      	nop
 800ae44:	370c      	adds	r7, #12
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr

0800ae4e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ae4e:	b480      	push	{r7}
 800ae50:	b083      	sub	sp, #12
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ae56:	bf00      	nop
 800ae58:	370c      	adds	r7, #12
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ae62:	b480      	push	{r7}
 800ae64:	b083      	sub	sp, #12
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ae6a:	bf00      	nop
 800ae6c:	370c      	adds	r7, #12
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr

0800ae76 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae76:	b480      	push	{r7}
 800ae78:	b085      	sub	sp, #20
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d101      	bne.n	800ae8c <HAL_UARTEx_DisableFifoMode+0x16>
 800ae88:	2302      	movs	r3, #2
 800ae8a:	e027      	b.n	800aedc <HAL_UARTEx_DisableFifoMode+0x66>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2224      	movs	r2, #36	; 0x24
 800ae98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f022 0201 	bic.w	r2, r2, #1
 800aeb2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aeba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2220      	movs	r2, #32
 800aece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3714      	adds	r7, #20
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d101      	bne.n	800af00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aefc:	2302      	movs	r3, #2
 800aefe:	e02d      	b.n	800af5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2201      	movs	r2, #1
 800af04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2224      	movs	r2, #36	; 0x24
 800af0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f022 0201 	bic.w	r2, r2, #1
 800af26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	430a      	orrs	r2, r1
 800af3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 f84f 	bl	800afe0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2220      	movs	r2, #32
 800af4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af5a:	2300      	movs	r3, #0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af74:	2b01      	cmp	r3, #1
 800af76:	d101      	bne.n	800af7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af78:	2302      	movs	r3, #2
 800af7a:	e02d      	b.n	800afd8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2201      	movs	r2, #1
 800af80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2224      	movs	r2, #36	; 0x24
 800af88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f022 0201 	bic.w	r2, r2, #1
 800afa2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	430a      	orrs	r2, r1
 800afb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 f811 	bl	800afe0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2220      	movs	r2, #32
 800afca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3710      	adds	r7, #16
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afec:	2b00      	cmp	r3, #0
 800afee:	d108      	bne.n	800b002 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b000:	e031      	b.n	800b066 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b002:	2310      	movs	r3, #16
 800b004:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b006:	2310      	movs	r3, #16
 800b008:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	0e5b      	lsrs	r3, r3, #25
 800b012:	b2db      	uxtb	r3, r3
 800b014:	f003 0307 	and.w	r3, r3, #7
 800b018:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	0f5b      	lsrs	r3, r3, #29
 800b022:	b2db      	uxtb	r3, r3
 800b024:	f003 0307 	and.w	r3, r3, #7
 800b028:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b02a:	7bbb      	ldrb	r3, [r7, #14]
 800b02c:	7b3a      	ldrb	r2, [r7, #12]
 800b02e:	4911      	ldr	r1, [pc, #68]	; (800b074 <UARTEx_SetNbDataToProcess+0x94>)
 800b030:	5c8a      	ldrb	r2, [r1, r2]
 800b032:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b036:	7b3a      	ldrb	r2, [r7, #12]
 800b038:	490f      	ldr	r1, [pc, #60]	; (800b078 <UARTEx_SetNbDataToProcess+0x98>)
 800b03a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b03c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b040:	b29a      	uxth	r2, r3
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b048:	7bfb      	ldrb	r3, [r7, #15]
 800b04a:	7b7a      	ldrb	r2, [r7, #13]
 800b04c:	4909      	ldr	r1, [pc, #36]	; (800b074 <UARTEx_SetNbDataToProcess+0x94>)
 800b04e:	5c8a      	ldrb	r2, [r1, r2]
 800b050:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b054:	7b7a      	ldrb	r2, [r7, #13]
 800b056:	4908      	ldr	r1, [pc, #32]	; (800b078 <UARTEx_SetNbDataToProcess+0x98>)
 800b058:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b05a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b05e:	b29a      	uxth	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b066:	bf00      	nop
 800b068:	3714      	adds	r7, #20
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	0800b9a0 	.word	0x0800b9a0
 800b078:	0800b9a8 	.word	0x0800b9a8

0800b07c <__errno>:
 800b07c:	4b01      	ldr	r3, [pc, #4]	; (800b084 <__errno+0x8>)
 800b07e:	6818      	ldr	r0, [r3, #0]
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop
 800b084:	24000010 	.word	0x24000010

0800b088 <__libc_init_array>:
 800b088:	b570      	push	{r4, r5, r6, lr}
 800b08a:	4d0d      	ldr	r5, [pc, #52]	; (800b0c0 <__libc_init_array+0x38>)
 800b08c:	4c0d      	ldr	r4, [pc, #52]	; (800b0c4 <__libc_init_array+0x3c>)
 800b08e:	1b64      	subs	r4, r4, r5
 800b090:	10a4      	asrs	r4, r4, #2
 800b092:	2600      	movs	r6, #0
 800b094:	42a6      	cmp	r6, r4
 800b096:	d109      	bne.n	800b0ac <__libc_init_array+0x24>
 800b098:	4d0b      	ldr	r5, [pc, #44]	; (800b0c8 <__libc_init_array+0x40>)
 800b09a:	4c0c      	ldr	r4, [pc, #48]	; (800b0cc <__libc_init_array+0x44>)
 800b09c:	f000 fc4e 	bl	800b93c <_init>
 800b0a0:	1b64      	subs	r4, r4, r5
 800b0a2:	10a4      	asrs	r4, r4, #2
 800b0a4:	2600      	movs	r6, #0
 800b0a6:	42a6      	cmp	r6, r4
 800b0a8:	d105      	bne.n	800b0b6 <__libc_init_array+0x2e>
 800b0aa:	bd70      	pop	{r4, r5, r6, pc}
 800b0ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0b0:	4798      	blx	r3
 800b0b2:	3601      	adds	r6, #1
 800b0b4:	e7ee      	b.n	800b094 <__libc_init_array+0xc>
 800b0b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0ba:	4798      	blx	r3
 800b0bc:	3601      	adds	r6, #1
 800b0be:	e7f2      	b.n	800b0a6 <__libc_init_array+0x1e>
 800b0c0:	0800b9ec 	.word	0x0800b9ec
 800b0c4:	0800b9ec 	.word	0x0800b9ec
 800b0c8:	0800b9ec 	.word	0x0800b9ec
 800b0cc:	0800b9f0 	.word	0x0800b9f0

0800b0d0 <memset>:
 800b0d0:	4402      	add	r2, r0
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d100      	bne.n	800b0da <memset+0xa>
 800b0d8:	4770      	bx	lr
 800b0da:	f803 1b01 	strb.w	r1, [r3], #1
 800b0de:	e7f9      	b.n	800b0d4 <memset+0x4>

0800b0e0 <_vsiprintf_r>:
 800b0e0:	b500      	push	{lr}
 800b0e2:	b09b      	sub	sp, #108	; 0x6c
 800b0e4:	9100      	str	r1, [sp, #0]
 800b0e6:	9104      	str	r1, [sp, #16]
 800b0e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b0ec:	9105      	str	r1, [sp, #20]
 800b0ee:	9102      	str	r1, [sp, #8]
 800b0f0:	4905      	ldr	r1, [pc, #20]	; (800b108 <_vsiprintf_r+0x28>)
 800b0f2:	9103      	str	r1, [sp, #12]
 800b0f4:	4669      	mov	r1, sp
 800b0f6:	f000 f86f 	bl	800b1d8 <_svfiprintf_r>
 800b0fa:	9b00      	ldr	r3, [sp, #0]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	701a      	strb	r2, [r3, #0]
 800b100:	b01b      	add	sp, #108	; 0x6c
 800b102:	f85d fb04 	ldr.w	pc, [sp], #4
 800b106:	bf00      	nop
 800b108:	ffff0208 	.word	0xffff0208

0800b10c <vsiprintf>:
 800b10c:	4613      	mov	r3, r2
 800b10e:	460a      	mov	r2, r1
 800b110:	4601      	mov	r1, r0
 800b112:	4802      	ldr	r0, [pc, #8]	; (800b11c <vsiprintf+0x10>)
 800b114:	6800      	ldr	r0, [r0, #0]
 800b116:	f7ff bfe3 	b.w	800b0e0 <_vsiprintf_r>
 800b11a:	bf00      	nop
 800b11c:	24000010 	.word	0x24000010

0800b120 <__ssputs_r>:
 800b120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b124:	688e      	ldr	r6, [r1, #8]
 800b126:	429e      	cmp	r6, r3
 800b128:	4682      	mov	sl, r0
 800b12a:	460c      	mov	r4, r1
 800b12c:	4690      	mov	r8, r2
 800b12e:	461f      	mov	r7, r3
 800b130:	d838      	bhi.n	800b1a4 <__ssputs_r+0x84>
 800b132:	898a      	ldrh	r2, [r1, #12]
 800b134:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b138:	d032      	beq.n	800b1a0 <__ssputs_r+0x80>
 800b13a:	6825      	ldr	r5, [r4, #0]
 800b13c:	6909      	ldr	r1, [r1, #16]
 800b13e:	eba5 0901 	sub.w	r9, r5, r1
 800b142:	6965      	ldr	r5, [r4, #20]
 800b144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b148:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b14c:	3301      	adds	r3, #1
 800b14e:	444b      	add	r3, r9
 800b150:	106d      	asrs	r5, r5, #1
 800b152:	429d      	cmp	r5, r3
 800b154:	bf38      	it	cc
 800b156:	461d      	movcc	r5, r3
 800b158:	0553      	lsls	r3, r2, #21
 800b15a:	d531      	bpl.n	800b1c0 <__ssputs_r+0xa0>
 800b15c:	4629      	mov	r1, r5
 800b15e:	f000 fb47 	bl	800b7f0 <_malloc_r>
 800b162:	4606      	mov	r6, r0
 800b164:	b950      	cbnz	r0, 800b17c <__ssputs_r+0x5c>
 800b166:	230c      	movs	r3, #12
 800b168:	f8ca 3000 	str.w	r3, [sl]
 800b16c:	89a3      	ldrh	r3, [r4, #12]
 800b16e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b172:	81a3      	strh	r3, [r4, #12]
 800b174:	f04f 30ff 	mov.w	r0, #4294967295
 800b178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b17c:	6921      	ldr	r1, [r4, #16]
 800b17e:	464a      	mov	r2, r9
 800b180:	f000 fabe 	bl	800b700 <memcpy>
 800b184:	89a3      	ldrh	r3, [r4, #12]
 800b186:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b18a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b18e:	81a3      	strh	r3, [r4, #12]
 800b190:	6126      	str	r6, [r4, #16]
 800b192:	6165      	str	r5, [r4, #20]
 800b194:	444e      	add	r6, r9
 800b196:	eba5 0509 	sub.w	r5, r5, r9
 800b19a:	6026      	str	r6, [r4, #0]
 800b19c:	60a5      	str	r5, [r4, #8]
 800b19e:	463e      	mov	r6, r7
 800b1a0:	42be      	cmp	r6, r7
 800b1a2:	d900      	bls.n	800b1a6 <__ssputs_r+0x86>
 800b1a4:	463e      	mov	r6, r7
 800b1a6:	4632      	mov	r2, r6
 800b1a8:	6820      	ldr	r0, [r4, #0]
 800b1aa:	4641      	mov	r1, r8
 800b1ac:	f000 fab6 	bl	800b71c <memmove>
 800b1b0:	68a3      	ldr	r3, [r4, #8]
 800b1b2:	6822      	ldr	r2, [r4, #0]
 800b1b4:	1b9b      	subs	r3, r3, r6
 800b1b6:	4432      	add	r2, r6
 800b1b8:	60a3      	str	r3, [r4, #8]
 800b1ba:	6022      	str	r2, [r4, #0]
 800b1bc:	2000      	movs	r0, #0
 800b1be:	e7db      	b.n	800b178 <__ssputs_r+0x58>
 800b1c0:	462a      	mov	r2, r5
 800b1c2:	f000 fb6f 	bl	800b8a4 <_realloc_r>
 800b1c6:	4606      	mov	r6, r0
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	d1e1      	bne.n	800b190 <__ssputs_r+0x70>
 800b1cc:	6921      	ldr	r1, [r4, #16]
 800b1ce:	4650      	mov	r0, sl
 800b1d0:	f000 fabe 	bl	800b750 <_free_r>
 800b1d4:	e7c7      	b.n	800b166 <__ssputs_r+0x46>
	...

0800b1d8 <_svfiprintf_r>:
 800b1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1dc:	4698      	mov	r8, r3
 800b1de:	898b      	ldrh	r3, [r1, #12]
 800b1e0:	061b      	lsls	r3, r3, #24
 800b1e2:	b09d      	sub	sp, #116	; 0x74
 800b1e4:	4607      	mov	r7, r0
 800b1e6:	460d      	mov	r5, r1
 800b1e8:	4614      	mov	r4, r2
 800b1ea:	d50e      	bpl.n	800b20a <_svfiprintf_r+0x32>
 800b1ec:	690b      	ldr	r3, [r1, #16]
 800b1ee:	b963      	cbnz	r3, 800b20a <_svfiprintf_r+0x32>
 800b1f0:	2140      	movs	r1, #64	; 0x40
 800b1f2:	f000 fafd 	bl	800b7f0 <_malloc_r>
 800b1f6:	6028      	str	r0, [r5, #0]
 800b1f8:	6128      	str	r0, [r5, #16]
 800b1fa:	b920      	cbnz	r0, 800b206 <_svfiprintf_r+0x2e>
 800b1fc:	230c      	movs	r3, #12
 800b1fe:	603b      	str	r3, [r7, #0]
 800b200:	f04f 30ff 	mov.w	r0, #4294967295
 800b204:	e0d1      	b.n	800b3aa <_svfiprintf_r+0x1d2>
 800b206:	2340      	movs	r3, #64	; 0x40
 800b208:	616b      	str	r3, [r5, #20]
 800b20a:	2300      	movs	r3, #0
 800b20c:	9309      	str	r3, [sp, #36]	; 0x24
 800b20e:	2320      	movs	r3, #32
 800b210:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b214:	f8cd 800c 	str.w	r8, [sp, #12]
 800b218:	2330      	movs	r3, #48	; 0x30
 800b21a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b3c4 <_svfiprintf_r+0x1ec>
 800b21e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b222:	f04f 0901 	mov.w	r9, #1
 800b226:	4623      	mov	r3, r4
 800b228:	469a      	mov	sl, r3
 800b22a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b22e:	b10a      	cbz	r2, 800b234 <_svfiprintf_r+0x5c>
 800b230:	2a25      	cmp	r2, #37	; 0x25
 800b232:	d1f9      	bne.n	800b228 <_svfiprintf_r+0x50>
 800b234:	ebba 0b04 	subs.w	fp, sl, r4
 800b238:	d00b      	beq.n	800b252 <_svfiprintf_r+0x7a>
 800b23a:	465b      	mov	r3, fp
 800b23c:	4622      	mov	r2, r4
 800b23e:	4629      	mov	r1, r5
 800b240:	4638      	mov	r0, r7
 800b242:	f7ff ff6d 	bl	800b120 <__ssputs_r>
 800b246:	3001      	adds	r0, #1
 800b248:	f000 80aa 	beq.w	800b3a0 <_svfiprintf_r+0x1c8>
 800b24c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b24e:	445a      	add	r2, fp
 800b250:	9209      	str	r2, [sp, #36]	; 0x24
 800b252:	f89a 3000 	ldrb.w	r3, [sl]
 800b256:	2b00      	cmp	r3, #0
 800b258:	f000 80a2 	beq.w	800b3a0 <_svfiprintf_r+0x1c8>
 800b25c:	2300      	movs	r3, #0
 800b25e:	f04f 32ff 	mov.w	r2, #4294967295
 800b262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b266:	f10a 0a01 	add.w	sl, sl, #1
 800b26a:	9304      	str	r3, [sp, #16]
 800b26c:	9307      	str	r3, [sp, #28]
 800b26e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b272:	931a      	str	r3, [sp, #104]	; 0x68
 800b274:	4654      	mov	r4, sl
 800b276:	2205      	movs	r2, #5
 800b278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b27c:	4851      	ldr	r0, [pc, #324]	; (800b3c4 <_svfiprintf_r+0x1ec>)
 800b27e:	f7f5 f847 	bl	8000310 <memchr>
 800b282:	9a04      	ldr	r2, [sp, #16]
 800b284:	b9d8      	cbnz	r0, 800b2be <_svfiprintf_r+0xe6>
 800b286:	06d0      	lsls	r0, r2, #27
 800b288:	bf44      	itt	mi
 800b28a:	2320      	movmi	r3, #32
 800b28c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b290:	0711      	lsls	r1, r2, #28
 800b292:	bf44      	itt	mi
 800b294:	232b      	movmi	r3, #43	; 0x2b
 800b296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b29a:	f89a 3000 	ldrb.w	r3, [sl]
 800b29e:	2b2a      	cmp	r3, #42	; 0x2a
 800b2a0:	d015      	beq.n	800b2ce <_svfiprintf_r+0xf6>
 800b2a2:	9a07      	ldr	r2, [sp, #28]
 800b2a4:	4654      	mov	r4, sl
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	f04f 0c0a 	mov.w	ip, #10
 800b2ac:	4621      	mov	r1, r4
 800b2ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2b2:	3b30      	subs	r3, #48	; 0x30
 800b2b4:	2b09      	cmp	r3, #9
 800b2b6:	d94e      	bls.n	800b356 <_svfiprintf_r+0x17e>
 800b2b8:	b1b0      	cbz	r0, 800b2e8 <_svfiprintf_r+0x110>
 800b2ba:	9207      	str	r2, [sp, #28]
 800b2bc:	e014      	b.n	800b2e8 <_svfiprintf_r+0x110>
 800b2be:	eba0 0308 	sub.w	r3, r0, r8
 800b2c2:	fa09 f303 	lsl.w	r3, r9, r3
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	9304      	str	r3, [sp, #16]
 800b2ca:	46a2      	mov	sl, r4
 800b2cc:	e7d2      	b.n	800b274 <_svfiprintf_r+0x9c>
 800b2ce:	9b03      	ldr	r3, [sp, #12]
 800b2d0:	1d19      	adds	r1, r3, #4
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	9103      	str	r1, [sp, #12]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	bfbb      	ittet	lt
 800b2da:	425b      	neglt	r3, r3
 800b2dc:	f042 0202 	orrlt.w	r2, r2, #2
 800b2e0:	9307      	strge	r3, [sp, #28]
 800b2e2:	9307      	strlt	r3, [sp, #28]
 800b2e4:	bfb8      	it	lt
 800b2e6:	9204      	strlt	r2, [sp, #16]
 800b2e8:	7823      	ldrb	r3, [r4, #0]
 800b2ea:	2b2e      	cmp	r3, #46	; 0x2e
 800b2ec:	d10c      	bne.n	800b308 <_svfiprintf_r+0x130>
 800b2ee:	7863      	ldrb	r3, [r4, #1]
 800b2f0:	2b2a      	cmp	r3, #42	; 0x2a
 800b2f2:	d135      	bne.n	800b360 <_svfiprintf_r+0x188>
 800b2f4:	9b03      	ldr	r3, [sp, #12]
 800b2f6:	1d1a      	adds	r2, r3, #4
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	9203      	str	r2, [sp, #12]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	bfb8      	it	lt
 800b300:	f04f 33ff 	movlt.w	r3, #4294967295
 800b304:	3402      	adds	r4, #2
 800b306:	9305      	str	r3, [sp, #20]
 800b308:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b3d4 <_svfiprintf_r+0x1fc>
 800b30c:	7821      	ldrb	r1, [r4, #0]
 800b30e:	2203      	movs	r2, #3
 800b310:	4650      	mov	r0, sl
 800b312:	f7f4 fffd 	bl	8000310 <memchr>
 800b316:	b140      	cbz	r0, 800b32a <_svfiprintf_r+0x152>
 800b318:	2340      	movs	r3, #64	; 0x40
 800b31a:	eba0 000a 	sub.w	r0, r0, sl
 800b31e:	fa03 f000 	lsl.w	r0, r3, r0
 800b322:	9b04      	ldr	r3, [sp, #16]
 800b324:	4303      	orrs	r3, r0
 800b326:	3401      	adds	r4, #1
 800b328:	9304      	str	r3, [sp, #16]
 800b32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b32e:	4826      	ldr	r0, [pc, #152]	; (800b3c8 <_svfiprintf_r+0x1f0>)
 800b330:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b334:	2206      	movs	r2, #6
 800b336:	f7f4 ffeb 	bl	8000310 <memchr>
 800b33a:	2800      	cmp	r0, #0
 800b33c:	d038      	beq.n	800b3b0 <_svfiprintf_r+0x1d8>
 800b33e:	4b23      	ldr	r3, [pc, #140]	; (800b3cc <_svfiprintf_r+0x1f4>)
 800b340:	bb1b      	cbnz	r3, 800b38a <_svfiprintf_r+0x1b2>
 800b342:	9b03      	ldr	r3, [sp, #12]
 800b344:	3307      	adds	r3, #7
 800b346:	f023 0307 	bic.w	r3, r3, #7
 800b34a:	3308      	adds	r3, #8
 800b34c:	9303      	str	r3, [sp, #12]
 800b34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b350:	4433      	add	r3, r6
 800b352:	9309      	str	r3, [sp, #36]	; 0x24
 800b354:	e767      	b.n	800b226 <_svfiprintf_r+0x4e>
 800b356:	fb0c 3202 	mla	r2, ip, r2, r3
 800b35a:	460c      	mov	r4, r1
 800b35c:	2001      	movs	r0, #1
 800b35e:	e7a5      	b.n	800b2ac <_svfiprintf_r+0xd4>
 800b360:	2300      	movs	r3, #0
 800b362:	3401      	adds	r4, #1
 800b364:	9305      	str	r3, [sp, #20]
 800b366:	4619      	mov	r1, r3
 800b368:	f04f 0c0a 	mov.w	ip, #10
 800b36c:	4620      	mov	r0, r4
 800b36e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b372:	3a30      	subs	r2, #48	; 0x30
 800b374:	2a09      	cmp	r2, #9
 800b376:	d903      	bls.n	800b380 <_svfiprintf_r+0x1a8>
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d0c5      	beq.n	800b308 <_svfiprintf_r+0x130>
 800b37c:	9105      	str	r1, [sp, #20]
 800b37e:	e7c3      	b.n	800b308 <_svfiprintf_r+0x130>
 800b380:	fb0c 2101 	mla	r1, ip, r1, r2
 800b384:	4604      	mov	r4, r0
 800b386:	2301      	movs	r3, #1
 800b388:	e7f0      	b.n	800b36c <_svfiprintf_r+0x194>
 800b38a:	ab03      	add	r3, sp, #12
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	462a      	mov	r2, r5
 800b390:	4b0f      	ldr	r3, [pc, #60]	; (800b3d0 <_svfiprintf_r+0x1f8>)
 800b392:	a904      	add	r1, sp, #16
 800b394:	4638      	mov	r0, r7
 800b396:	f3af 8000 	nop.w
 800b39a:	1c42      	adds	r2, r0, #1
 800b39c:	4606      	mov	r6, r0
 800b39e:	d1d6      	bne.n	800b34e <_svfiprintf_r+0x176>
 800b3a0:	89ab      	ldrh	r3, [r5, #12]
 800b3a2:	065b      	lsls	r3, r3, #25
 800b3a4:	f53f af2c 	bmi.w	800b200 <_svfiprintf_r+0x28>
 800b3a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3aa:	b01d      	add	sp, #116	; 0x74
 800b3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b0:	ab03      	add	r3, sp, #12
 800b3b2:	9300      	str	r3, [sp, #0]
 800b3b4:	462a      	mov	r2, r5
 800b3b6:	4b06      	ldr	r3, [pc, #24]	; (800b3d0 <_svfiprintf_r+0x1f8>)
 800b3b8:	a904      	add	r1, sp, #16
 800b3ba:	4638      	mov	r0, r7
 800b3bc:	f000 f87a 	bl	800b4b4 <_printf_i>
 800b3c0:	e7eb      	b.n	800b39a <_svfiprintf_r+0x1c2>
 800b3c2:	bf00      	nop
 800b3c4:	0800b9b0 	.word	0x0800b9b0
 800b3c8:	0800b9ba 	.word	0x0800b9ba
 800b3cc:	00000000 	.word	0x00000000
 800b3d0:	0800b121 	.word	0x0800b121
 800b3d4:	0800b9b6 	.word	0x0800b9b6

0800b3d8 <_printf_common>:
 800b3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3dc:	4616      	mov	r6, r2
 800b3de:	4699      	mov	r9, r3
 800b3e0:	688a      	ldr	r2, [r1, #8]
 800b3e2:	690b      	ldr	r3, [r1, #16]
 800b3e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	bfb8      	it	lt
 800b3ec:	4613      	movlt	r3, r2
 800b3ee:	6033      	str	r3, [r6, #0]
 800b3f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3f4:	4607      	mov	r7, r0
 800b3f6:	460c      	mov	r4, r1
 800b3f8:	b10a      	cbz	r2, 800b3fe <_printf_common+0x26>
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	6033      	str	r3, [r6, #0]
 800b3fe:	6823      	ldr	r3, [r4, #0]
 800b400:	0699      	lsls	r1, r3, #26
 800b402:	bf42      	ittt	mi
 800b404:	6833      	ldrmi	r3, [r6, #0]
 800b406:	3302      	addmi	r3, #2
 800b408:	6033      	strmi	r3, [r6, #0]
 800b40a:	6825      	ldr	r5, [r4, #0]
 800b40c:	f015 0506 	ands.w	r5, r5, #6
 800b410:	d106      	bne.n	800b420 <_printf_common+0x48>
 800b412:	f104 0a19 	add.w	sl, r4, #25
 800b416:	68e3      	ldr	r3, [r4, #12]
 800b418:	6832      	ldr	r2, [r6, #0]
 800b41a:	1a9b      	subs	r3, r3, r2
 800b41c:	42ab      	cmp	r3, r5
 800b41e:	dc26      	bgt.n	800b46e <_printf_common+0x96>
 800b420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b424:	1e13      	subs	r3, r2, #0
 800b426:	6822      	ldr	r2, [r4, #0]
 800b428:	bf18      	it	ne
 800b42a:	2301      	movne	r3, #1
 800b42c:	0692      	lsls	r2, r2, #26
 800b42e:	d42b      	bmi.n	800b488 <_printf_common+0xb0>
 800b430:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b434:	4649      	mov	r1, r9
 800b436:	4638      	mov	r0, r7
 800b438:	47c0      	blx	r8
 800b43a:	3001      	adds	r0, #1
 800b43c:	d01e      	beq.n	800b47c <_printf_common+0xa4>
 800b43e:	6823      	ldr	r3, [r4, #0]
 800b440:	68e5      	ldr	r5, [r4, #12]
 800b442:	6832      	ldr	r2, [r6, #0]
 800b444:	f003 0306 	and.w	r3, r3, #6
 800b448:	2b04      	cmp	r3, #4
 800b44a:	bf08      	it	eq
 800b44c:	1aad      	subeq	r5, r5, r2
 800b44e:	68a3      	ldr	r3, [r4, #8]
 800b450:	6922      	ldr	r2, [r4, #16]
 800b452:	bf0c      	ite	eq
 800b454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b458:	2500      	movne	r5, #0
 800b45a:	4293      	cmp	r3, r2
 800b45c:	bfc4      	itt	gt
 800b45e:	1a9b      	subgt	r3, r3, r2
 800b460:	18ed      	addgt	r5, r5, r3
 800b462:	2600      	movs	r6, #0
 800b464:	341a      	adds	r4, #26
 800b466:	42b5      	cmp	r5, r6
 800b468:	d11a      	bne.n	800b4a0 <_printf_common+0xc8>
 800b46a:	2000      	movs	r0, #0
 800b46c:	e008      	b.n	800b480 <_printf_common+0xa8>
 800b46e:	2301      	movs	r3, #1
 800b470:	4652      	mov	r2, sl
 800b472:	4649      	mov	r1, r9
 800b474:	4638      	mov	r0, r7
 800b476:	47c0      	blx	r8
 800b478:	3001      	adds	r0, #1
 800b47a:	d103      	bne.n	800b484 <_printf_common+0xac>
 800b47c:	f04f 30ff 	mov.w	r0, #4294967295
 800b480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b484:	3501      	adds	r5, #1
 800b486:	e7c6      	b.n	800b416 <_printf_common+0x3e>
 800b488:	18e1      	adds	r1, r4, r3
 800b48a:	1c5a      	adds	r2, r3, #1
 800b48c:	2030      	movs	r0, #48	; 0x30
 800b48e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b492:	4422      	add	r2, r4
 800b494:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b498:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b49c:	3302      	adds	r3, #2
 800b49e:	e7c7      	b.n	800b430 <_printf_common+0x58>
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	4622      	mov	r2, r4
 800b4a4:	4649      	mov	r1, r9
 800b4a6:	4638      	mov	r0, r7
 800b4a8:	47c0      	blx	r8
 800b4aa:	3001      	adds	r0, #1
 800b4ac:	d0e6      	beq.n	800b47c <_printf_common+0xa4>
 800b4ae:	3601      	adds	r6, #1
 800b4b0:	e7d9      	b.n	800b466 <_printf_common+0x8e>
	...

0800b4b4 <_printf_i>:
 800b4b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b8:	460c      	mov	r4, r1
 800b4ba:	4691      	mov	r9, r2
 800b4bc:	7e27      	ldrb	r7, [r4, #24]
 800b4be:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b4c0:	2f78      	cmp	r7, #120	; 0x78
 800b4c2:	4680      	mov	r8, r0
 800b4c4:	469a      	mov	sl, r3
 800b4c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4ca:	d807      	bhi.n	800b4dc <_printf_i+0x28>
 800b4cc:	2f62      	cmp	r7, #98	; 0x62
 800b4ce:	d80a      	bhi.n	800b4e6 <_printf_i+0x32>
 800b4d0:	2f00      	cmp	r7, #0
 800b4d2:	f000 80d8 	beq.w	800b686 <_printf_i+0x1d2>
 800b4d6:	2f58      	cmp	r7, #88	; 0x58
 800b4d8:	f000 80a3 	beq.w	800b622 <_printf_i+0x16e>
 800b4dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b4e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4e4:	e03a      	b.n	800b55c <_printf_i+0xa8>
 800b4e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4ea:	2b15      	cmp	r3, #21
 800b4ec:	d8f6      	bhi.n	800b4dc <_printf_i+0x28>
 800b4ee:	a001      	add	r0, pc, #4	; (adr r0, 800b4f4 <_printf_i+0x40>)
 800b4f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b4f4:	0800b54d 	.word	0x0800b54d
 800b4f8:	0800b561 	.word	0x0800b561
 800b4fc:	0800b4dd 	.word	0x0800b4dd
 800b500:	0800b4dd 	.word	0x0800b4dd
 800b504:	0800b4dd 	.word	0x0800b4dd
 800b508:	0800b4dd 	.word	0x0800b4dd
 800b50c:	0800b561 	.word	0x0800b561
 800b510:	0800b4dd 	.word	0x0800b4dd
 800b514:	0800b4dd 	.word	0x0800b4dd
 800b518:	0800b4dd 	.word	0x0800b4dd
 800b51c:	0800b4dd 	.word	0x0800b4dd
 800b520:	0800b66d 	.word	0x0800b66d
 800b524:	0800b591 	.word	0x0800b591
 800b528:	0800b64f 	.word	0x0800b64f
 800b52c:	0800b4dd 	.word	0x0800b4dd
 800b530:	0800b4dd 	.word	0x0800b4dd
 800b534:	0800b68f 	.word	0x0800b68f
 800b538:	0800b4dd 	.word	0x0800b4dd
 800b53c:	0800b591 	.word	0x0800b591
 800b540:	0800b4dd 	.word	0x0800b4dd
 800b544:	0800b4dd 	.word	0x0800b4dd
 800b548:	0800b657 	.word	0x0800b657
 800b54c:	680b      	ldr	r3, [r1, #0]
 800b54e:	1d1a      	adds	r2, r3, #4
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	600a      	str	r2, [r1, #0]
 800b554:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b55c:	2301      	movs	r3, #1
 800b55e:	e0a3      	b.n	800b6a8 <_printf_i+0x1f4>
 800b560:	6825      	ldr	r5, [r4, #0]
 800b562:	6808      	ldr	r0, [r1, #0]
 800b564:	062e      	lsls	r6, r5, #24
 800b566:	f100 0304 	add.w	r3, r0, #4
 800b56a:	d50a      	bpl.n	800b582 <_printf_i+0xce>
 800b56c:	6805      	ldr	r5, [r0, #0]
 800b56e:	600b      	str	r3, [r1, #0]
 800b570:	2d00      	cmp	r5, #0
 800b572:	da03      	bge.n	800b57c <_printf_i+0xc8>
 800b574:	232d      	movs	r3, #45	; 0x2d
 800b576:	426d      	negs	r5, r5
 800b578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b57c:	485e      	ldr	r0, [pc, #376]	; (800b6f8 <_printf_i+0x244>)
 800b57e:	230a      	movs	r3, #10
 800b580:	e019      	b.n	800b5b6 <_printf_i+0x102>
 800b582:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b586:	6805      	ldr	r5, [r0, #0]
 800b588:	600b      	str	r3, [r1, #0]
 800b58a:	bf18      	it	ne
 800b58c:	b22d      	sxthne	r5, r5
 800b58e:	e7ef      	b.n	800b570 <_printf_i+0xbc>
 800b590:	680b      	ldr	r3, [r1, #0]
 800b592:	6825      	ldr	r5, [r4, #0]
 800b594:	1d18      	adds	r0, r3, #4
 800b596:	6008      	str	r0, [r1, #0]
 800b598:	0628      	lsls	r0, r5, #24
 800b59a:	d501      	bpl.n	800b5a0 <_printf_i+0xec>
 800b59c:	681d      	ldr	r5, [r3, #0]
 800b59e:	e002      	b.n	800b5a6 <_printf_i+0xf2>
 800b5a0:	0669      	lsls	r1, r5, #25
 800b5a2:	d5fb      	bpl.n	800b59c <_printf_i+0xe8>
 800b5a4:	881d      	ldrh	r5, [r3, #0]
 800b5a6:	4854      	ldr	r0, [pc, #336]	; (800b6f8 <_printf_i+0x244>)
 800b5a8:	2f6f      	cmp	r7, #111	; 0x6f
 800b5aa:	bf0c      	ite	eq
 800b5ac:	2308      	moveq	r3, #8
 800b5ae:	230a      	movne	r3, #10
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5b6:	6866      	ldr	r6, [r4, #4]
 800b5b8:	60a6      	str	r6, [r4, #8]
 800b5ba:	2e00      	cmp	r6, #0
 800b5bc:	bfa2      	ittt	ge
 800b5be:	6821      	ldrge	r1, [r4, #0]
 800b5c0:	f021 0104 	bicge.w	r1, r1, #4
 800b5c4:	6021      	strge	r1, [r4, #0]
 800b5c6:	b90d      	cbnz	r5, 800b5cc <_printf_i+0x118>
 800b5c8:	2e00      	cmp	r6, #0
 800b5ca:	d04d      	beq.n	800b668 <_printf_i+0x1b4>
 800b5cc:	4616      	mov	r6, r2
 800b5ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5d2:	fb03 5711 	mls	r7, r3, r1, r5
 800b5d6:	5dc7      	ldrb	r7, [r0, r7]
 800b5d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5dc:	462f      	mov	r7, r5
 800b5de:	42bb      	cmp	r3, r7
 800b5e0:	460d      	mov	r5, r1
 800b5e2:	d9f4      	bls.n	800b5ce <_printf_i+0x11a>
 800b5e4:	2b08      	cmp	r3, #8
 800b5e6:	d10b      	bne.n	800b600 <_printf_i+0x14c>
 800b5e8:	6823      	ldr	r3, [r4, #0]
 800b5ea:	07df      	lsls	r7, r3, #31
 800b5ec:	d508      	bpl.n	800b600 <_printf_i+0x14c>
 800b5ee:	6923      	ldr	r3, [r4, #16]
 800b5f0:	6861      	ldr	r1, [r4, #4]
 800b5f2:	4299      	cmp	r1, r3
 800b5f4:	bfde      	ittt	le
 800b5f6:	2330      	movle	r3, #48	; 0x30
 800b5f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b5fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b600:	1b92      	subs	r2, r2, r6
 800b602:	6122      	str	r2, [r4, #16]
 800b604:	f8cd a000 	str.w	sl, [sp]
 800b608:	464b      	mov	r3, r9
 800b60a:	aa03      	add	r2, sp, #12
 800b60c:	4621      	mov	r1, r4
 800b60e:	4640      	mov	r0, r8
 800b610:	f7ff fee2 	bl	800b3d8 <_printf_common>
 800b614:	3001      	adds	r0, #1
 800b616:	d14c      	bne.n	800b6b2 <_printf_i+0x1fe>
 800b618:	f04f 30ff 	mov.w	r0, #4294967295
 800b61c:	b004      	add	sp, #16
 800b61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b622:	4835      	ldr	r0, [pc, #212]	; (800b6f8 <_printf_i+0x244>)
 800b624:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b628:	6823      	ldr	r3, [r4, #0]
 800b62a:	680e      	ldr	r6, [r1, #0]
 800b62c:	061f      	lsls	r7, r3, #24
 800b62e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b632:	600e      	str	r6, [r1, #0]
 800b634:	d514      	bpl.n	800b660 <_printf_i+0x1ac>
 800b636:	07d9      	lsls	r1, r3, #31
 800b638:	bf44      	itt	mi
 800b63a:	f043 0320 	orrmi.w	r3, r3, #32
 800b63e:	6023      	strmi	r3, [r4, #0]
 800b640:	b91d      	cbnz	r5, 800b64a <_printf_i+0x196>
 800b642:	6823      	ldr	r3, [r4, #0]
 800b644:	f023 0320 	bic.w	r3, r3, #32
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	2310      	movs	r3, #16
 800b64c:	e7b0      	b.n	800b5b0 <_printf_i+0xfc>
 800b64e:	6823      	ldr	r3, [r4, #0]
 800b650:	f043 0320 	orr.w	r3, r3, #32
 800b654:	6023      	str	r3, [r4, #0]
 800b656:	2378      	movs	r3, #120	; 0x78
 800b658:	4828      	ldr	r0, [pc, #160]	; (800b6fc <_printf_i+0x248>)
 800b65a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b65e:	e7e3      	b.n	800b628 <_printf_i+0x174>
 800b660:	065e      	lsls	r6, r3, #25
 800b662:	bf48      	it	mi
 800b664:	b2ad      	uxthmi	r5, r5
 800b666:	e7e6      	b.n	800b636 <_printf_i+0x182>
 800b668:	4616      	mov	r6, r2
 800b66a:	e7bb      	b.n	800b5e4 <_printf_i+0x130>
 800b66c:	680b      	ldr	r3, [r1, #0]
 800b66e:	6826      	ldr	r6, [r4, #0]
 800b670:	6960      	ldr	r0, [r4, #20]
 800b672:	1d1d      	adds	r5, r3, #4
 800b674:	600d      	str	r5, [r1, #0]
 800b676:	0635      	lsls	r5, r6, #24
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	d501      	bpl.n	800b680 <_printf_i+0x1cc>
 800b67c:	6018      	str	r0, [r3, #0]
 800b67e:	e002      	b.n	800b686 <_printf_i+0x1d2>
 800b680:	0671      	lsls	r1, r6, #25
 800b682:	d5fb      	bpl.n	800b67c <_printf_i+0x1c8>
 800b684:	8018      	strh	r0, [r3, #0]
 800b686:	2300      	movs	r3, #0
 800b688:	6123      	str	r3, [r4, #16]
 800b68a:	4616      	mov	r6, r2
 800b68c:	e7ba      	b.n	800b604 <_printf_i+0x150>
 800b68e:	680b      	ldr	r3, [r1, #0]
 800b690:	1d1a      	adds	r2, r3, #4
 800b692:	600a      	str	r2, [r1, #0]
 800b694:	681e      	ldr	r6, [r3, #0]
 800b696:	6862      	ldr	r2, [r4, #4]
 800b698:	2100      	movs	r1, #0
 800b69a:	4630      	mov	r0, r6
 800b69c:	f7f4 fe38 	bl	8000310 <memchr>
 800b6a0:	b108      	cbz	r0, 800b6a6 <_printf_i+0x1f2>
 800b6a2:	1b80      	subs	r0, r0, r6
 800b6a4:	6060      	str	r0, [r4, #4]
 800b6a6:	6863      	ldr	r3, [r4, #4]
 800b6a8:	6123      	str	r3, [r4, #16]
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6b0:	e7a8      	b.n	800b604 <_printf_i+0x150>
 800b6b2:	6923      	ldr	r3, [r4, #16]
 800b6b4:	4632      	mov	r2, r6
 800b6b6:	4649      	mov	r1, r9
 800b6b8:	4640      	mov	r0, r8
 800b6ba:	47d0      	blx	sl
 800b6bc:	3001      	adds	r0, #1
 800b6be:	d0ab      	beq.n	800b618 <_printf_i+0x164>
 800b6c0:	6823      	ldr	r3, [r4, #0]
 800b6c2:	079b      	lsls	r3, r3, #30
 800b6c4:	d413      	bmi.n	800b6ee <_printf_i+0x23a>
 800b6c6:	68e0      	ldr	r0, [r4, #12]
 800b6c8:	9b03      	ldr	r3, [sp, #12]
 800b6ca:	4298      	cmp	r0, r3
 800b6cc:	bfb8      	it	lt
 800b6ce:	4618      	movlt	r0, r3
 800b6d0:	e7a4      	b.n	800b61c <_printf_i+0x168>
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	4632      	mov	r2, r6
 800b6d6:	4649      	mov	r1, r9
 800b6d8:	4640      	mov	r0, r8
 800b6da:	47d0      	blx	sl
 800b6dc:	3001      	adds	r0, #1
 800b6de:	d09b      	beq.n	800b618 <_printf_i+0x164>
 800b6e0:	3501      	adds	r5, #1
 800b6e2:	68e3      	ldr	r3, [r4, #12]
 800b6e4:	9903      	ldr	r1, [sp, #12]
 800b6e6:	1a5b      	subs	r3, r3, r1
 800b6e8:	42ab      	cmp	r3, r5
 800b6ea:	dcf2      	bgt.n	800b6d2 <_printf_i+0x21e>
 800b6ec:	e7eb      	b.n	800b6c6 <_printf_i+0x212>
 800b6ee:	2500      	movs	r5, #0
 800b6f0:	f104 0619 	add.w	r6, r4, #25
 800b6f4:	e7f5      	b.n	800b6e2 <_printf_i+0x22e>
 800b6f6:	bf00      	nop
 800b6f8:	0800b9c1 	.word	0x0800b9c1
 800b6fc:	0800b9d2 	.word	0x0800b9d2

0800b700 <memcpy>:
 800b700:	440a      	add	r2, r1
 800b702:	4291      	cmp	r1, r2
 800b704:	f100 33ff 	add.w	r3, r0, #4294967295
 800b708:	d100      	bne.n	800b70c <memcpy+0xc>
 800b70a:	4770      	bx	lr
 800b70c:	b510      	push	{r4, lr}
 800b70e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b712:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b716:	4291      	cmp	r1, r2
 800b718:	d1f9      	bne.n	800b70e <memcpy+0xe>
 800b71a:	bd10      	pop	{r4, pc}

0800b71c <memmove>:
 800b71c:	4288      	cmp	r0, r1
 800b71e:	b510      	push	{r4, lr}
 800b720:	eb01 0402 	add.w	r4, r1, r2
 800b724:	d902      	bls.n	800b72c <memmove+0x10>
 800b726:	4284      	cmp	r4, r0
 800b728:	4623      	mov	r3, r4
 800b72a:	d807      	bhi.n	800b73c <memmove+0x20>
 800b72c:	1e43      	subs	r3, r0, #1
 800b72e:	42a1      	cmp	r1, r4
 800b730:	d008      	beq.n	800b744 <memmove+0x28>
 800b732:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b736:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b73a:	e7f8      	b.n	800b72e <memmove+0x12>
 800b73c:	4402      	add	r2, r0
 800b73e:	4601      	mov	r1, r0
 800b740:	428a      	cmp	r2, r1
 800b742:	d100      	bne.n	800b746 <memmove+0x2a>
 800b744:	bd10      	pop	{r4, pc}
 800b746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b74a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b74e:	e7f7      	b.n	800b740 <memmove+0x24>

0800b750 <_free_r>:
 800b750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b752:	2900      	cmp	r1, #0
 800b754:	d048      	beq.n	800b7e8 <_free_r+0x98>
 800b756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b75a:	9001      	str	r0, [sp, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f1a1 0404 	sub.w	r4, r1, #4
 800b762:	bfb8      	it	lt
 800b764:	18e4      	addlt	r4, r4, r3
 800b766:	f000 f8d3 	bl	800b910 <__malloc_lock>
 800b76a:	4a20      	ldr	r2, [pc, #128]	; (800b7ec <_free_r+0x9c>)
 800b76c:	9801      	ldr	r0, [sp, #4]
 800b76e:	6813      	ldr	r3, [r2, #0]
 800b770:	4615      	mov	r5, r2
 800b772:	b933      	cbnz	r3, 800b782 <_free_r+0x32>
 800b774:	6063      	str	r3, [r4, #4]
 800b776:	6014      	str	r4, [r2, #0]
 800b778:	b003      	add	sp, #12
 800b77a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b77e:	f000 b8cd 	b.w	800b91c <__malloc_unlock>
 800b782:	42a3      	cmp	r3, r4
 800b784:	d90b      	bls.n	800b79e <_free_r+0x4e>
 800b786:	6821      	ldr	r1, [r4, #0]
 800b788:	1862      	adds	r2, r4, r1
 800b78a:	4293      	cmp	r3, r2
 800b78c:	bf04      	itt	eq
 800b78e:	681a      	ldreq	r2, [r3, #0]
 800b790:	685b      	ldreq	r3, [r3, #4]
 800b792:	6063      	str	r3, [r4, #4]
 800b794:	bf04      	itt	eq
 800b796:	1852      	addeq	r2, r2, r1
 800b798:	6022      	streq	r2, [r4, #0]
 800b79a:	602c      	str	r4, [r5, #0]
 800b79c:	e7ec      	b.n	800b778 <_free_r+0x28>
 800b79e:	461a      	mov	r2, r3
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	b10b      	cbz	r3, 800b7a8 <_free_r+0x58>
 800b7a4:	42a3      	cmp	r3, r4
 800b7a6:	d9fa      	bls.n	800b79e <_free_r+0x4e>
 800b7a8:	6811      	ldr	r1, [r2, #0]
 800b7aa:	1855      	adds	r5, r2, r1
 800b7ac:	42a5      	cmp	r5, r4
 800b7ae:	d10b      	bne.n	800b7c8 <_free_r+0x78>
 800b7b0:	6824      	ldr	r4, [r4, #0]
 800b7b2:	4421      	add	r1, r4
 800b7b4:	1854      	adds	r4, r2, r1
 800b7b6:	42a3      	cmp	r3, r4
 800b7b8:	6011      	str	r1, [r2, #0]
 800b7ba:	d1dd      	bne.n	800b778 <_free_r+0x28>
 800b7bc:	681c      	ldr	r4, [r3, #0]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	6053      	str	r3, [r2, #4]
 800b7c2:	4421      	add	r1, r4
 800b7c4:	6011      	str	r1, [r2, #0]
 800b7c6:	e7d7      	b.n	800b778 <_free_r+0x28>
 800b7c8:	d902      	bls.n	800b7d0 <_free_r+0x80>
 800b7ca:	230c      	movs	r3, #12
 800b7cc:	6003      	str	r3, [r0, #0]
 800b7ce:	e7d3      	b.n	800b778 <_free_r+0x28>
 800b7d0:	6825      	ldr	r5, [r4, #0]
 800b7d2:	1961      	adds	r1, r4, r5
 800b7d4:	428b      	cmp	r3, r1
 800b7d6:	bf04      	itt	eq
 800b7d8:	6819      	ldreq	r1, [r3, #0]
 800b7da:	685b      	ldreq	r3, [r3, #4]
 800b7dc:	6063      	str	r3, [r4, #4]
 800b7de:	bf04      	itt	eq
 800b7e0:	1949      	addeq	r1, r1, r5
 800b7e2:	6021      	streq	r1, [r4, #0]
 800b7e4:	6054      	str	r4, [r2, #4]
 800b7e6:	e7c7      	b.n	800b778 <_free_r+0x28>
 800b7e8:	b003      	add	sp, #12
 800b7ea:	bd30      	pop	{r4, r5, pc}
 800b7ec:	2400522c 	.word	0x2400522c

0800b7f0 <_malloc_r>:
 800b7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f2:	1ccd      	adds	r5, r1, #3
 800b7f4:	f025 0503 	bic.w	r5, r5, #3
 800b7f8:	3508      	adds	r5, #8
 800b7fa:	2d0c      	cmp	r5, #12
 800b7fc:	bf38      	it	cc
 800b7fe:	250c      	movcc	r5, #12
 800b800:	2d00      	cmp	r5, #0
 800b802:	4606      	mov	r6, r0
 800b804:	db01      	blt.n	800b80a <_malloc_r+0x1a>
 800b806:	42a9      	cmp	r1, r5
 800b808:	d903      	bls.n	800b812 <_malloc_r+0x22>
 800b80a:	230c      	movs	r3, #12
 800b80c:	6033      	str	r3, [r6, #0]
 800b80e:	2000      	movs	r0, #0
 800b810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b812:	f000 f87d 	bl	800b910 <__malloc_lock>
 800b816:	4921      	ldr	r1, [pc, #132]	; (800b89c <_malloc_r+0xac>)
 800b818:	680a      	ldr	r2, [r1, #0]
 800b81a:	4614      	mov	r4, r2
 800b81c:	b99c      	cbnz	r4, 800b846 <_malloc_r+0x56>
 800b81e:	4f20      	ldr	r7, [pc, #128]	; (800b8a0 <_malloc_r+0xb0>)
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	b923      	cbnz	r3, 800b82e <_malloc_r+0x3e>
 800b824:	4621      	mov	r1, r4
 800b826:	4630      	mov	r0, r6
 800b828:	f000 f862 	bl	800b8f0 <_sbrk_r>
 800b82c:	6038      	str	r0, [r7, #0]
 800b82e:	4629      	mov	r1, r5
 800b830:	4630      	mov	r0, r6
 800b832:	f000 f85d 	bl	800b8f0 <_sbrk_r>
 800b836:	1c43      	adds	r3, r0, #1
 800b838:	d123      	bne.n	800b882 <_malloc_r+0x92>
 800b83a:	230c      	movs	r3, #12
 800b83c:	6033      	str	r3, [r6, #0]
 800b83e:	4630      	mov	r0, r6
 800b840:	f000 f86c 	bl	800b91c <__malloc_unlock>
 800b844:	e7e3      	b.n	800b80e <_malloc_r+0x1e>
 800b846:	6823      	ldr	r3, [r4, #0]
 800b848:	1b5b      	subs	r3, r3, r5
 800b84a:	d417      	bmi.n	800b87c <_malloc_r+0x8c>
 800b84c:	2b0b      	cmp	r3, #11
 800b84e:	d903      	bls.n	800b858 <_malloc_r+0x68>
 800b850:	6023      	str	r3, [r4, #0]
 800b852:	441c      	add	r4, r3
 800b854:	6025      	str	r5, [r4, #0]
 800b856:	e004      	b.n	800b862 <_malloc_r+0x72>
 800b858:	6863      	ldr	r3, [r4, #4]
 800b85a:	42a2      	cmp	r2, r4
 800b85c:	bf0c      	ite	eq
 800b85e:	600b      	streq	r3, [r1, #0]
 800b860:	6053      	strne	r3, [r2, #4]
 800b862:	4630      	mov	r0, r6
 800b864:	f000 f85a 	bl	800b91c <__malloc_unlock>
 800b868:	f104 000b 	add.w	r0, r4, #11
 800b86c:	1d23      	adds	r3, r4, #4
 800b86e:	f020 0007 	bic.w	r0, r0, #7
 800b872:	1ac2      	subs	r2, r0, r3
 800b874:	d0cc      	beq.n	800b810 <_malloc_r+0x20>
 800b876:	1a1b      	subs	r3, r3, r0
 800b878:	50a3      	str	r3, [r4, r2]
 800b87a:	e7c9      	b.n	800b810 <_malloc_r+0x20>
 800b87c:	4622      	mov	r2, r4
 800b87e:	6864      	ldr	r4, [r4, #4]
 800b880:	e7cc      	b.n	800b81c <_malloc_r+0x2c>
 800b882:	1cc4      	adds	r4, r0, #3
 800b884:	f024 0403 	bic.w	r4, r4, #3
 800b888:	42a0      	cmp	r0, r4
 800b88a:	d0e3      	beq.n	800b854 <_malloc_r+0x64>
 800b88c:	1a21      	subs	r1, r4, r0
 800b88e:	4630      	mov	r0, r6
 800b890:	f000 f82e 	bl	800b8f0 <_sbrk_r>
 800b894:	3001      	adds	r0, #1
 800b896:	d1dd      	bne.n	800b854 <_malloc_r+0x64>
 800b898:	e7cf      	b.n	800b83a <_malloc_r+0x4a>
 800b89a:	bf00      	nop
 800b89c:	2400522c 	.word	0x2400522c
 800b8a0:	24005230 	.word	0x24005230

0800b8a4 <_realloc_r>:
 800b8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a6:	4607      	mov	r7, r0
 800b8a8:	4614      	mov	r4, r2
 800b8aa:	460e      	mov	r6, r1
 800b8ac:	b921      	cbnz	r1, 800b8b8 <_realloc_r+0x14>
 800b8ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b8b2:	4611      	mov	r1, r2
 800b8b4:	f7ff bf9c 	b.w	800b7f0 <_malloc_r>
 800b8b8:	b922      	cbnz	r2, 800b8c4 <_realloc_r+0x20>
 800b8ba:	f7ff ff49 	bl	800b750 <_free_r>
 800b8be:	4625      	mov	r5, r4
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8c4:	f000 f830 	bl	800b928 <_malloc_usable_size_r>
 800b8c8:	42a0      	cmp	r0, r4
 800b8ca:	d20f      	bcs.n	800b8ec <_realloc_r+0x48>
 800b8cc:	4621      	mov	r1, r4
 800b8ce:	4638      	mov	r0, r7
 800b8d0:	f7ff ff8e 	bl	800b7f0 <_malloc_r>
 800b8d4:	4605      	mov	r5, r0
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	d0f2      	beq.n	800b8c0 <_realloc_r+0x1c>
 800b8da:	4631      	mov	r1, r6
 800b8dc:	4622      	mov	r2, r4
 800b8de:	f7ff ff0f 	bl	800b700 <memcpy>
 800b8e2:	4631      	mov	r1, r6
 800b8e4:	4638      	mov	r0, r7
 800b8e6:	f7ff ff33 	bl	800b750 <_free_r>
 800b8ea:	e7e9      	b.n	800b8c0 <_realloc_r+0x1c>
 800b8ec:	4635      	mov	r5, r6
 800b8ee:	e7e7      	b.n	800b8c0 <_realloc_r+0x1c>

0800b8f0 <_sbrk_r>:
 800b8f0:	b538      	push	{r3, r4, r5, lr}
 800b8f2:	4d06      	ldr	r5, [pc, #24]	; (800b90c <_sbrk_r+0x1c>)
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	4604      	mov	r4, r0
 800b8f8:	4608      	mov	r0, r1
 800b8fa:	602b      	str	r3, [r5, #0]
 800b8fc:	f7f5 fad2 	bl	8000ea4 <_sbrk>
 800b900:	1c43      	adds	r3, r0, #1
 800b902:	d102      	bne.n	800b90a <_sbrk_r+0x1a>
 800b904:	682b      	ldr	r3, [r5, #0]
 800b906:	b103      	cbz	r3, 800b90a <_sbrk_r+0x1a>
 800b908:	6023      	str	r3, [r4, #0]
 800b90a:	bd38      	pop	{r3, r4, r5, pc}
 800b90c:	240053b0 	.word	0x240053b0

0800b910 <__malloc_lock>:
 800b910:	4801      	ldr	r0, [pc, #4]	; (800b918 <__malloc_lock+0x8>)
 800b912:	f000 b811 	b.w	800b938 <__retarget_lock_acquire_recursive>
 800b916:	bf00      	nop
 800b918:	240053b8 	.word	0x240053b8

0800b91c <__malloc_unlock>:
 800b91c:	4801      	ldr	r0, [pc, #4]	; (800b924 <__malloc_unlock+0x8>)
 800b91e:	f000 b80c 	b.w	800b93a <__retarget_lock_release_recursive>
 800b922:	bf00      	nop
 800b924:	240053b8 	.word	0x240053b8

0800b928 <_malloc_usable_size_r>:
 800b928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b92c:	1f18      	subs	r0, r3, #4
 800b92e:	2b00      	cmp	r3, #0
 800b930:	bfbc      	itt	lt
 800b932:	580b      	ldrlt	r3, [r1, r0]
 800b934:	18c0      	addlt	r0, r0, r3
 800b936:	4770      	bx	lr

0800b938 <__retarget_lock_acquire_recursive>:
 800b938:	4770      	bx	lr

0800b93a <__retarget_lock_release_recursive>:
 800b93a:	4770      	bx	lr

0800b93c <_init>:
 800b93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93e:	bf00      	nop
 800b940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b942:	bc08      	pop	{r3}
 800b944:	469e      	mov	lr, r3
 800b946:	4770      	bx	lr

0800b948 <_fini>:
 800b948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b94a:	bf00      	nop
 800b94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b94e:	bc08      	pop	{r3}
 800b950:	469e      	mov	lr, r3
 800b952:	4770      	bx	lr
